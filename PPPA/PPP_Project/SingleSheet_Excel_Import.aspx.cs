using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Configuration;
using System.Drawing;
using OfficeOpenXml.Style;
using OfficeOpenXml;
using PPP_Project.Entity;
using PPP_Project.Criteria;
using System.Transactions;
using PPP_Project.Common.Utility;
using OfficeOpenXml.DataValidation;
using PPP_Project.Common.BranchConfiguration;
using System.Text;
using PPP_Project.Common.Message;
using PPP_Project.Common.Enum;
using System.Reflection;
using System.ComponentModel;
using PPP_Project.Common.Extension;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;
using PPP_Project.Business;


namespace PPP_Project
{  
    public partial class SingleSheet_Excel_Import : System.Web.UI.Page
    {
        private static string globalCenterName = "";
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                //txtImportDate.Text = GeneralUtility.ConvertDisplayDateStringFormat(System.DateTime.Now); 
                globalCenterName = string.Empty;
                var Probes = new Probes();
                var result = Probes.FindAllBranch();
               
                for (int i = 0; i < result.Count; i++)
                {
                    ddlCenterName.Items.Insert(i , new ListItem(result[i].BranchName, result[i].BranchCode));
                }
              
            }
        }

        protected void btnSingleSheetImport_Click(object sender, EventArgs e)
        {
            //var plist = new List<ProbesEntity>(); // NEED 1 (first)
            List<string> import_successList = new List<string>();

            if (txtImportDate.Text != "" && txtImportDate.Text != null)
            {

                if (FileUpload1.HasFile)
                {
                    if (Path.GetExtension(FileUpload1.FileName) == ".xlsx")
                    {

                        //ExcelPackage package = new ExcelPackage(FileUpload1.FileContent); // NEED 2 (first) 
                        //ExcelWorksheet workSheet = package.Workbook.Worksheets.First(); // NEED 2 (first)     
                        //workSheet.DeleteRow(1); // NEED 3 (first)
                        //BindBusiness(plist, workSheet); // NEED 4 (first)

                        #region "Test for Multi Sheet" (second) // loop through => multi sheet import (all ws)

                        //using (ExcelPackage package2 = new ExcelPackage(FileUpload1.FileContent)) //new FileInfo(sourceFilePath)
                        //{
                        //    foreach (var excelWorksheet in package2.Workbook.Worksheets) //package2.Workbook.Worksheets[1]
                        //    {
                        //        var plist = new List<ProbesEntity>();
                        //        excelWorksheet.DeleteRow(1);
                        //        BindBusiness(plist, excelWorksheet);

                        //        var wsName=excelWorksheet.Name.ToString(); // test to know
                        //        var wsName2 = excelWorksheet.ToString(); // test to know
                        //        var ws_count = package2.Workbook.Worksheets.Count(); // test to know
                        //        //var worksheet = workbook.Worksheets[3] as Microsoft.Office.Interop.Excel.Worksheet;

                        //        #region Save Probes

                        //        //Probes itemBusiness = new Probes();

                        //        //using (TransactionScope Scope = new TransactionScope())
                        //        //{
                        //        //    try
                        //        //    {
                        //        //        foreach (var v in plist)
                        //        //        {
                        //        //            itemBusiness.Entity = v;
                        //        //            itemBusiness.Save();
                        //        //        }

                        //        //        Scope.Complete();
                        //        //        MessageBox.MessageShow(this.GetType(), "Probes Import Successfully!.", ClientScript);
                        //        //    }
                        //        //    catch (Exception ex)
                        //        //    {
                        //        //        Response.Redirect("error.aspx");
                        //        //        throw ex;
                        //        //    }

                        //        //}

                        //        #endregion
                        //    }
                        //}
                        #endregion

                        #region "Multi Sheet or Sheet by Sheet Import" (third thinking => )

                        using (ExcelPackage ex_package = new ExcelPackage(FileUpload1.FileContent))
                        {
                            int ws_count = ex_package.Workbook.Worksheets.Count();

                            if (ws_count == 1) //for (int i = 1; i <= ws_count; i++)    'Edited
                            // for (int i = 1; i <= ws_count; i++)
                            {
                                //var probes_list = new List<ProbesEntity>();
                                var sheet_name = ex_package.Workbook.Worksheets[1].Name;
                                var center = ddlCenterName.SelectedValue.ToString();

                                #region "For Probes"

                                if (sheet_name.ToString().Trim() == "Probes") //sheet_name == "Probes"
                                {
                                    var probes = new Probes().FindByImportedDateAndCenter(GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim()), center);
                                    if (probes.Count() == 0)
                                    {
                                        var probes_list = new List<ProbesEntity>();

                                        ExcelWorksheet probes_workSheet = ex_package.Workbook.Worksheets[1];
                                        //  probes_workSheet.DeleteRow(1);

                                        if (probes_workSheet.Dimension != null)
                                        {
                                            Probes_BindBusiness(probes_list, probes_workSheet,center);

                                            #region Save Probes

                                            Probes itemBusiness = new Probes();

                                            int i = BulkInsertIntoProbes(probes_list);
                                            MessageBox.MessageShow(this.GetType(), "Probes Import Successfully!.", ClientScript);

                                            //using (TransactionScope Scope = new TransactionScope())
                                            //{
                                            //    try
                                            //    {
                                            //        //probes_list.RemoveAt(0);
                                            //        foreach (var v in probes_list)
                                            //        {
                                            //            itemBusiness.Entity = v;
                                            //            itemBusiness.Save();
                                                        
                                            //        }
                                            //        itemBusiness.ReplaceQATProbes(center);
                                            //        Scope.Complete();
                                            //        import_successList.Add("Probes Import Successfully!\n");
                                            //        MessageBox.MessageShow(this.GetType(), "Probes Import Successfully!.", ClientScript);
                                            //    }
                                            //    catch (Exception ex)
                                            //    {
                                            //        Response.Redirect("error.aspx");
                                            //        throw ex;
                                            //    }

                                            //}

                                            #endregion
                                        }

                                    }
                                    else
                                    {
                                        MessageBox.MessageShow(this.GetType(), "This Excel File has already been Imported!", ClientScript);
                                    }
                                }
                                #endregion
                                #region "For Pricing Probes"
                                else if (sheet_name.ToString().Trim() == "Pricing Probes") // temp to save at Pricing Probes
                                {
                                    var pricingProbes = new PricingProbes().FindByImportedDateAndCenter(GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim()),center);
                                    if (pricingProbes.Count() == 0)
                                    {
                                        var pricingprobes_list = new List<PricingProbesEntity>();

                                        ExcelWorksheet pricingprobes_workSheet = ex_package.Workbook.Worksheets[1];
                                       // pricingprobes_workSheet.DeleteRow(1);

                                        if (pricingprobes_workSheet.Dimension != null)
                                        {
                                            PricingProbes_BindBusiness(pricingprobes_list, pricingprobes_workSheet,center);


                                            #region Pricing Probe

                                            PricingProbes itemBusiness = new PricingProbes();

                                            int i = BulkInsertIntoPricingProbes(pricingprobes_list);
                                            MessageBox.MessageShow(this.GetType(), "PricingProbes Import Successfully!.", ClientScript);

                                            //using (TransactionScope Scope = new TransactionScope())
                                            //{
                                            //    try
                                            //    {
                                            //        //pricingprobes_list.RemoveAt(0);
                                            //        foreach (var v in pricingprobes_list)
                                            //        {

                                            //            itemBusiness.Entity = v;
                                            //            itemBusiness.Save();
                                            //        }
                                            //        itemBusiness.ReplaceQATPricingProbes(center);
                                            //        Scope.Complete();
                                            //        import_successList.Add("PricingProbes Import Successfully!\n");
                                            //        MessageBox.MessageShow(this.GetType(), "PricingProbes Import Successfully!.", ClientScript);

                                            //    }
                                            //    catch (Exception ex)
                                            //    {
                                            //        Response.Redirect("error.aspx");
                                            //        throw ex;
                                            //    }

                                            //}

                                            #endregion
                                        }
                                    }
                                    else
                                    {
                                        MessageBox.MessageShow(this.GetType(), "This Excel File has already been Imported!", ClientScript);
                                    }
                                }
                                #endregion
                                #region "For Masks"
                                else if (sheet_name.ToString().Trim() == "Masks") // for Masks
                                {
                                    var masks = new Masks().FindByImportedDateAndCenter(GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim()), center);
                                    if (masks.Count() == 0)
                                    {

                                        var masks_list = new List<MasksEntity>();

                                        ExcelWorksheet masks_workSheet = ex_package.Workbook.Worksheets[1];
                                       // masks_workSheet.DeleteRow(1);

                                        if (masks_workSheet.Dimension != null)
                                        {
                                            Masks_BindBusiness(masks_list, masks_workSheet, center);

                                            #region Masks

                                            Masks itemBusiness = new Masks();

                                            int i = BulkInsertIntoMasks(masks_list);
                                            MessageBox.MessageShow(this.GetType(), "Masks Import Successfully!.", ClientScript);

                                            //using (TransactionScope Scope = new TransactionScope())
                                            //{
                                            //    try
                                            //    {
                                            //        //masks_list.RemoveAt(0);
                                            //        foreach (var v in masks_list)
                                            //        {
                                            //            itemBusiness.Entity = v;
                                            //            itemBusiness.Save();
                                            //        }
                                            //        itemBusiness.ReplaceQATMasks(center);
                                            //        Scope.Complete();
                                            //        import_successList.Add("Masks Import Successfully!.\n");
                                            //        MessageBox.MessageShow(this.GetType(), "Masks Import Successfully!.", ClientScript);

                                            //    }
                                            //    catch (Exception ex)
                                            //    {
                                            //        Response.Redirect("error.aspx");
                                            //        throw ex;
                                            //    }

                                            //}

                                            #endregion
                                        }
                                    }
                                    else
                                    {
                                        MessageBox.MessageShow(this.GetType(), "This Excel File has already been Imported!", ClientScript);
                                    }

                                }
                                #endregion
                                #region "For Votes"
                                else if (sheet_name.ToString().Trim() == "Votes") // for Votes
                                {
                                    var votes = new Votes().FindByImportedDateAndCenter(GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim()),center);
                                    if (votes.Count() == 0)
                                    {
                                        var votes_list = new List<VotesEntity>();

                                        ExcelWorksheet votes_workSheet = ex_package.Workbook.Worksheets[1];
                                       // votes_workSheet.DeleteRow(1);
                                        Votes_BindBusiness(votes_list, votes_workSheet, center);

                                        #region Votes

                                        Votes itemBusiness = new Votes();

                                        using (TransactionScope Scope = new TransactionScope())
                                        {
                                            try
                                            {
                                                //votes_list.RemoveAt(0);
                                                foreach (var v in votes_list)
                                                {
                                                    itemBusiness.Entity = v;
                                                    itemBusiness.Save();
                                                }
                                                itemBusiness.ReplaceQATVotes(center);
                                                Scope.Complete();
                                                import_successList.Add("Votes Import Successfully!.\n");
                                                MessageBox.MessageShow(this.GetType(), "Votes Import Successfully!.", ClientScript);

                                            }
                                            catch (Exception ex)
                                            {
                                                Response.Redirect("error.aspx");
                                                throw ex;
                                            }

                                        }


                                    }
                                    else
                                    {
                                        MessageBox.MessageShow(this.GetType(), "This Excel File has already been Imported!", ClientScript);
                                    }
                                        #endregion
                                }
                                #endregion
                                #region "For Repricing"
                                else if (sheet_name.ToString().Trim() == "Repricing") // for Repricing
                                {
                                    var repricing = new Repricing().FindByImportedDateAndCenter(GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim()),center);
                                    if (repricing.Count() == 0)
                                    {
                                        var repricing_list = new List<RepricingEntity>();

                                        ExcelWorksheet repricing_workSheet = ex_package.Workbook.Worksheets[1];
                                        //repricing_workSheet.DeleteRow(1);

                                        if (repricing_workSheet.Dimension != null)
                                        {
                                            Repricing_BindBusiness(repricing_list, repricing_workSheet, center);

                                            #region Repricing

                                            Repricing itemBusiness = new Repricing();

                                            int i = BulkInsertIntoRepricing(repricing_list);
                                            MessageBox.MessageShow(this.GetType(), "Repricing Import Successfully!.", ClientScript);

                                            //using (TransactionScope Scope = new TransactionScope())
                                            //{
                                            //    try
                                            //    {
                                            //        //repricing_list.RemoveAt(0);
                                            //        foreach (var v in repricing_list)
                                            //        {
                                            //            itemBusiness.Entity = v;
                                            //            itemBusiness.Save();
                                            //        }
                                            //        itemBusiness.ReplaceQATRepricing(center);
                                            //        Scope.Complete();
                                            //        import_successList.Add("Repricing Import Successfully!.\n");
                                            //        MessageBox.MessageShow(this.GetType(), "Repricing Import Successfully!.", ClientScript);

                                            //    }
                                            //    catch (Exception ex)
                                            //    {
                                            //        Response.Redirect("error.aspx");
                                            //        throw ex;
                                            //    }

                                            //}

                                            #endregion
                                        }

                                    }
                                    else
                                    {
                                        MessageBox.MessageShow(this.GetType(), "This Excel File has already been Imported!", ClientScript);
                                    }
                                }
                                #endregion
                                #region "For Scenes"
                                else if (sheet_name.ToString().Trim() == "Scenes") // for Scenes
                                {
                                    var scenes = new Scenes().FindByImportedDateAndCenter(GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim()),center);
                                    if (scenes.Count() == 0)
                                    {
                                        var scenes_list = new List<ScenesEntity>();

                                        ExcelWorksheet scenes_workSheet = ex_package.Workbook.Worksheets[1];
                                       // scenes_workSheet.DeleteRow(1);

                                        if (scenes_workSheet.Dimension != null)
                                        {
                                            Scenes_BindBusiness(scenes_list, scenes_workSheet, center);

                                            #region SceneRecognition

                                            Scenes itemBusiness = new Scenes();

                                            int i = BulkInsertIntoScenes(scenes_list);
                                            MessageBox.MessageShow(this.GetType(), "Scenes Import Successfully!.", ClientScript);

                                            //using (TransactionScope Scope = new TransactionScope())
                                            //{
                                            //    try
                                            //    {
                                            //        //scenes_list.RemoveAt(0);
                                            //        foreach (var v in scenes_list)
                                            //        {
                                            //            itemBusiness.Entity = v;
                                            //            itemBusiness.Save();
                                            //        }
                                            //        itemBusiness.ReplaceQATScenes(center);
                                            //        Scope.Complete();
                                            //        import_successList.Add("Scenes Import Successfully!.\n");
                                            //        MessageBox.MessageShow(this.GetType(), "Scenes Import Successfully!.", ClientScript);

                                            //    }
                                            //    catch (Exception ex)
                                            //    {

                                            //        Response.Redirect("error.aspx");
                                            //        throw ex;
                                            //    }

                                            //}

                                            #endregion
                                        }

                                    }
                                    else
                                    {
                                        MessageBox.MessageShow(this.GetType(), "This Excel File has already been Imported!", ClientScript);
                                    }
                                }
                                #endregion
                                #region "For CategoryExpert"
                                else if (sheet_name.ToString().Trim() == "Category Expert") // for CategoryExpert
                                {
                                    var categoryexpert = new CategoryExpert().FindByImportedDateAndCenter(GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim()),center);
                                    if (categoryexpert.Count() == 0)
                                    {
                                        var categoryexpert_list = new List<CategoryExpertEntity>();

                                        ExcelWorksheet categoryexpert_workSheet = ex_package.Workbook.Worksheets[1];
                                        //categoryexpert_workSheet.DeleteRow(1);

                                        if (categoryexpert_workSheet.Dimension != null)
                                        {
                                            CategoryExpert_BindBusiness(categoryexpert_list, categoryexpert_workSheet, center);

                                            #region CategoryExpert

                                            CategoryExpert itemBusiness = new CategoryExpert();

                                            int i = BulkInsertIntoCategoryExpert(categoryexpert_list);

                                            MessageBox.MessageShow(this.GetType(), "CategoryExpert Import Successfully!.", ClientScript);

                                            //using (TransactionScope Scope = new TransactionScope())
                                            //{
                                            //    try
                                            //    {
                                            //        //categoryexpert_list.RemoveAt(0);
                                            //        foreach (var v in categoryexpert_list)
                                            //        {
                                            //            itemBusiness.Entity = v;
                                            //            itemBusiness.Save();
                                            //        }
                                            //        itemBusiness.ReplaceQATCategoryExpert(center);
                                            //        Scope.Complete();
                                            //        import_successList.Add("CategoryExpert Import Successfully!.\n");
                                            //        MessageBox.MessageShow(this.GetType(), "CategoryExpert Import Successfully!.", ClientScript);

                                            //    }
                                            //    catch (Exception ex)
                                            //    {
                                            //        Response.Redirect("error.aspx");
                                            //        throw ex;
                                            //    }

                                            //}

                                            #endregion
                                        }
                                    }
                                    else
                                    {
                                        MessageBox.MessageShow(this.GetType(), "This Excel File has already been Imported!", ClientScript);
                                    }

                                }
                                #endregion
                                #region "For SceneRecognition"
                                else if (sheet_name.ToString().Trim() == "Scene Recognition") // for Scene Recognition
                                {
                                    var scenerecognition = new SceneRecognition().FindByImportedDateAndCenter(GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim()),center);
                                    if (scenerecognition.Count() == 0)
                                    {

                                        var scenerecognition_list = new List<SceneRecognitionEntity>();

                                        ExcelWorksheet scenerecognition_workSheet = ex_package.Workbook.Worksheets[1];
                                        //scenerecognition_workSheet.DeleteRow(1);

                                        if (scenerecognition_workSheet.Dimension != null)
                                        {
                                            SceneRecognition_BindBusiness(scenerecognition_list, scenerecognition_workSheet, center);

                                            #region SceneRecognition

                                            SceneRecognition itemBusiness = new SceneRecognition();

                                            int i = BulkInsertIntoSceneRecognition(scenerecognition_list);
                                            MessageBox.MessageShow(this.GetType(), "SceneRecognition Import Successfully!.", ClientScript);

                                            //using (TransactionScope Scope = new TransactionScope())
                                            //{
                                            //    try
                                            //    {
                                            //        //scenerecognition_list.RemoveAt(0);
                                            //        foreach (var v in scenerecognition_list)
                                            //        {
                                            //            itemBusiness.Entity = v;
                                            //            itemBusiness.Save();
                                            //        }
                                            //        itemBusiness.ReplaceQATSceneRecognition(center);
                                            //        Scope.Complete();
                                            //        import_successList.Add("SceneRecognition Import Successfully!.\n");
                                            //        MessageBox.MessageShow(this.GetType(), "SceneRecognition Import Successfully!.", ClientScript);

                                            //    }
                                            //    catch (Exception ex)
                                            //    {
                                            //        Response.Redirect("error.aspx");
                                            //        throw ex;
                                            //    }

                                            //}

                                            #endregion
                                        }

                                    }
                                    else
                                    {
                                        MessageBox.MessageShow(this.GetType(), "This Excel File has already been Imported!", ClientScript);
                                    }


                                }
                                #endregion
                                #region "For SmartStitching"
                                else if (sheet_name.ToString().Trim() == "Smart Stitching") // for SmartStitching
                                {
                                //    var smartstitching = new Probes().FindByImportedDateAndCenter(GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim()),center);
                                //    if (smartstitching.Count() == 0)
                                //    {

                                //        var smartstitching_list = new List<SmartStitchingEntity>();

                                //        ExcelWorksheet smartstitching_workSheet = ex_package.Workbook.Worksheets[1];
                                //        //smartstitching_workSheet.DeleteRow(1);

                                //        if (smartstitching_workSheet.Dimension != null)
                                //        {
                                //            SmartStitching_BindBusiness(smartstitching_list, smartstitching_workSheet);

                                //            #region SmartStitching

                                //            SmartStitching itemBusiness = new SmartStitching();

                                //            using (TransactionScope Scope = new TransactionScope())
                                //            {
                                //                try
                                //                {
                                //                    foreach (var v in smartstitching_list)
                                //                    {
                                //                        itemBusiness.Entity = v;
                                //                        itemBusiness.Save();
                                //                    }
                                //                    itemBusiness.ReplaceQATSmartStitching();
                                //                    Scope.Complete();
                                //                    import_successList.Add("Smart Stitching Import Successfully!.\n");
                                //                    MessageBox.MessageShow(this.GetType(), "Smart Stitching Import Successfully!.", ClientScript);

                                //                }
                                //                catch (Exception ex)
                                //                {
                                //                    Response.Redirect("error.aspx");
                                //                    throw ex;
                                //                }

                                //            }

                                //            #endregion
                                //        }

                                //    }
                                //    else
                                //    {
                                //        MessageBox.MessageShow(this.GetType(), "This Excel File has already been Imported!", ClientScript);
                                //    }
                                    MessageBox.MessageShow(this.GetType(), "Not Provided Smart Stitching Sheet Import!", ClientScript);
                                }
                                #endregion
                                #region "For CategoryExpertVoting"
                                else if (sheet_name.ToString().Trim() == "Category Expert Voting") // for Category Expert Voting
                                {
                                    var categoryexpertvoting = new CategoryExpertVoting().FindByImportedDateAndCenter(GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim()),center);
                                    if (categoryexpertvoting.Count() == 0)
                                    {
                                        var categoryexpertvoting_list = new List<CategoryExpertVotingEntity>();

                                        ExcelWorksheet categoryexpertvoting_workSheet = ex_package.Workbook.Worksheets[1];
                                        //categoryexpertvoting_workSheet.DeleteRow(1);

                                        if (categoryexpertvoting_workSheet.Dimension != null)
                                        {
                                            CategoryExpertVoting_BindBusiness(categoryexpertvoting_list, categoryexpertvoting_workSheet, center);

                                            #region CategoryExpertVoting

                                            CategoryExpertVoting itemBusiness = new CategoryExpertVoting();

                                            int i = BulkInsertIntoCategoryExpertVoting(categoryexpertvoting_list);
                                            MessageBox.MessageShow(this.GetType(), "CategoryExpertVoting Import Successfully!.", ClientScript);

                                            //using (TransactionScope Scope = new TransactionScope())
                                            //{
                                            //    try
                                            //    {
                                            //       // categoryexpertvoting_list.RemoveAt(0);
                                            //        foreach (var v in categoryexpertvoting_list)
                                            //        {
                                            //            itemBusiness.Entity = v;
                                            //            itemBusiness.Save();
                                            //        }
                                            //        itemBusiness.ReplaceQATCategoryExpertVoting(center);
                                            //        Scope.Complete();
                                            //        import_successList.Add("CategoryExpertVoting Import Successfully!.\n");
                                            //        MessageBox.MessageShow(this.GetType(), "CategoryExpertVoting Import Successfully!.", ClientScript);

                                            //    }
                                            //    catch (Exception ex)
                                            //    {
                                            //        Response.Redirect("error.aspx");
                                            //        throw ex;
                                            //    }

                                            //}

                                            #endregion
                                        }

                                    }
                                    else
                                    {
                                        MessageBox.MessageShow(this.GetType(), "This Excel File has already been Imported!", ClientScript);
                                    }
                                }

                                #endregion


                                #region "For CategoryExpertHunt"
                                else if (sheet_name.ToString().Trim() == "Category Expert Hunt") // for Category Expert Hunt
                                {
                                    var categoryexperthunt = new CategoryExpertHunt().FindByImportedDateAndCenter(GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim()), center);
                                    if (categoryexperthunt.Count() == 0)
                                    {
                                        var categoryexperthunt_list = new List<CategoryExpertHuntEntity>();

                                        ExcelWorksheet categoryexperthunt_workSheet = ex_package.Workbook.Worksheets[1];
                                        //categoryexpertvoting_workSheet.DeleteRow(1);

                                        if (categoryexperthunt_workSheet.Dimension != null)
                                        {
                                            CategoryExpertHunt_BindBusiness(categoryexperthunt_list, categoryexperthunt_workSheet, center);

                                            #region CategoryExpertHunt

                                            CategoryExpertHunt itemBusiness = new CategoryExpertHunt();

                                            int i = BulkInsertIntoCategoryExpertHunt(categoryexperthunt_list);
                                            MessageBox.MessageShow(this.GetType(), "CategoryExpertHunt Import Successfully!.", ClientScript);

                                            //using (TransactionScope Scope = new TransactionScope())
                                            //{
                                            //    try
                                            //    {
                                            //       // categoryexpertvoting_list.RemoveAt(0);
                                            //        foreach (var v in categoryexpertvoting_list)
                                            //        {
                                            //            itemBusiness.Entity = v;
                                            //            itemBusiness.Save();
                                            //        }
                                            //        itemBusiness.ReplaceQATCategoryExpertVoting(center);
                                            //        Scope.Complete();
                                            //        import_successList.Add("CategoryExpertVoting Import Successfully!.\n");
                                            //        MessageBox.MessageShow(this.GetType(), "CategoryExpertVoting Import Successfully!.", ClientScript);

                                            //    }
                                            //    catch (Exception ex)
                                            //    {
                                            //        Response.Redirect("error.aspx");
                                            //        throw ex;
                                            //    }

                                            //}

                                            #endregion
                                        }

                                    }
                                    else
                                    {
                                        MessageBox.MessageShow(this.GetType(), "This Excel File has already been Imported!", ClientScript);
                                    }
                                }

                                #endregion

                            }
                            else
                            {
                                MessageBox.MessageShow(this.GetType(), "Not Provided Multiple Sheet Import!", ClientScript);
                            }

                            //string prdname = "";
                            //foreach (var item in import_successList)
                            //{
                            //    prdname = item + "\r\n" + prdname;
                            //}

                            //MessageBox.MessageShow(this.GetType(), "Import Successfully!", ClientScript);
                        }
                        #endregion

                    }
                }
            }
            else
            {
                MessageBox.MessageShow(this.GetType(), "Please Choose Import Date!.", ClientScript);
            }

            #region Save Probes (first)

            //Probes itemBusiness = new Probes();

            //using (TransactionScope Scope = new TransactionScope())
            //{
            //    try
            //    {
            //        foreach (var v in plist)
            //        {
            //            itemBusiness.Entity = v;
            //            itemBusiness.Save();
            //        }

            //        Scope.Complete();
            //        MessageBox.MessageShow(this.GetType(), "Probes Import Successfully!.", ClientScript);
            //    }
            //    catch (Exception ex)
            //    {
            //        Response.Redirect("error.aspx");
            //        throw ex;
            //    }

            //}

            #endregion

        }

        private void Probes_BindBusiness(List<ProbesEntity> probeslist, ExcelWorksheet ws,string center)
        {
            var userEntity = (UserEntity)Session["ID"];
            for (var rowNumber = 1; rowNumber <= ws.Dimension.End.Row; rowNumber++)
            #region for Loop Row
            {
                var probesEntity = new ProbesEntity();

                probesEntity.ID = GeneralUtility.GeneratedKey;

                #region Populate Excel data

                for (var colNumber = 1; colNumber <= ws.Dimension.End.Column; colNumber++)
                {    
                    
                    var columnName1 = ws.Cells[1, colNumber].Value.ToString().Trim();
                    var columnName2 = string.Empty;
                    string columnName3 = string.Empty;
                    if (columnName1 == "Probes")
                    {
                        columnName2 = ws.Cells[1, colNumber - 1].Value.ToString();
                        columnName3 = columnName2 + "-" + columnName1;
                    }
                    else
                    {
                        columnName3 = columnName1;
                    }
                    try
                    {
                        if (true && rowNumber > 1 )
                        {                    
                            //switch (colNumber)
                            if (Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != "" && Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != null)
                            {
                                globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            }
                            else
                            {
                                globalCenterName = "";
                            }
                             
                             if (globalCenterName == center)
                             {
                                 switch (columnName3)
                                 {
                                     #region
                                     //case 1:
                                     case "QAT":
                                         probesEntity.QAT = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 2:
                                     case "Center":
                                         probesEntity.Center = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 3:
                                     case "Total Probes":
                                         probesEntity.TotalProbes = Convert.ToInt32(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     case "Avg seconds per Probes":
                                         //case 4:
                                         probesEntity.AvgsecondsperProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 5:
                                     case "ABICA":
                                         probesEntity.ABICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 6:

                                     case "ABICA-Probes":
                                         probesEntity.ABICA_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 7:
                                     case "ABITAMSUS-PROD":
                                         probesEntity.ABITAMSUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 8:
                                     case "ABITAMSUS-PROD-Probes":
                                         probesEntity.ABITAMSUS_PROD_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 9:
                                     case "AMERICAS-DEMO":
                                         probesEntity.AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 10:
                                     case "AMERICAS-DEMO-Probes":
                                         probesEntity.AMERICAS_DEMO_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 11:
                                     case "BATRU":
                                         probesEntity.BATRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 12:
                                     case "BATRU-Probes":
                                         probesEntity.BATRU_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 13:
                                     case "BIKR":
                                         probesEntity.BIKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 14:
                                     case "BIKR-Probes":
                                         probesEntity.BIKR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 15:
                                     case "BIMY":
                                         probesEntity.BIMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 16:
                                     case "BIMY-Probes":
                                         probesEntity.BIMY_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 17:
                                     case "BIPH":
                                         probesEntity.BIPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 18:
                                     case "BIPH-Probes":
                                         probesEntity.BIPH_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 19:
                                     case "BISEASK":
                                         probesEntity.BISEASK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 20:
                                     case "BISEASK-Probes":
                                         probesEntity.BISEASK_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 21:
                                     case "BITH":
                                         probesEntity.BITH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 22:
                                     case "BITH-Probes":
                                         probesEntity.BITH_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 23:
                                     case "BIVN":
                                         probesEntity.BIVN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 24:
                                     case "BIVN-Probes":
                                         probesEntity.BIVN_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 25:
                                     case "BPAU":
                                         probesEntity.BPAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 26:
                                     case "BPAU-Probes":
                                         probesEntity.BPAU_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 27:
                                     case "BRODMANN":
                                         probesEntity.BRODMANN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 28:
                                     case "BRODMANN-Probes":
                                         probesEntity.BRODMANN_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 29:
                                     case "CARREFOURAR":
                                         probesEntity.CARREFOURAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 30:
                                     case "CARREFOURAR-Probes":
                                         probesEntity.CARREFOURAR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 31:
                                     case "CCAAU":
                                         probesEntity.CCAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 32:
                                     case "CCAAU-Probes":
                                         probesEntity.CCAAU_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 33:
                                     case "CCABIZA":
                                         probesEntity.CCABIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 34:
                                     case "CCABIZA-Probes":
                                         probesEntity.CCABIZA_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 35:
                                     case "CCANZ":
                                         probesEntity.CCANZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 36:
                                     case "CCANZ-Probes":
                                         probesEntity.CCANZ_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 37:
                                     case "CCBOTTLERSUS":
                                         probesEntity.CCBOTTLERSUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 38:
                                     case "CCBOTTLERSUS-Probes":
                                         probesEntity.CCBOTTLERSUS_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 39:
                                     case "CCBR-PROD":
                                         probesEntity.CCBR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 40:
                                     case "CCBR-PROD-Probes":
                                         probesEntity.CCBR_PROD_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 41:
                                     case "CCJP":
                                         probesEntity.CCJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 42:
                                     case "CCJP-Probes":
                                         probesEntity.CCJP_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 43:
                                     case "CCKH":
                                         probesEntity.CCKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 44:
                                     case "CCKH-Probes":
                                         probesEntity.CCKH_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 45:
                                     case "CCKR":
                                         probesEntity.CCKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 46:
                                     case "CCKR-Probes":
                                         probesEntity.CCKR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 47:
                                     case "CCMY":
                                         probesEntity.CCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 48:
                                     case "CCMY-Probes":
                                         probesEntity.CCMY_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 49:
                                     case "CCPH":
                                         probesEntity.CCPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 50:
                                     case "CCPH-Probes":
                                         probesEntity.CCPH_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 51:
                                     case "CCRPR-PROD":
                                         probesEntity.CCRPR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 52:
                                     case "CCRPR-PROD-Probes":
                                         probesEntity.CCRPR_PROD_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 53:
                                     case "CCRU":
                                         probesEntity.CCRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 54:
                                     case "CCRU-Probes":
                                         probesEntity.CCRU_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 55:
                                     case "CCTH":
                                         probesEntity.CCTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 56:
                                     case "CCTH-Probes":
                                         probesEntity.CCTH_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 57:
                                     case "CCTH-UAT":
                                         probesEntity.CCTH_UAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 58:
                                     case "CCTH-UAT-Probes":
                                         probesEntity.CCTH_UAT_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 59:
                                     case "CCTRADMX":
                                         probesEntity.CCTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 60:
                                     case "CCTRADMX-Probes":
                                         probesEntity.CCTRADMX_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 61:
                                     case "CCUS":
                                         probesEntity.CCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 62:
                                     case "CCUS-Probes":
                                         probesEntity.CCUS_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 63:
                                     case "CCZA":
                                         probesEntity.CCZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 64:
                                     case "CCZA-Probes":
                                         probesEntity.CCZA_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 65:
                                     case "CEREBOSTH":
                                         probesEntity.CEREBOSTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 66:
                                     case "CEREBOSTH-Probes":
                                         probesEntity.CEREBOSTH_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 67:
                                     case "CROWDSOURCE":
                                         probesEntity.CROWDSOURCE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 68:
                                     case "CROWDSOURCE-Probes":
                                         probesEntity.CROWDSOURCE_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 69:
                                     case "DIAGEOAU":
                                         probesEntity.DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 70:
                                     case "DIAGEOAU-Probes":
                                         probesEntity.DIAGEOAU_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 71:
                                     case "DIAGEOBR":
                                         probesEntity.DIAGEOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 72:
                                     case "DIAGEOBR-Probes":
                                         probesEntity.DIAGEOBR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 73:
                                     case "DIAGEOGR":
                                         probesEntity.DIAGEOGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 74:
                                     case "DIAGEOGR-Probes":
                                         probesEntity.DIAGEOGR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 75:
                                     case "DIAGEOIE":
                                         probesEntity.DIAGEOIE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 76:
                                     case "DIAGEOIE-Probes":
                                         probesEntity.DIAGEOIE_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 77:
                                     case "DIAGEOKE":
                                         probesEntity.DIAGEOKE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 78:
                                     case "DIAGEOKE-Probes":
                                         probesEntity.DIAGEOKE_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 79:
                                     case "DIAGEOMX":
                                         probesEntity.DIAGEOMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 80:
                                     case "DIAGEOMX-Probes":
                                         probesEntity.DIAGEOMX_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 81:
                                     case "DIAGEOPT":
                                         probesEntity.DIAGEOPT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 82:
                                     case "DIAGEOPT-Probes":
                                         probesEntity.DIAGEOPT_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 83:
                                     case "DIAGEOTW":
                                         probesEntity.DIAGEOTW = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 84:
                                     case "DIAGEOTW-Probes":
                                         probesEntity.DIAGEOTW_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 85:
                                     case "DIAGEOUK":
                                         probesEntity.DIAGEOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 86:
                                     case "DIAGEOUK-Probes":
                                         probesEntity.DIAGEOUK_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 87:
                                     case "DIAGEOZA":
                                         probesEntity.DIAGEOZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 88:
                                     case "DIAGEOZA-Probes":
                                         probesEntity.DIAGEOZA_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 89:
                                     case "EMEA-DEMO":
                                         probesEntity.EMEA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 90:
                                     case "EMEA-DEMO-Probes":
                                         probesEntity.EMEA_DEMO_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 91:
                                     case "FERREROIT":
                                         probesEntity.FERREROIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 92:
                                     case "FERREROIT-Probes":
                                         probesEntity.FERREROIT_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 93:
                                     case "GILLETTEUS":
                                         probesEntity.GILLETTEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 94:
                                     case "GILLETTEUS-Probes":
                                         probesEntity.GILLETTEUS_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 95:
                                     case "GOOGLEUS":
                                         probesEntity.GOOGLEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 96:
                                     case "GOOGLEUS-Probes":
                                         probesEntity.GOOGLEUS_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 97:
                                     case "HBCDE":
                                         probesEntity.HBCDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 98:
                                     case "HBCDE-Probes":
                                         probesEntity.HBCDE_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 99:
                                     case "HEINEKENCN":
                                         probesEntity.HEINEKENCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 100:
                                     case "HEINEKENCN-Probes":
                                         probesEntity.HEINEKENCN_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 101:
                                     case "HEINEKENUS-PROD":
                                         probesEntity.HEINEKENUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 102:
                                     case "HEINEKENUS-PROD-Probes":
                                         probesEntity.HEINEKENUS_PROD_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 103:
                                     case "HEINZCR":
                                         probesEntity.HEINZCR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 104:
                                     case "HEINZCR-Probes":
                                         probesEntity.HEINZCR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 105:
                                     case "INBEVAR":
                                         probesEntity.INBEVAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 106:
                                     case "INBEVAR-Probes":
                                         probesEntity.INBEVAR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 107:
                                     case "INBEVBE":
                                         probesEntity.INBEVBE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 108:
                                     case "INBEVBE-Probes":
                                         probesEntity.INBEVBE_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 109:
                                     //case "INBEVBE-SAND":
                                     //    probesEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     ////case 110:
                                     //case "INBEVBE-SAND-Probes":
                                     //    probesEntity.INBEVBE_SAND_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 111:
                                     case "INBEVBR":
                                         probesEntity.INBEVBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 112:
                                     case "INBEVBR-Probes":
                                         probesEntity.INBEVBR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 113:
                                     case "INBEVBR_ONTRADE":
                                         probesEntity.INBEVBR_ONTRADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 114:
                                     case "INBEVBR_ONTRADE-Probes":
                                         probesEntity.INBEVBR_ONTRADE_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 115:
                                     case "INBEVCL":
                                         probesEntity.INBEVCL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 116:
                                     case "INBEVCL-Probes":
                                         probesEntity.INBEVCL_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 117:
                                     case "INBEVCN":
                                         probesEntity.INBEVCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 118:
                                     case "INBEVCN-Probes":
                                         probesEntity.INBEVCN_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 119:
                                     case "INBEVCOOLERAR":
                                         probesEntity.INBEVCOOLERAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 120:
                                     case "INBEVCOOLERAR-Probes":
                                         probesEntity.INBEVCOOLERAR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 121:
                                     case "INBEVCOOLERBR":
                                         probesEntity.INBEVCOOLERBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 122:
                                     case "INBEVCOOLERBR-Probes":
                                         probesEntity.INBEVCOOLERBR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 123:
                                     case "INBEVCOOLERUS":
                                         probesEntity.INBEVCOOLERUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 124:
                                     case "INBEVCOOLERUS-Probes":
                                         probesEntity.INBEVCOOLERUS_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 125:
                                     case "INBEVFR":
                                         probesEntity.INBEVFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 126:
                                     case "INBEVFR-Probes":
                                         probesEntity.INBEVFR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 127:
                                     case "INBEVLU":
                                         probesEntity.INBEVLU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 128:
                                     case "INBEVLU-Probes":
                                         probesEntity.INBEVLU_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 129:
                                     case "INBEVLU-SAND":
                                         probesEntity.INBEVLU_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 130:
                                     case "INBEVLU-SAND-Probes":
                                         probesEntity.INBEVLU_SAND_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 131:
                                     case "INBEVMX":
                                         probesEntity.INBEVMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 132:
                                     case "INBEVMX-Probes":
                                         probesEntity.INBEVMX_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 133:
                                     case "INBEVNL":
                                         probesEntity.INBEVNL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 134:
                                     case "INBEVNL-Probes":
                                         probesEntity.INBEVNL_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 135:
                                     case "INBEVNL-SAND":
                                         probesEntity.INBEVNL_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 136:
                                     case "INBEVNL-SAND-Probes":
                                         probesEntity.INBEVNL_SAND_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 137:
                                     case "INBEVPY":
                                         probesEntity.INBEVPY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 138:
                                     case "INBEVPY-Probes":
                                         probesEntity.INBEVPY_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 139:
                                     case "INBEVTRADMX":
                                         probesEntity.INBEVTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 140:
                                     case "INBEVTRADMX-Probes":
                                         probesEntity.INBEVTRADMX_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 141:
                                     case "INBEVUS":
                                         probesEntity.INBEVUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 142:
                                     case "INBEVUS-Probes":
                                         probesEntity.INBEVUS_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 143:
                                     case "JTIUA":
                                         probesEntity.JTIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 144:
                                     case "JTIUA-Probes":
                                         probesEntity.JTIUA_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 145:
                                     case "KCMY":
                                         probesEntity.KCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 146:
                                     case "KCMY-Probes":
                                         probesEntity.KCMY_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 147:
                                     case "KCUS":
                                         probesEntity.KCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 148:
                                     case "KCUS-Probes":
                                         probesEntity.KCUS_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 149:
                                     case "KEURIGCA":
                                         probesEntity.KEURIGCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 150:
                                     case "KEURIGCA-Probes":
                                         probesEntity.KEURIGCA_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////// just only finished 150 //////////////
                                     //case 151:
                                     case "LABATTPLNOPTCA":
                                         probesEntity.LABATTPLNOPTCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 152:
                                     case "LABATTPLNOPTCA-Probes":
                                         probesEntity.LABATTPLNOPTCA_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 153:
                                     case "LAVAZZAAT":
                                         probesEntity.LAVAZZAAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 154:
                                     case "LAVAZZAAT-Probes":
                                         probesEntity.LAVAZZAAT_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 155:
                                     case "LAVAZZAAU":
                                         probesEntity.LAVAZZAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 156:
                                     case "LAVAZZAAU-Probes":
                                         probesEntity.LAVAZZAAU_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 157:
                                     case "LAVAZZABE":
                                         probesEntity.LAVAZZABE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 158:
                                     case "LAVAZZABE-Probes":
                                         probesEntity.LAVAZZABE_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 159:
                                     case "LAVAZZABG":
                                         probesEntity.LAVAZZABG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 160:
                                     case "LAVAZZABG-Probes":
                                         probesEntity.LAVAZZABG_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 161:
                                     case "LAVAZZACA":
                                         probesEntity.LAVAZZACA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 162:
                                     case "LAVAZZACA-Probes":
                                         probesEntity.LAVAZZACA_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 163:
                                     case "LAVAZZACH":
                                         probesEntity.LAVAZZACH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 164:
                                     case "LAVAZZACH-Probes":
                                         probesEntity.LAVAZZACH_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 165:
                                     case "LAVAZZACL":
                                         probesEntity.LAVAZZACL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 166:
                                     case "LAVAZZACL-Probes":
                                         probesEntity.LAVAZZACL_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 167:
                                     case "LAVAZZACN":
                                         probesEntity.LAVAZZACN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 168:
                                     case "LAVAZZACN-Probes":
                                         probesEntity.LAVAZZACN_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 169:
                                     case "LAVAZZACZ":
                                         probesEntity.LAVAZZACZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 170:
                                     case "LAVAZZACZ-Probes":
                                         probesEntity.LAVAZZACZ_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 171:
                                     case "LAVAZZADE":
                                         probesEntity.LAVAZZADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 172:
                                     case "LAVAZZADE-Probes":
                                         probesEntity.LAVAZZADE_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 173:
                                     case "LAVAZZADK":
                                         probesEntity.LAVAZZADK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 174:
                                     case "LAVAZZADK-Probes":
                                         probesEntity.LAVAZZADK_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 175:
                                     case "LAVAZZAEE":
                                         probesEntity.LAVAZZAEE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 176:
                                     case "LAVAZZAEE-Probes":
                                         probesEntity.LAVAZZAEE_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 177:
                                     case "LAVAZZAES":
                                         probesEntity.LAVAZZAES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 178:
                                     case "LAVAZZAES-Probes":
                                         probesEntity.LAVAZZAES_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 179:
                                     case "LAVAZZAFR":
                                         probesEntity.LAVAZZAFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 180:
                                     case "LAVAZZAFR-Probes":
                                         probesEntity.LAVAZZAFR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 181:
                                     case "LAVAZZAGR":
                                         probesEntity.LAVAZZAGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 182:
                                     case "LAVAZZAGR-Probes":
                                         probesEntity.LAVAZZAGR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 183:
                                     case "LAVAZZAHK":
                                         probesEntity.LAVAZZAHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 184:
                                     case "LAVAZZAHK-Probes":
                                         probesEntity.LAVAZZAHK_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 185:
                                     case "LAVAZZAHR":
                                         probesEntity.LAVAZZAHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 186:
                                     case "LAVAZZAHR-Probes":
                                         probesEntity.LAVAZZAHR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 187:
                                     case "LAVAZZAIL":
                                         probesEntity.LAVAZZAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 188:
                                     case "LAVAZZAIL-Probes":
                                         probesEntity.LAVAZZAIL_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 189:
                                     case "LAVAZZAIT":
                                         probesEntity.LAVAZZAIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 190:
                                     case "LAVAZZAIT-Probes":
                                         probesEntity.LAVAZZAIT_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 191:
                                     case "LAVAZZAJP":
                                         probesEntity.LAVAZZAJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 192:
                                     case "LAVAZZAJP-Probes":
                                         probesEntity.LAVAZZAJP_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 193:
                                     case "LAVAZZAKR":
                                         probesEntity.LAVAZZAKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 194:
                                     case "LAVAZZAKR-Probes":
                                         probesEntity.LAVAZZAKR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 195:
                                     case "LAVAZZALT":
                                         probesEntity.LAVAZZALT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 196:
                                     case "LAVAZZALT-Probes":
                                         probesEntity.LAVAZZALT_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 197:
                                     case "LAVAZZALU":
                                         probesEntity.LAVAZZALU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 198:
                                     case "LAVAZZALU-Probes":
                                         probesEntity.LAVAZZALU_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 199:
                                     case "LAVAZZALV":
                                         probesEntity.LAVAZZALV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 200:
                                     case "LAVAZZALV-Probes":
                                         probesEntity.LAVAZZALV_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 201:
                                     case "LAVAZZAMA":
                                         probesEntity.LAVAZZAMA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 202:
                                     case "LAVAZZAMA-Probes":
                                         probesEntity.LAVAZZAMA_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 203:
                                     case "LAVAZZANL":
                                         probesEntity.LAVAZZANL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 204:
                                     case "LAVAZZANL-Probes":
                                         probesEntity.LAVAZZANL_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 205:
                                     case "LAVAZZAPL":
                                         probesEntity.LAVAZZAPL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 206:
                                     case "LAVAZZAPL-Probes":
                                         probesEntity.LAVAZZAPL_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 207:
                                     case "LAVAZZARO":
                                         probesEntity.LAVAZZARO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 208:
                                     case "LAVAZZARO-Probes":
                                         probesEntity.LAVAZZARO_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 209:
                                     case "LAVAZZARU":
                                         probesEntity.LAVAZZARU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 210:
                                     case "LAVAZZARU-Probes":
                                         probesEntity.LAVAZZARU_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 211:
                                     case "LAVAZZASA":
                                         probesEntity.LAVAZZASA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 212:
                                     case "LAVAZZASA-Probes":
                                         probesEntity.LAVAZZASA_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 213:
                                     case "LAVAZZASE":
                                         probesEntity.LAVAZZASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 214:
                                     case "LAVAZZASE-Probes":
                                         probesEntity.LAVAZZASE_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 215:
                                     case "LAVAZZASG":
                                         probesEntity.LAVAZZASG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 216:
                                     case "LAVAZZASG-Probes":
                                         probesEntity.LAVAZZASG_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 217:
                                     case "LAVAZZAUAE":
                                         probesEntity.LAVAZZAUAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 218:
                                     case "LAVAZZAUAE-Probes":
                                         probesEntity.LAVAZZAUAE_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 219:
                                     case "LAVAZZAUK":
                                         probesEntity.LAVAZZAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 220:
                                     case "LAVAZZAUK-Probes":
                                         probesEntity.LAVAZZAUK_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 221:
                                     case "LAVAZZAUS":
                                         probesEntity.LAVAZZAUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 222:
                                     case "LAVAZZAUS-Probes":
                                         probesEntity.LAVAZZAUS_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 223:

                                     case "LAVAZZAZA":
                                         probesEntity.LAVAZZAZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     case "LAVAZZAZA-Probes":
                                         probesEntity.LAVAZZAZA_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 225:
                                     case "LRSUK":
                                         probesEntity.LRSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 226:
                                     case "LRSUK-Probes":
                                         probesEntity.LRSUK_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 227:
                                     case "MARSBR":
                                         probesEntity.MARSBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 228:
                                     case "MARSBR-Probes":
                                         probesEntity.MARSBR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 229:
                                     case "MARSIN":
                                         probesEntity.MARSIN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 230:
                                     case "MARSIN-Probes":
                                         probesEntity.MARSIN_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 231:
                                     case "MARSIN-OLD":
                                         probesEntity.MARSIN_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 232:
                                     case "MARSIN-OLD-Probes":
                                         probesEntity.MARSIN_OLD_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 233:
                                     case "MARSRU-PROD":
                                         probesEntity.MARSRU_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 234:
                                     case "MARSRU-PROD-Probes":
                                         probesEntity.MARSRU_PROD_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 235:
                                     case "MAYORAID":
                                         probesEntity.MAYORAID = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 236:
                                     case "MAYORAID-Probes":
                                         probesEntity.MAYORAID_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 237:
                                     case "MJNCN":
                                         probesEntity.MJNCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 238:
                                     case "MJNCN-Probes":
                                         probesEntity.MJNCN_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 239:
                                     case "MOLSONCOOLERHN":
                                         probesEntity.MOLSONCOOLERHN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 240:
                                     case "MOLSONCOOLERHN-Probes":
                                         probesEntity.MOLSONCOOLERHN_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 241:
                                     case "MOLSONCOOLERHR":
                                         probesEntity.MOLSONCOOLERHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 242:
                                     case "MOLSONCOOLERHR-Probes":
                                         probesEntity.MOLSONCOOLERHR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 243:
                                     case "MOLSONCOORSUK":
                                         probesEntity.MOLSONCOORSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 244:
                                     case "MOLSONCOORSUK-Probes":
                                         probesEntity.MOLSONCOORSUK_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 245:
                                     case "NESTLEUK":
                                         probesEntity.NESTLEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 246:
                                     case "NESTLEUK-Probes":
                                         probesEntity.NESTLEUK_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 247:
                                     case "NIVEAUK":
                                         probesEntity.NIVEAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 248:
                                     case "NIVEAUK-Probes":
                                         probesEntity.NIVEAUK_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 249:
                                     case "NRF2017-DEMO":
                                         probesEntity.NRF2017_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 250:
                                     case "NRF2017-DEMO-Probes":
                                         probesEntity.NRF2017_DEMO_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 251:
                                     case "ONE-AMERICAS-DEMO":
                                         probesEntity.ONE_AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 252:                                  
                                     case "ONE-AMERICAS-DEMO-Probes":
                                         probesEntity.ONE_AMERICAS_DEMO_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 253:
                                     case "ONE-APAC-DEMO":
                                         probesEntity.ONE_APAC_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 254:
                                     case "ONE-APAC-DEMO-Probes":
                                         probesEntity.ONE_APAC_DEMO_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 255:
                                     case "PEPSICOBR":
                                         probesEntity.PEPSICOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 256:
                                     case "PEPSICOBR-Probes":
                                         probesEntity.PEPSICOBR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 257:
                                     case "PNGAU":
                                         probesEntity.PNGAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 258:
                                     case "PNGAU-Probes":
                                         probesEntity.PNGAU_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 259:
                                     case "PNGAU-OLD":
                                         probesEntity.PNGAU_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 260:
                                     case "PNGAU-OLD-Probes":
                                         probesEntity.PNGAU_OLD_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 261:
                                     case "PNGCAREUS":
                                         probesEntity.PNGCAREUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 262:
                                     case "PNGCAREUS-Probes":
                                         probesEntity.PNGCAREUS_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 263:
                                     case "PNGCN-PROD":
                                         probesEntity.PNGCN_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 264:
                                     case "PNGCN-PROD-Probes":
                                         probesEntity.PNGCN_PROD_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 265:
                                     case "PNGJP":
                                         probesEntity.PNGJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 266:
                                     case "PNGJP-Probes":
                                         probesEntity.PNGJP_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 267:
                                     case "PNGJP-OLD":
                                         probesEntity.PNGJP_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 268:
                                     case "PNGJP-OLD-Probes":
                                         probesEntity.PNGJP_OLD_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 269:
                                     case "PNGUS":
                                         probesEntity.PNGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 270:
                                     case "PNGUS-Probes":
                                         probesEntity.PNGUS_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 271:
                                     case "PNGUSEPISODIC":
                                         probesEntity.PNGUSEPISODIC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 272:
                                     case "PNGUSEPISODIC-Probes":
                                         probesEntity.PNGUSEPISODIC_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 273:
                                     case "RBUS":
                                         probesEntity.RBUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 274:
                                     case "RBUS-Probes":
                                         probesEntity.RBUS_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 275:
                                     case "RE-XSUITE-DEMO":
                                         probesEntity.RE_XSUITE_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 276:
                                     case "RE-XSUITE-DEMO-Probes":
                                         probesEntity.RE_XSUITE_DEMO_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 277:
                                     case "REPNGCN-DEMO":
                                         probesEntity.REPNGCN_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 278:
                                     case "REPNGCN-DEMO-Probes":
                                         probesEntity.REPNGCN_DEMO_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 279:
                                     case "RI-DEMO":
                                         probesEntity.RI_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 280:
                                     case "RI-DEMO-Probes":
                                         probesEntity.RI_DEMO_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 281:
                                     case "RI-DIAGEOAU":
                                         probesEntity.RI_DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 282:
                                     case "RI-DIAGEOAU-Probes":
                                         probesEntity.RI_DIAGEOAU_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 283:
                                     case "RIALCBEVUK-PROD":
                                         probesEntity.RIALCBEVUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 284:
                                     case "RIALCBEVUK-PROD-Probes":
                                         probesEntity.RIALCBEVUK_PROD_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 285:
                                     case "RICOFFEEUS":
                                         probesEntity.RICOFFEEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 286:
                                     case "RICOFFEEUS-Probes":
                                         probesEntity.RICOFFEEUS_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 287:
                                     case "RINIELSENUS":
                                         probesEntity.RINIELSENUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 288:
                                     case "RINIELSENUS-Probes":
                                         probesEntity.RINIELSENUS_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 289:
                                     case "RIPETCAREUK-PROD":
                                         probesEntity.RIPETCAREUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 290:
                                     case "RIPETCAREUK-PROD-Probes":
                                         probesEntity.RIPETCAREUK_PROD_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 291:
                                     case "RIUS":
                                         probesEntity.RIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 292:
                                     case "RIUS-Probes":
                                         probesEntity.RIUS_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 293:
                                     case "RIUS-DEV":
                                         probesEntity.RIUS_DEV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 294:
                                     case "RIUS-DEV-Probes":
                                         probesEntity.RIUS_DEV_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 295:
                                     case "RNBDE":
                                         probesEntity.RNBDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 296:
                                     case "RNBDE-Probes":
                                         probesEntity.RNBDE_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 297:
                                     case "SMARTCOOLER-POC2":
                                         probesEntity.SMARTCOOLER_POC2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 298:
                                     case "SMARTCOOLER-POC2-Probes":
                                         probesEntity.SMARTCOOLER_POC2_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 299:
                                     case "SMARTCOOLER-TRN":
                                         probesEntity.SMARTCOOLER_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 300:
                                     case "SMARTCOOLER-TRN-Probes":
                                         probesEntity.SMARTCOOLER_TRN_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 301:
                                     case "SMARTCOOLER2-TRN":
                                         probesEntity.SMARTCOOLER2_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 302:
                                     case "SMARTCOOLER2-TRN-Probes":
                                         probesEntity.SMARTCOOLER2_TRN_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 303:
                                     case "SOLARBR":
                                         probesEntity.SOLARBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 304:
                                     case "SOLARBR-Probes":
                                         probesEntity.SOLARBR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 305:
                                     case "STATIC-CAMERA-DEMO":
                                         probesEntity.STATIC_CAMERA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 306:
                                     case "STATIC-CAMERA-DEMO-Probes":
                                         probesEntity.STATIC_CAMERA_DEMO_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 307:
                                     case "SWIRECN":
                                         probesEntity.SWIRECN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 308:
                                     case "SWIRECN-Probes":
                                         probesEntity.SWIRECN_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 309:
                                     case "SWIREREDCN":
                                         probesEntity.SWIREREDCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 310:
                                     case "SWIREREDCN-Probes":
                                         probesEntity.SWIREREDCN_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 311:
                                     case "TNUVAIL":
                                         probesEntity.TNUVAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 312:
                                     case "TNUVAIL-Probes":
                                         probesEntity.TNUVAIL_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 313:
                                     case "TRAXDEMO-TS-PROD":
                                         probesEntity.TRAXDEMO_TS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 314:
                                     case "TRAXDEMO-TS-PROD-Probes":
                                         probesEntity.TRAXDEMO_TS_PROD_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 315:
                                     case "TWEAU":
                                         probesEntity.TWEAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 316:
                                     case "TWEAU-Probes":
                                         probesEntity.TWEAU_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 317:
                                     case "RI-DEMO2":
                                         probesEntity.RI_DEMO2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 318:
                                     case "RI-DEMO2-Probes":
                                         probesEntity.RI_DEMO2_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 319:
                                     case "COMPASSCCH-SAND":
                                         probesEntity.COMPASSCCH_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 320:
                                     case "COMPASSCCH-SAND-Probes":
                                         probesEntity.COMPASSCCH_SAND_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 321:
                                     case "LAVAZZAIT-SAND":
                                         probesEntity.LAVAZZAIT_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 322:
                                     case "LAVAZZAIT-SAND-Probes":
                                         probesEntity.LAVAZZAIT_SAND_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 323:
                                     case "INBEVUS-STG":
                                         probesEntity.INBEVUS_STG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 324:
                                     case "INBEVUS-STG-Probes":
                                         probesEntity.INBEVUS_STG_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 325:
                                     case "LAVAZZAFR-SAND":
                                         probesEntity.LAVAZZAFR_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 326:
                                     case "LAVAZZAFR-SAND-Probes":
                                         probesEntity.LAVAZZAFR_SAND_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 327:
                                     case "INBEVBE-SAND":
                                         probesEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 328:
                                     case "INBEVBE-SAND-Probes":
                                         probesEntity.INBEVBE_SAND_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 329:
                                     //case "INBEVLU-SAND":
                                     //    probesEntity.INBEVLU_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 330:
                                     //case "330":
                                     //    probesEntity.INBEVLU_SAND_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 331:
                                     //case "INBEVNL-SAND":
                                     //    probesEntity.INBEVNL_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     ////case 332:
                                     //case "332":
                                     //    probesEntity.INBEVNL_SAND_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;

                                     //NEW Columns Addition
                                     //case 333:
                                     case "B2BRU":
                                         probesEntity.B2BRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 334:
                                     case "BRMUS":
                                         probesEntity.BRMUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 335:
                                     case "CBCIL":
                                         probesEntity.CBCIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 336:
                                     case "CCCOOLERMX":
                                         probesEntity.CCCOOLERMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 337:
                                     case "DIAGEOAR":
                                         probesEntity.DIAGEOAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 338:
                                     case "DIAGEOBENELUX":
                                         probesEntity.DIAGEOBENELUX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 339:
                                     case "DIAGEOCH":
                                         probesEntity.DIAGEOCH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 340:
                                     case "DIAGEOGA":
                                         probesEntity.DIAGEOGA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 341:
                                     case "DIAGEOGTR":
                                         probesEntity.DIAGEOGTR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 342:
                                     case "DIAGEONORDICS":
                                         probesEntity.DIAGEONORDICS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 343:
                                     case "DIAGEOUS":
                                         probesEntity.DIAGEOUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 344:
                                     case "FERREROEXTIT":
                                         probesEntity.FERREROEXTIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 345:
                                     case "GOOGLEHK":
                                         probesEntity.GOOGLEHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 346:
                                     case "HEINEKENPILOTCN":
                                         probesEntity.HEINEKENPILOTCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 347:
                                     case "IMBO":
                                         probesEntity.IMBO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 348:
                                     case "INBEVCI":
                                         probesEntity.INBEVCI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 349:
                                     case "INBEVCNTT":
                                         probesEntity.INBEVCNTT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 350:
                                     case "INBEVCO":
                                         probesEntity.INBEVCO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 351:
                                     case "INBEVZA":
                                         probesEntity.INBEVZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 352:
                                     case "INORU":
                                         probesEntity.INORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 353:
                                     case "JJSP":
                                         probesEntity.JJSP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 354:
                                     case "JNJES":
                                         probesEntity.JNJES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 355:
                                     case "JNJUK":
                                         probesEntity.JNJUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 356:
                                     case "JRIJP":
                                         probesEntity.JRIJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 357:
                                     case "KELLOGSUSPOC":
                                         probesEntity.KELLOGSUSPOC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 358:
                                     case "KRAFTUS":
                                         probesEntity.KRAFTUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 359:
                                     case "MARS-CHOCO-RU":
                                         probesEntity.MARS_CHOCO_RU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 360:
                                     case "MHUK":
                                         probesEntity.MHUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 361:
                                     case "MILLERCOORS":
                                         probesEntity.MILLERCOORS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 362:
                                     case "MOLSONONTRADEUK":
                                         probesEntity.MOLSONONTRADEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 363:
                                     case "MYCHEMISTAU":
                                         probesEntity.MYCHEMISTAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 364:
                                     case "NESTLEROAMLERUK":
                                         probesEntity.NESTLEROAMLERUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 365:
                                     case "NRF2018":
                                         probesEntity.NRF2018 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 366:
                                     case "PENAFLORAR":
                                         probesEntity.PENAFLORAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 367:
                                     case "PMIUA":
                                         probesEntity.PMIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 368:
                                     case "PNGAMERICA":
                                         probesEntity.PNGAMERICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 369:
                                     case "PNGRO":
                                         probesEntity.PNGRO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 370:
                                     case "RBAU":
                                         probesEntity.RBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 371:
                                     case "RBCA":
                                         probesEntity.RBCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 372:
                                     case "RBDK":
                                         probesEntity.RBDK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 373:
                                     case "RBMANUAL":
                                         probesEntity.RBMANUAL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 374:
                                     case "RINIELSENRU-MARS":
                                         probesEntity.RINIELSENRU_MARS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 375:
                                     case "RINIELSENUSQI":
                                         probesEntity.RINIELSENUSQI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 376:
                                     case "RIPANELCN":
                                         probesEntity.RIPANELCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 377:
                                     case "RISPARKWINEDE":
                                         probesEntity.RISPARKWINEDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 378:
                                     case "SANOFIAE":
                                         probesEntity.SANOFIAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 379:
                                     case "SANOFIAU":
                                         probesEntity.SANOFIAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 380:
                                     case "SANOFIHK":
                                         probesEntity.SANOFIHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 381:
                                     case "SANOFIKH":
                                         probesEntity.SANOFIKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 382:
                                     case "SANOFINZ":
                                         probesEntity.SANOFINZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 383:
                                     case "SANOFIRU":
                                         probesEntity.SANOFIRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 384:
                                     case "SANOFITR":
                                         probesEntity.SANOFITR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 385:
                                     case "SANOFIUA":
                                         probesEntity.SANOFIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 386:
                                     case "SHUFERSALIL":
                                         probesEntity.SHUFERSALIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 387:
                                     case "SUNTORYJP":
                                         probesEntity.SUNTORYJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 388:
                                     case "TESCOTH":
                                         probesEntity.TESCOTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 389:
                                     case "TESCOUK":
                                         probesEntity.TESCOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 390:
                                     case "TRAXROBOT":
                                         probesEntity.TRAXROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 391:
                                     case "XSUITE-SHOWCASE":
                                         probesEntity.XSUITE_SHOWCASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 392:
                                     case "ABIUS":
                                         probesEntity.ABIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 393:
                                     case "BADGERROBOT":
                                         probesEntity.BADGERROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 394:
                                     case "CUBAU":
                                         probesEntity.CUBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 395:
                                     case "DIAGEORU":
                                         probesEntity.DIAGEORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 396:
                                     case "GFKFR":
                                         probesEntity.GFKFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 397:
                                     case "JNJIT":
                                         probesEntity.JNJIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 398:
                                     case "LIGHTTRAX":
                                         probesEntity.LIGHTTRAX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 399:
                                     case "LIGHTTRAXOFFLINE":
                                         probesEntity.LIGHTTRAXOFFLINE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 400:
                                     case "RINIELSENFR":
                                         probesEntity.RINIELSENFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 401:
                                     case "SANOFIKZ":
                                         probesEntity.SANOFIKZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 402:
                                     case "SANOFILB":
                                         probesEntity.SANOFILB = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 403:
                                     case "SANOFISA":
                                         probesEntity.SANOFISA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 404:
                                     case "SANOFIZA":
                                         probesEntity.SANOFIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 405:
                                     case "WATSONSHK":
                                         probesEntity.WATSONSHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 406:
                                     case "KELLOGGUS":
                                         probesEntity.KELLOGGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 407:
                                     case "TSINGTAOBEERCN":
                                         probesEntity.TSINGTAOBEERCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     #region "No need region"
                                     //case 333:
                                     //    probesEntity.SOLARBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 334:
                                     //    probesEntity.SOLARBR_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 335:
                                     //    probesEntity.STATIC_CAMERA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 336:
                                     //    probesEntity.STATIC_CAMERA_DEMO_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 337:
                                     //    probesEntity.SWIRECN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 338:
                                     //    probesEntity.SWIRECN_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 339:
                                     //    probesEntity.SWIREREDCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 340:
                                     //    probesEntity.SWIREREDCN_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 341:
                                     //    probesEntity.TNUVAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 342:
                                     //    probesEntity.TNUVAIL_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 343:
                                     //    probesEntity.TRAXDEMO_TS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 344:
                                     //    probesEntity.TRAXDEMO_TS_PROD_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 345:
                                     //    probesEntity.RI_DEMO2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 346:
                                     //    probesEntity.RI_DEMO2_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 347:
                                     //    probesEntity.COMPASSCCH_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 348:
                                     //    probesEntity.COMPASSCCH_SAND_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 349:
                                     //    probesEntity.LAVAZZAIT_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 350:
                                     //    probesEntity.LAVAZZAIT_SAND_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 351:
                                     //    probesEntity.INBEVUS_STG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 352:
                                     //    probesEntity.INBEVUS_STG_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 353:
                                     //    probesEntity.LAVAZZAFR_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 354:
                                     //    probesEntity.LAVAZZAFR_SAND_Probes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     #endregion

                                     default: break;


                                     #endregion
                                 }
                             }
                            
                        }

                    }
                    catch (Exception ex)
                    {
                        Response.Redirect("error.aspx");
                        throw ex;
                    }
                }


                if (globalCenterName == center && rowNumber > 1)
                {
                    probesEntity.ImportedDate = GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim());//GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);             
                    probesEntity.ImportedYear = probesEntity.ImportedDate.Substring(0, 6);
                    //probesEntity.ImportTime = GeneralUtility.ConvertSystemTimeFormat(System.DateTime.Now);
                    probesEntity.CreatedDate = GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    probesEntity.CreatedBy = userEntity.ID;


                    probeslist.Add(probesEntity);
                }
                

                #endregion
            }
            #endregion 
        }

        private void PricingProbes_BindBusiness(List<PricingProbesEntity> pricingprobeslist, ExcelWorksheet ws, string center)
        {
            var userEntity = (UserEntity)Session["ID"];

            for (var rowNumber = 1; rowNumber <= ws.Dimension.End.Row; rowNumber++)
            {
                var pricingprobesEntity = new PricingProbesEntity();

                pricingprobesEntity.ID = GeneralUtility.GeneratedKey;

                #region Populate Excel data

                for (var colNumber = 1; colNumber <= ws.Dimension.End.Column; colNumber++)
                {
                    var columnName1 = ws.Cells[1, colNumber].Value.ToString().Trim();
                    var columnName2 = string.Empty;
                    string columnName3 = string.Empty;
                    if (columnName1 == "Pricing Probes")
                    {
                        columnName2 = ws.Cells[1, colNumber - 1].Value.ToString();
                        columnName3 = columnName2 + "-" + columnName1;
                    }
                    else
                    {
                        columnName3 = columnName1;
                    }

                    try
                    {
                        if (true && rowNumber > 1)
                        {
                             //globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            if (Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != "" && Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != null)
                            {
                                globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            }
                            else
                            {
                                globalCenterName = "";
                            }
                             if (globalCenterName == center)
                             {
                                 switch (columnName3)
                                 {
                                     #region
                                     //case 1:
                                     case "QAT":
                                         pricingprobesEntity.QAT = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 2:
                                     case "Center":
                                         pricingprobesEntity.Center = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 3:
                                     case "Total Pricing Probes":
                                         pricingprobesEntity.TotalPricingProbes = Convert.ToInt32(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     case "Avg seconds per Pricing Probes":
                                         //case 4:
                                         pricingprobesEntity.AvgsecondsperPricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 5:
                                     case "ABICA":
                                         pricingprobesEntity.ABICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 6:

                                     case "ABICA-Pricing Probes":
                                         pricingprobesEntity.ABICA_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 7:
                                     case "ABITAMSUS-PROD":
                                         pricingprobesEntity.ABITAMSUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 8:
                                     case "ABITAMSUS-PROD-Pricing Probes":
                                         pricingprobesEntity.ABITAMSUS_PROD_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 9:
                                     case "AMERICAS-DEMO":
                                         pricingprobesEntity.AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 10:
                                     case "AMERICAS-DEMO-Pricing Probes":
                                         pricingprobesEntity.AMERICAS_DEMO_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 11:
                                     case "BATRU":
                                         pricingprobesEntity.BATRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 12:
                                     case "BATRU-Pricing Probes":
                                         pricingprobesEntity.BATRU_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 13:
                                     case "BIKR":
                                         pricingprobesEntity.BIKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 14:
                                     case "BIKR-Pricing Probes":
                                         pricingprobesEntity.BIKR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 15:
                                     case "BIMY":
                                         pricingprobesEntity.BIMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 16:
                                     case "BIMY-Pricing Probes":
                                         pricingprobesEntity.BIMY_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 17:
                                     case "BIPH":
                                         pricingprobesEntity.BIPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 18:
                                     case "BIPH-Pricing Probes":
                                         pricingprobesEntity.BIPH_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 19:
                                     case "BISEASK":
                                         pricingprobesEntity.BISEASK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 20:
                                     case "BISEASK-Pricing Probes":
                                         pricingprobesEntity.BISEASK_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 21:
                                     case "BITH":
                                         pricingprobesEntity.BITH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 22:
                                     case "BITH-Pricing Probes":
                                         pricingprobesEntity.BITH_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 23:
                                     case "BIVN":
                                         pricingprobesEntity.BIVN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 24:
                                     case "BIVN-Pricing Probes":
                                         pricingprobesEntity.BIVN_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 25:
                                     case "BPAU":
                                         pricingprobesEntity.BPAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 26:
                                     case "BPAU-Pricing Probes":
                                         pricingprobesEntity.BPAU_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 27:
                                     case "BRODMANN":
                                         pricingprobesEntity.BRODMANN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 28:
                                     case "BRODMANN-Pricing Probes":
                                         pricingprobesEntity.BRODMANN_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 29:
                                     case "CARREFOURAR":
                                         pricingprobesEntity.CARREFOURAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 30:
                                     case "CARREFOURAR-Pricing Probes":
                                         pricingprobesEntity.CARREFOURAR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 31:
                                     case "CCAAU":
                                         pricingprobesEntity.CCAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 32:
                                     case "CCAAU-Pricing Probes":
                                         pricingprobesEntity.CCAAU_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 33:
                                     case "CCABIZA":
                                         pricingprobesEntity.CCABIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 34:
                                     case "CCABIZA-Pricing Probes":
                                         pricingprobesEntity.CCABIZA_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 35:
                                     case "CCANZ":
                                         pricingprobesEntity.CCANZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 36:
                                     case "CCANZ-Pricing Probes":
                                         pricingprobesEntity.CCANZ_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 37:
                                     case "CCBOTTLERSUS":
                                         pricingprobesEntity.CCBOTTLERSUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 38:
                                     case "CCBOTTLERSUS-Pricing Probes":
                                         pricingprobesEntity.CCBOTTLERSUS_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 39:
                                     case "CCBR-PROD":
                                         pricingprobesEntity.CCBR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 40:
                                     case "CCBR-PROD-Pricing Probes":
                                         pricingprobesEntity.CCBR_PROD_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 41:
                                     case "CCJP":
                                         pricingprobesEntity.CCJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 42:
                                     case "CCJP-Pricing Probes":
                                         pricingprobesEntity.CCJP_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 43:
                                     case "CCKH":
                                         pricingprobesEntity.CCKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 44:
                                     case "CCKH-Pricing Probes":
                                         pricingprobesEntity.CCKH_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 45:
                                     case "CCKR":
                                         pricingprobesEntity.CCKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 46:
                                     case "CCKR-Pricing Probes":
                                         pricingprobesEntity.CCKR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 47:
                                     case "CCMY":
                                         pricingprobesEntity.CCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 48:
                                     case "CCMY-Pricing Probes":
                                         pricingprobesEntity.CCMY_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 49:
                                     case "CCPH":
                                         pricingprobesEntity.CCPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 50:
                                     case "CCPH-Pricing Probes":
                                         pricingprobesEntity.CCPH_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 51:
                                     case "CCRPR-PROD":
                                         pricingprobesEntity.CCRPR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 52:
                                     case "CCRPR-PROD-Pricing Probes":
                                         pricingprobesEntity.CCRPR_PROD_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 53:
                                     case "CCRU":
                                         pricingprobesEntity.CCRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 54:
                                     case "CCRU-Pricing Probes":
                                         pricingprobesEntity.CCRU_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 55:
                                     case "CCTH":
                                         pricingprobesEntity.CCTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 56:
                                     case "CCTH-Pricing Probes":
                                         pricingprobesEntity.CCTH_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 57:
                                     case "CCTH-UAT":
                                         pricingprobesEntity.CCTH_UAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 58:
                                     case "CCTH-UAT-Pricing Probes":
                                         pricingprobesEntity.CCTH_UAT_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 59:
                                     case "CCTRADMX":
                                         pricingprobesEntity.CCTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 60:
                                     case "CCTRADMX-Pricing Probes":
                                         pricingprobesEntity.CCTRADMX_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 61:
                                     case "CCUS":
                                         pricingprobesEntity.CCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 62:
                                     case "CCUS-Pricing Probes":
                                         pricingprobesEntity.CCUS_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 63:
                                     case "CCZA":
                                         pricingprobesEntity.CCZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 64:
                                     case "CCZA-Pricing Probes":
                                         pricingprobesEntity.CCZA_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 65:
                                     case "CEREBOSTH":
                                         pricingprobesEntity.CEREBOSTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 66:
                                     case "CEREBOSTH-Pricing Probes":
                                         pricingprobesEntity.CEREBOSTH_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 67:
                                     case "CROWDSOURCE":
                                         pricingprobesEntity.CROWDSOURCE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 68:
                                     case "CROWDSOURCE-Pricing Probes":
                                         pricingprobesEntity.CROWDSOURCE_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 69:
                                     case "DIAGEOAU":
                                         pricingprobesEntity.DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 70:
                                     case "DIAGEOAU-Pricing Probes":
                                         pricingprobesEntity.DIAGEOAU_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 71:
                                     case "DIAGEOBR":
                                         pricingprobesEntity.DIAGEOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 72:
                                     case "DIAGEOBR-Pricing Probes":
                                         pricingprobesEntity.DIAGEOBR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 73:
                                     case "DIAGEOGR":
                                         pricingprobesEntity.DIAGEOGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 74:
                                     case "DIAGEOGR-Pricing Probes":
                                         pricingprobesEntity.DIAGEOGR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 75:
                                     case "DIAGEOIE":
                                         pricingprobesEntity.DIAGEOIE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 76:
                                     case "DIAGEOIE-Pricing Probes":
                                         pricingprobesEntity.DIAGEOIE_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 77:
                                     case "DIAGEOKE":
                                         pricingprobesEntity.DIAGEOKE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 78:
                                     case "DIAGEOKE-Pricing Probes":
                                         pricingprobesEntity.DIAGEOKE_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 79:
                                     case "DIAGEOMX":
                                         pricingprobesEntity.DIAGEOMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 80:
                                     case "DIAGEOMX-Pricing Probes":
                                         pricingprobesEntity.DIAGEOMX_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 81:
                                     case "DIAGEOPT":
                                         pricingprobesEntity.DIAGEOPT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 82:
                                     case "DIAGEOPT-Pricing Probes":
                                         pricingprobesEntity.DIAGEOPT_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 83:
                                     case "DIAGEOTW":
                                         pricingprobesEntity.DIAGEOTW = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 84:
                                     case "DIAGEOTW-Pricing Probes":
                                         pricingprobesEntity.DIAGEOTW_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 85:
                                     case "DIAGEOUK":
                                         pricingprobesEntity.DIAGEOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 86:
                                     case "DIAGEOUK-Pricing Probes":
                                         pricingprobesEntity.DIAGEOUK_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 87:
                                     case "DIAGEOZA":
                                         pricingprobesEntity.DIAGEOZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 88:
                                     case "DIAGEOZA-Pricing Probes":
                                         pricingprobesEntity.DIAGEOZA_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 89:
                                     case "EMEA-DEMO":
                                         pricingprobesEntity.EMEA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 90:
                                     case "EMEA-DEMO-Pricing Probes":
                                         pricingprobesEntity.EMEA_DEMO_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 91:
                                     case "FERREROIT":
                                         pricingprobesEntity.FERREROIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 92:
                                     case "FERREROIT-Pricing Probes":
                                         pricingprobesEntity.FERREROIT_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 93:
                                     case "GILLETTEUS":
                                         pricingprobesEntity.GILLETTEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 94:
                                     case "GILLETTEUS-Pricing Probes":
                                         pricingprobesEntity.GILLETTEUS_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 95:
                                     case "GOOGLEUS":
                                         pricingprobesEntity.GOOGLEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 96:
                                     case "GOOGLEUS-Pricing Probes":
                                         pricingprobesEntity.GOOGLEUS_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 97:
                                     case "HBCDE":
                                         pricingprobesEntity.HBCDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 98:
                                     case "HBCDE-Pricing Probes":
                                         pricingprobesEntity.HBCDE_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 99:
                                     case "HEINEKENCN":
                                         pricingprobesEntity.HEINEKENCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 100:
                                     case "HEINEKENCN-Pricing Probes":
                                         pricingprobesEntity.HEINEKENCN_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 101:
                                     case "HEINEKENUS-PROD":
                                         pricingprobesEntity.HEINEKENUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 102:
                                     case "HEINEKENUS-PROD-Pricing Probes":
                                         pricingprobesEntity.HEINEKENUS_PROD_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 103:
                                     case "HEINZCR":
                                         pricingprobesEntity.HEINZCR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 104:
                                     case "HEINZCR-Pricing Probes":
                                         pricingprobesEntity.HEINZCR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 105:
                                     case "INBEVAR":
                                         pricingprobesEntity.INBEVAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 106:
                                     case "INBEVAR-Pricing Probes":
                                         pricingprobesEntity.INBEVAR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 107:
                                     case "INBEVBE":
                                         pricingprobesEntity.INBEVBE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 108:
                                     case "INBEVBE-Pricing Probes":
                                         pricingprobesEntity.INBEVBE_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 109:
                                     //case "INBEVBE-SAND":
                                     //    pricingprobesEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     ////case 110:
                                     //case "INBEVBE-SAND-Pricing Probes":
                                     //    pricingprobesEntity.INBEVBE_SAND_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 111:
                                     case "INBEVBR":
                                         pricingprobesEntity.INBEVBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 112:
                                     case "INBEVBR-Pricing Probes":
                                         pricingprobesEntity.INBEVBR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 113:
                                     case "INBEVBR_ONTRADE":
                                         pricingprobesEntity.INBEVBR_ONTRADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 114:
                                     case "INBEVBR_ONTRADE-Pricing Probes":
                                         pricingprobesEntity.INBEVBR_ONTRADE_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 115:
                                     case "INBEVCL":
                                         pricingprobesEntity.INBEVCL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 116:
                                     case "INBEVCL-Pricing Probes":
                                         pricingprobesEntity.INBEVCL_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 117:
                                     case "INBEVCN":
                                         pricingprobesEntity.INBEVCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 118:
                                     case "INBEVCN-Pricing Probes":
                                         pricingprobesEntity.INBEVCN_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 119:
                                     case "INBEVCOOLERAR":
                                         pricingprobesEntity.INBEVCOOLERAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 120:
                                     case "INBEVCOOLERAR-Pricing Probes":
                                         pricingprobesEntity.INBEVCOOLERAR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 121:
                                     case "INBEVCOOLERBR":
                                         pricingprobesEntity.INBEVCOOLERBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 122:
                                     case "INBEVCOOLERBR-Pricing Probes":
                                         pricingprobesEntity.INBEVCOOLERBR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 123:
                                     case "INBEVCOOLERUS":
                                         pricingprobesEntity.INBEVCOOLERUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 124:
                                     case "INBEVCOOLERUS-Pricing Probes":
                                         pricingprobesEntity.INBEVCOOLERUS_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 125:
                                     case "INBEVFR":
                                         pricingprobesEntity.INBEVFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 126:
                                     case "INBEVFR-Pricing Probes":
                                         pricingprobesEntity.INBEVFR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 127:
                                     case "INBEVLU":
                                         pricingprobesEntity.INBEVLU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 128:
                                     case "INBEVLU-Pricing Probes":
                                         pricingprobesEntity.INBEVLU_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 129:
                                     case "INBEVLU-SAND":
                                         pricingprobesEntity.INBEVLU_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 130:
                                     case "INBEVLU-SAND-Pricing Probes":
                                         pricingprobesEntity.INBEVLU_SAND_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 131:
                                     case "INBEVMX":
                                         pricingprobesEntity.INBEVMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 132:
                                     case "INBEVMX-Pricing Probes":
                                         pricingprobesEntity.INBEVMX_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 133:
                                     case "INBEVNL":
                                         pricingprobesEntity.INBEVNL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 134:
                                     case "INBEVNL-Pricing Probes":
                                         pricingprobesEntity.INBEVNL_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 135:
                                     case "INBEVNL-SAND":
                                         pricingprobesEntity.INBEVNL_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 136:
                                     case "INBEVNL-SAND-Pricing Probes":
                                         pricingprobesEntity.INBEVNL_SAND_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 137:
                                     case "INBEVPY":
                                         pricingprobesEntity.INBEVPY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 138:
                                     case "INBEVPY-Pricing Probes":
                                         pricingprobesEntity.INBEVPY_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 139:
                                     case "INBEVTRADMX":
                                         pricingprobesEntity.INBEVTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 140:
                                     case "INBEVTRADMX-Pricing Probes":
                                         pricingprobesEntity.INBEVTRADMX_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 141:
                                     case "INBEVUS":
                                         pricingprobesEntity.INBEVUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 142:
                                     case "INBEVUS-Pricing Probes":
                                         pricingprobesEntity.INBEVUS_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 143:
                                     case "JTIUA":
                                         pricingprobesEntity.JTIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 144:
                                     case "JTIUA-Pricing Probes":
                                         pricingprobesEntity.JTIUA_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 145:
                                     case "KCMY":
                                         pricingprobesEntity.KCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 146:
                                     case "KCMY-Pricing Probes":
                                         pricingprobesEntity.KCMY_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 147:
                                     case "KCUS":
                                         pricingprobesEntity.KCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 148:
                                     case "KCUS-Pricing Probes":
                                         pricingprobesEntity.KCUS_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 149:
                                     case "KEURIGCA":
                                         pricingprobesEntity.KEURIGCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 150:
                                     case "KEURIGCA-Pricing Probes":
                                         pricingprobesEntity.KEURIGCA_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////// just only finished 150 //////////////
                                     //case 151:
                                     case "LABATTPLNOPTCA":
                                         pricingprobesEntity.LABATTPLNOPTCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 152:
                                     case "LABATTPLNOPTCA-Pricing Probes":
                                         pricingprobesEntity.LABATTPLNOPTCA_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 153:
                                     case "LAVAZZAAT":
                                         pricingprobesEntity.LAVAZZAAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 154:
                                     case "LAVAZZAAT-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAAT_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 155:
                                     case "LAVAZZAAU":
                                         pricingprobesEntity.LAVAZZAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 156:
                                     case "LAVAZZAAU-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAAU_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 157:
                                     case "LAVAZZABE":
                                         pricingprobesEntity.LAVAZZABE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 158:
                                     case "LAVAZZABE-Pricing Probes":
                                         pricingprobesEntity.LAVAZZABE_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 159:
                                     case "LAVAZZABG":
                                         pricingprobesEntity.LAVAZZABG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 160:
                                     case "LAVAZZABG-Pricing Probes":
                                         pricingprobesEntity.LAVAZZABG_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 161:
                                     case "LAVAZZACA":
                                         pricingprobesEntity.LAVAZZACA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 162:
                                     case "LAVAZZACA-Pricing Probes":
                                         pricingprobesEntity.LAVAZZACA_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 163:
                                     case "LAVAZZACH":
                                         pricingprobesEntity.LAVAZZACH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 164:
                                     case "LAVAZZACH-Pricing Probes":
                                         pricingprobesEntity.LAVAZZACH_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 165:
                                     case "LAVAZZACL":
                                         pricingprobesEntity.LAVAZZACL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 166:
                                     case "LAVAZZACL-Pricing Probes":
                                         pricingprobesEntity.LAVAZZACL_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 167:
                                     case "LAVAZZACN":
                                         pricingprobesEntity.LAVAZZACN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 168:
                                     case "LAVAZZACN-Pricing Probes":
                                         pricingprobesEntity.LAVAZZACN_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 169:
                                     case "LAVAZZACZ":
                                         pricingprobesEntity.LAVAZZACZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 170:
                                     case "LAVAZZACZ-Pricing Probes":
                                         pricingprobesEntity.LAVAZZACZ_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 171:
                                     case "LAVAZZADE":
                                         pricingprobesEntity.LAVAZZADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 172:
                                     case "LAVAZZADE-Pricing Probes":
                                         pricingprobesEntity.LAVAZZADE_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 173:
                                     case "LAVAZZADK":
                                         pricingprobesEntity.LAVAZZADK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 174:
                                     case "LAVAZZADK-Pricing Probes":
                                         pricingprobesEntity.LAVAZZADK_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 175:
                                     case "LAVAZZAEE":
                                         pricingprobesEntity.LAVAZZAEE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 176:
                                     case "LAVAZZAEE-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAEE_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 177:
                                     case "LAVAZZAES":
                                         pricingprobesEntity.LAVAZZAES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 178:
                                     case "LAVAZZAES-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAES_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 179:
                                     case "LAVAZZAFR":
                                         pricingprobesEntity.LAVAZZAFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 180:
                                     case "LAVAZZAFR-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAFR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 181:
                                     case "LAVAZZAGR":
                                         pricingprobesEntity.LAVAZZAGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 182:
                                     case "LAVAZZAGR-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAGR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 183:
                                     case "LAVAZZAHK":
                                         pricingprobesEntity.LAVAZZAHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 184:
                                     case "LAVAZZAHK-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAHK_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 185:
                                     case "LAVAZZAHR":
                                         pricingprobesEntity.LAVAZZAHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 186:
                                     case "LAVAZZAHR-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAHR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 187:
                                     case "LAVAZZAIL":
                                         pricingprobesEntity.LAVAZZAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 188:
                                     case "LAVAZZAIL-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAIL_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 189:
                                     case "LAVAZZAIT":
                                         pricingprobesEntity.LAVAZZAIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 190:
                                     case "LAVAZZAIT-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAIT_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 191:
                                     case "LAVAZZAJP":
                                         pricingprobesEntity.LAVAZZAJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 192:
                                     case "LAVAZZAJP-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAJP_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 193:
                                     case "LAVAZZAKR":
                                         pricingprobesEntity.LAVAZZAKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 194:
                                     case "LAVAZZAKR-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAKR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 195:
                                     case "LAVAZZALT":
                                         pricingprobesEntity.LAVAZZALT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 196:
                                     case "LAVAZZALT-Pricing Probes":
                                         pricingprobesEntity.LAVAZZALT_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 197:
                                     case "LAVAZZALU":
                                         pricingprobesEntity.LAVAZZALU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 198:
                                     case "LAVAZZALU-Pricing Probes":
                                         pricingprobesEntity.LAVAZZALU_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 199:
                                     case "LAVAZZALV":
                                         pricingprobesEntity.LAVAZZALV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 200:
                                     case "LAVAZZALV-Pricing Probes":
                                         pricingprobesEntity.LAVAZZALV_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 201:
                                     case "LAVAZZAMA":
                                         pricingprobesEntity.LAVAZZAMA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 202:
                                     case "LAVAZZAMA-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAMA_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 203:
                                     case "LAVAZZANL":
                                         pricingprobesEntity.LAVAZZANL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 204:
                                     case "LAVAZZANL-Pricing Probes":
                                         pricingprobesEntity.LAVAZZANL_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 205:
                                     case "LAVAZZAPL":
                                         pricingprobesEntity.LAVAZZAPL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 206:
                                     case "LAVAZZAPL-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAPL_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 207:
                                     case "LAVAZZARO":
                                         pricingprobesEntity.LAVAZZARO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 208:
                                     case "LAVAZZARO-Pricing Probes":
                                         pricingprobesEntity.LAVAZZARO_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 209:
                                     case "LAVAZZARU":
                                         pricingprobesEntity.LAVAZZARU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 210:
                                     case "LAVAZZARU-Pricing Probes":
                                         pricingprobesEntity.LAVAZZARU_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 211:
                                     case "LAVAZZASA":
                                         pricingprobesEntity.LAVAZZASA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 212:
                                     case "LAVAZZASA-Pricing Probes":
                                         pricingprobesEntity.LAVAZZASA_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 213:
                                     case "LAVAZZASE":
                                         pricingprobesEntity.LAVAZZASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 214:
                                     case "LAVAZZASE-Pricing Probes":
                                         pricingprobesEntity.LAVAZZASE_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 215:
                                     case "LAVAZZASG":
                                         pricingprobesEntity.LAVAZZASG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 216:
                                     case "LAVAZZASG-Pricing Probes":
                                         pricingprobesEntity.LAVAZZASG_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 217:
                                     case "LAVAZZAUAE":
                                         pricingprobesEntity.LAVAZZAUAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 218:
                                     case "LAVAZZAUAE-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAUAE_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 219:
                                     case "LAVAZZAUK":
                                         pricingprobesEntity.LAVAZZAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 220:
                                     case "LAVAZZAUK-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAUK_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 221:
                                     case "LAVAZZAUS":
                                         pricingprobesEntity.LAVAZZAUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 222:
                                     case "LAVAZZAUS-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAUS_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 223:

                                     case "LAVAZZAZA":
                                         pricingprobesEntity.LAVAZZAZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     case "LAVAZZAZA-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAZA_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 225:
                                     case "LRSUK":
                                         pricingprobesEntity.LRSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 226:
                                     case "LRSUK-Pricing Probes":
                                         pricingprobesEntity.LRSUK_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 227:
                                     case "MARSBR":
                                         pricingprobesEntity.MARSBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 228:
                                     case "MARSBR-Pricing Probes":
                                         pricingprobesEntity.MARSBR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 229:
                                     case "MARSIN":
                                         pricingprobesEntity.MARSIN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 230:
                                     case "MARSIN-Pricing Probes":
                                         pricingprobesEntity.MARSIN_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 231:
                                     case "MARSIN-OLD":
                                         pricingprobesEntity.MARSIN_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 232:
                                     case "MARSIN-OLD-Pricing Probes":
                                         pricingprobesEntity.MARSIN_OLD_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 233:
                                     case "MARSRU-PROD":
                                         pricingprobesEntity.MARSRU_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 234:
                                     case "MARSRU-PROD-Pricing Probes":
                                         pricingprobesEntity.MARSRU_PROD_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 235:
                                     case "MAYORAID":
                                         pricingprobesEntity.MAYORAID = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 236:
                                     case "MAYORAID-Pricing Probes":
                                         pricingprobesEntity.MAYORAID_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 237:
                                     case "MJNCN":
                                         pricingprobesEntity.MJNCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 238:
                                     case "MJNCN-Pricing Probes":
                                         pricingprobesEntity.MJNCN_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 239:
                                     case "MOLSONCOOLERHN":
                                         pricingprobesEntity.MOLSONCOOLERHN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 240:
                                     case "MOLSONCOOLERHN-Pricing Probes":
                                         pricingprobesEntity.MOLSONCOOLERHN_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 241:
                                     case "MOLSONCOOLERHR":
                                         pricingprobesEntity.MOLSONCOOLERHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 242:
                                     case "MOLSONCOOLERHR-Pricing Probes":
                                         pricingprobesEntity.MOLSONCOOLERHR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 243:
                                     case "MOLSONCOORSUK":
                                         pricingprobesEntity.MOLSONCOORSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 244:
                                     case "MOLSONCOORSUK-Pricing Probes":
                                         pricingprobesEntity.MOLSONCOORSUK_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 245:
                                     case "NESTLEUK":
                                         pricingprobesEntity.NESTLEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 246:
                                     case "NESTLEUK-Pricing Probes":
                                         pricingprobesEntity.NESTLEUK_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 247:
                                     case "NIVEAUK":
                                         pricingprobesEntity.NIVEAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 248:
                                     case "NIVEAUK-Pricing Probes":
                                         pricingprobesEntity.NIVEAUK_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 249:
                                     case "NRF2017-DEMO":
                                         pricingprobesEntity.NRF2017_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 250:
                                     case "NRF2017-DEMO-Pricing Probes":
                                         pricingprobesEntity.NRF2017_DEMO_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 251:
                                     case "ONE-AMERICAS-DEMO":
                                         pricingprobesEntity.ONE_AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 252:                                  
                                     case "ONE-AMERICAS-DEMO-Pricing Probes":
                                         pricingprobesEntity.ONE_AMERICAS_DEMO_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 253:
                                     case "ONE-APAC-DEMO":
                                         pricingprobesEntity.ONE_APAC_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 254:
                                     case "ONE-APAC-DEMO-Pricing Probes":
                                         pricingprobesEntity.ONE_APAC_DEMO_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 255:
                                     case "PEPSICOBR":
                                         pricingprobesEntity.PEPSICOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 256:
                                     case "PEPSICOBR-Pricing Probes":
                                         pricingprobesEntity.PEPSICOBR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 257:
                                     case "PNGAU":
                                         pricingprobesEntity.PNGAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 258:
                                     case "PNGAU-Pricing Probes":
                                         pricingprobesEntity.PNGAU_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 259:
                                     case "PNGAU-OLD":
                                         pricingprobesEntity.PNGAU_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 260:
                                     case "PNGAU-OLD-Pricing Probes":
                                         pricingprobesEntity.PNGAU_OLD_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 261:
                                     case "PNGCAREUS":
                                         pricingprobesEntity.PNGCAREUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 262:
                                     case "PNGCAREUS-Pricing Probes":
                                         pricingprobesEntity.PNGCAREUS_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 263:
                                     case "PNGCN-PROD":
                                         pricingprobesEntity.PNGCN_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 264:
                                     case "PNGCN-PROD-Pricing Probes":
                                         pricingprobesEntity.PNGCN_PROD_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 265:
                                     case "PNGJP":
                                         pricingprobesEntity.PNGJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 266:
                                     case "PNGJP-Pricing Probes":
                                         pricingprobesEntity.PNGJP_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 267:
                                     case "PNGJP-OLD":
                                         pricingprobesEntity.PNGJP_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 268:
                                     case "PNGJP-OLD-Pricing Probes":
                                         pricingprobesEntity.PNGJP_OLD_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 269:
                                     case "PNGUS":
                                         pricingprobesEntity.PNGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 270:
                                     case "PNGUS-Pricing Probes":
                                         pricingprobesEntity.PNGUS_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 271:
                                     case "PNGUSEPISODIC":
                                         pricingprobesEntity.PNGUSEPISODIC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 272:
                                     case "PNGUSEPISODIC-Pricing Probes":
                                         pricingprobesEntity.PNGUSEPISODIC_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 273:
                                     case "RBUS":
                                         pricingprobesEntity.RBUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 274:
                                     case "RBUS-Pricing Probes":
                                         pricingprobesEntity.RBUS_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 275:
                                     case "RE-XSUITE-DEMO":
                                         pricingprobesEntity.RE_XSUITE_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 276:
                                     case "RE-XSUITE-DEMO-Pricing Probes":
                                         pricingprobesEntity.RE_XSUITE_DEMO_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 277:
                                     case "REPNGCN-DEMO":
                                         pricingprobesEntity.REPNGCN_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 278:
                                     case "REPNGCN-DEMO-Pricing Probes":
                                         pricingprobesEntity.REPNGCN_DEMO_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 279:
                                     case "RI-DEMO":
                                         pricingprobesEntity.RI_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 280:
                                     case "RI-DEMO-Pricing Probes":
                                         pricingprobesEntity.RI_DEMO_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 281:
                                     case "RI-DIAGEOAU":
                                         pricingprobesEntity.RI_DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 282:
                                     case "RI-DIAGEOAU-Pricing Probes":
                                         pricingprobesEntity.RI_DIAGEOAU_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 283:
                                     case "RIALCBEVUK-PROD":
                                         pricingprobesEntity.RIALCBEVUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 284:
                                     case "RIALCBEVUK-PROD-Pricing Probes":
                                         pricingprobesEntity.RIALCBEVUK_PROD_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 285:
                                     case "RICOFFEEUS":
                                         pricingprobesEntity.RICOFFEEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 286:
                                     case "RICOFFEEUS-Pricing Probes":
                                         pricingprobesEntity.RICOFFEEUS_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 287:
                                     case "RINIELSENUS":
                                         pricingprobesEntity.RINIELSENUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 288:
                                     case "RINIELSENUS-Pricing Probes":
                                         pricingprobesEntity.RINIELSENUS_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 289:
                                     case "RIPETCAREUK-PROD":
                                         pricingprobesEntity.RIPETCAREUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 290:
                                     case "RIPETCAREUK-PROD-Pricing Probes":
                                         pricingprobesEntity.RIPETCAREUK_PROD_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 291:
                                     case "RIUS":
                                         pricingprobesEntity.RIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 292:
                                     case "RIUS-Pricing Probes":
                                         pricingprobesEntity.RIUS_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 293:
                                     case "RIUS-DEV":
                                         pricingprobesEntity.RIUS_DEV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 294:
                                     case "RIUS-DEV-Pricing Probes":
                                         pricingprobesEntity.RIUS_DEV_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 295:
                                     case "RNBDE":
                                         pricingprobesEntity.RNBDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 296:
                                     case "RNBDE-Pricing Probes":
                                         pricingprobesEntity.RNBDE_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 297:
                                     case "SMARTCOOLER-POC2":
                                         pricingprobesEntity.SMARTCOOLER_POC2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 298:
                                     case "SMARTCOOLER-POC2-Pricing Probes":
                                         pricingprobesEntity.SMARTCOOLER_POC2_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 299:
                                     case "SMARTCOOLER-TRN":
                                         pricingprobesEntity.SMARTCOOLER_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 300:
                                     case "SMARTCOOLER-TRN-Pricing Probes":
                                         pricingprobesEntity.SMARTCOOLER_TRN_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 301:
                                     case "SMARTCOOLER2-TRN":
                                         pricingprobesEntity.SMARTCOOLER2_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 302:
                                     case "SMARTCOOLER2-TRN-Pricing Probes":
                                         pricingprobesEntity.SMARTCOOLER2_TRN_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 303:
                                     case "SOLARBR":
                                         pricingprobesEntity.SOLARBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 304:
                                     case "SOLARBR-Pricing Probes":
                                         pricingprobesEntity.SOLARBR_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 305:
                                     case "STATIC-CAMERA-DEMO":
                                         pricingprobesEntity.STATIC_CAMERA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 306:
                                     case "STATIC-CAMERA-DEMO-Pricing Probes":
                                         pricingprobesEntity.STATIC_CAMERA_DEMO_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 307:
                                     case "SWIRECN":
                                         pricingprobesEntity.SWIRECN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 308:
                                     case "SWIRECN-Pricing Probes":
                                         pricingprobesEntity.SWIRECN_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 309:
                                     case "SWIREREDCN":
                                         pricingprobesEntity.SWIREREDCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 310:
                                     case "SWIREREDCN-Pricing Probes":
                                         pricingprobesEntity.SWIREREDCN_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 311:
                                     case "TNUVAIL":
                                         pricingprobesEntity.TNUVAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 312:
                                     case "TNUVAIL-Pricing Probes":
                                         pricingprobesEntity.TNUVAIL_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 313:
                                     case "TRAXDEMO-TS-PROD":
                                         pricingprobesEntity.TRAXDEMO_TS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 314:
                                     case "TRAXDEMO-TS-PROD-Pricing Probes":
                                         pricingprobesEntity.TRAXDEMO_TS_PROD_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 315:
                                     case "TWEAU":
                                         pricingprobesEntity.TWEAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 316:
                                     case "TWEAU-Pricing Probes":
                                         pricingprobesEntity.TWEAU_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 317:
                                     case "RI-DEMO2":
                                         pricingprobesEntity.RI_DEMO2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 318:
                                     case "RI-DEMO2-Pricing Probes":
                                         pricingprobesEntity.RI_DEMO2_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 319:
                                     case "COMPASSCCH-SAND":
                                         pricingprobesEntity.COMPASSCCH_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 320:
                                     case "COMPASSCCH-SAND-Pricing Probes":
                                         pricingprobesEntity.COMPASSCCH_SAND_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 321:
                                     case "LAVAZZAIT-SAND":
                                         pricingprobesEntity.LAVAZZAIT_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 322:
                                     case "LAVAZZAIT-SAND-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAIT_SAND_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 323:
                                     case "INBEVUS-STG":
                                         pricingprobesEntity.INBEVUS_STG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 324:
                                     case "INBEVUS-STG-Pricing Probes":
                                         pricingprobesEntity.INBEVUS_STG_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 325:
                                     case "LAVAZZAFR-SAND":
                                         pricingprobesEntity.LAVAZZAFR_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 326:
                                     case "LAVAZZAFR-SAND-Pricing Probes":
                                         pricingprobesEntity.LAVAZZAFR_SAND_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 327:
                                     case "INBEVBE-SAND":
                                         pricingprobesEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 328:
                                     case "INBEVBE-SAND-Pricing Probes":
                                         pricingprobesEntity.INBEVBE_SAND_PricingProbes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                    //NEW Columns Addition
                                     //case 333:
                                     case "B2BRU":
                                         pricingprobesEntity.B2BRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 334:
                                     case "BRMUS":
                                         pricingprobesEntity.BRMUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 335:
                                     case "CBCIL":
                                         pricingprobesEntity.CBCIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 336:
                                     case "CCCOOLERMX":
                                         pricingprobesEntity.CCCOOLERMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 337:
                                     case "DIAGEOAR":
                                         pricingprobesEntity.DIAGEOAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 338:
                                     case "DIAGEOBENELUX":
                                         pricingprobesEntity.DIAGEOBENELUX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 339:
                                     case "DIAGEOCH":
                                         pricingprobesEntity.DIAGEOCH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 340:
                                     case "DIAGEOGA":
                                         pricingprobesEntity.DIAGEOGA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 341:
                                     case "DIAGEOGTR":
                                         pricingprobesEntity.DIAGEOGTR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 342:
                                     case "DIAGEONORDICS":
                                         pricingprobesEntity.DIAGEONORDICS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 343:
                                     case "DIAGEOUS":
                                         pricingprobesEntity.DIAGEOUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 344:
                                     case "FERREROEXTIT":
                                         pricingprobesEntity.FERREROEXTIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 345:
                                     case "GOOGLEHK":
                                         pricingprobesEntity.GOOGLEHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 346:
                                     case "HEINEKENPILOTCN":
                                         pricingprobesEntity.HEINEKENPILOTCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 347:
                                     case "IMBO":
                                         pricingprobesEntity.IMBO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 348:
                                     case "INBEVCI":
                                         pricingprobesEntity.INBEVCI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 349:
                                     case "INBEVCNTT":
                                         pricingprobesEntity.INBEVCNTT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 350:
                                     case "INBEVCO":
                                         pricingprobesEntity.INBEVCO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 351:
                                     case "INBEVZA":
                                         pricingprobesEntity.INBEVZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 352:
                                     case "INORU":
                                         pricingprobesEntity.INORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 353:
                                     case "JJSP":
                                         pricingprobesEntity.JJSP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 354:
                                     case "JNJES":
                                         pricingprobesEntity.JNJES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 355:
                                     case "JNJUK":
                                         pricingprobesEntity.JNJUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 356:
                                     case "JRIJP":
                                         pricingprobesEntity.JRIJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 357:
                                     case "KELLOGSUSPOC":
                                         pricingprobesEntity.KELLOGSUSPOC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 358:
                                     case "KRAFTUS":
                                         pricingprobesEntity.KRAFTUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 359:
                                     case "MARS-CHOCO-RU":
                                         pricingprobesEntity.MARS_CHOCO_RU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 360:
                                     case "MHUK":
                                         pricingprobesEntity.MHUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 361:
                                     case "MILLERCOORS":
                                         pricingprobesEntity.MILLERCOORS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 362:
                                     case "MOLSONONTRADEUK":
                                         pricingprobesEntity.MOLSONONTRADEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 363:
                                     case "MYCHEMISTAU":
                                         pricingprobesEntity.MYCHEMISTAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 364:
                                     case "NESTLEROAMLERUK":
                                         pricingprobesEntity.NESTLEROAMLERUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 365:
                                     case "NRF2018":
                                         pricingprobesEntity.NRF2018 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 366:
                                     case "PENAFLORAR":
                                         pricingprobesEntity.PENAFLORAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 367:
                                     case "PMIUA":
                                         pricingprobesEntity.PMIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 368:
                                     case "PNGAMERICA":
                                         pricingprobesEntity.PNGAMERICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 369:
                                     case "PNGRO":
                                         pricingprobesEntity.PNGRO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 370:
                                     case "RBAU":
                                         pricingprobesEntity.RBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 371:
                                     case "RBCA":
                                         pricingprobesEntity.RBCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 372:
                                     case "RBDK":
                                         pricingprobesEntity.RBDK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 373:
                                     case "RBMANUAL":
                                         pricingprobesEntity.RBMANUAL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 374:
                                     case "RINIELSENRU-MARS":
                                         pricingprobesEntity.RINIELSENRU_MARS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 375:
                                     case "RINIELSENUSQI":
                                         pricingprobesEntity.RINIELSENUSQI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 376:
                                     case "RIPANELCN":
                                         pricingprobesEntity.RIPANELCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 377:
                                     case "RISPARKWINEDE":
                                         pricingprobesEntity.RISPARKWINEDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 378:
                                     case "SANOFIAE":
                                         pricingprobesEntity.SANOFIAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 379:
                                     case "SANOFIAU":
                                         pricingprobesEntity.SANOFIAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 380:
                                     case "SANOFIHK":
                                         pricingprobesEntity.SANOFIHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 381:
                                     case "SANOFIKH":
                                         pricingprobesEntity.SANOFIKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 382:
                                     case "SANOFINZ":
                                         pricingprobesEntity.SANOFINZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 383:
                                     case "SANOFIRU":
                                         pricingprobesEntity.SANOFIRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 384:
                                     case "SANOFITR":
                                         pricingprobesEntity.SANOFITR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 385:
                                     case "SANOFIUA":
                                         pricingprobesEntity.SANOFIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 386:
                                     case "SHUFERSALIL":
                                         pricingprobesEntity.SHUFERSALIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 387:
                                     case "SUNTORYJP":
                                         pricingprobesEntity.SUNTORYJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 388:
                                     case "TESCOTH":
                                         pricingprobesEntity.TESCOTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 389:
                                     case "TESCOUK":
                                         pricingprobesEntity.TESCOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 390:
                                     case "TRAXROBOT":
                                         pricingprobesEntity.TRAXROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 391:
                                     case "XSUITE-SHOWCASE":
                                         pricingprobesEntity.XSUITE_SHOWCASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 392:
                                     case "ABIUS":
                                         pricingprobesEntity.ABIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 393:
                                     case "BADGERROBOT":
                                         pricingprobesEntity.BADGERROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 394:
                                     case "CUBAU":
                                         pricingprobesEntity.CUBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 395:
                                     case "DIAGEORU":
                                         pricingprobesEntity.DIAGEORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 396:
                                     case "GFKFR":
                                         pricingprobesEntity.GFKFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 397:
                                     case "JNJIT":
                                         pricingprobesEntity.JNJIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 398:
                                     case "LIGHTTRAX":
                                         pricingprobesEntity.LIGHTTRAX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 399:
                                     case "LIGHTTRAXOFFLINE":
                                         pricingprobesEntity.LIGHTTRAXOFFLINE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 400:
                                     case "RINIELSENFR":
                                         pricingprobesEntity.RINIELSENFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 401:
                                     case "SANOFIKZ":
                                         pricingprobesEntity.SANOFIKZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 402:
                                     case "SANOFILB":
                                         pricingprobesEntity.SANOFILB = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 403:
                                     case "SANOFISA":
                                         pricingprobesEntity.SANOFISA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 404:
                                     case "SANOFIZA":
                                         pricingprobesEntity.SANOFIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 405:
                                     case "WATSONSHK":
                                         pricingprobesEntity.WATSONSHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 406:
                                     case "KELLOGGUS":
                                         pricingprobesEntity.KELLOGGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 407:
                                     case "TSINGTAOBEERCN":
                                         pricingprobesEntity.TSINGTAOBEERCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     default: break;


                                     #endregion
                                 }
                             }
                        }

                    }
                    catch (Exception ex)
                    {
                        Response.Redirect("error.aspx");
                        throw ex;
                    }
                }

                if (globalCenterName == center && rowNumber > 1)
                {
                    pricingprobesEntity.ImportedDate = GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim());//GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    pricingprobesEntity.ImportedYear = pricingprobesEntity.ImportedDate.Substring(0, 6);
                    //pricingprobesEntity.ImportTime = GeneralUtility.ConvertSystemTimeFormat(System.DateTime.Now);
                    pricingprobesEntity.CreatedDate = GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    pricingprobesEntity.CreatedBy = userEntity.ID;


                    pricingprobeslist.Add(pricingprobesEntity);
                }

                #endregion
            }
        }

        private void Masks_BindBusiness(List<MasksEntity> maskslist, ExcelWorksheet ws, string center)
        {
            var userEntity = (UserEntity)Session["ID"];
            for (var rowNumber = 1; rowNumber <= ws.Dimension.End.Row; rowNumber++)
            {
                var masksEntity = new MasksEntity();

                masksEntity.ID = GeneralUtility.GeneratedKey;

                #region Populate Excel data

                for (var colNumber = 1; colNumber <= ws.Dimension.End.Column; colNumber++)
                {
                    var columnName1 = ws.Cells[1, colNumber].Value.ToString().Trim();
                    var columnName2 = string.Empty;
                    string columnName3 = string.Empty;
                    if (columnName1 == "Masks")
                    {
                        columnName2 = ws.Cells[1, colNumber - 1].Value.ToString();
                        columnName3 = columnName2 + "-" + columnName1;
                    }
                    else
                    {
                        columnName3 = columnName1;
                    }

                    try
                    {
                        if (true && rowNumber > 1)
                        {
                            // globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            if (Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != "" && Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != null)
                            {
                                globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            }
                            else
                            {
                                globalCenterName = "";
                            }
                             if (globalCenterName == center)
                             {
                                 switch (columnName3)
                                 {
                                     #region
                                     //case 1:
                                     case "QAT":
                                         masksEntity.QAT = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 2:
                                     case "Center":
                                         masksEntity.Center = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 3:
                                     case "Total Masks":
                                         masksEntity.TotalMasks = Convert.ToInt32(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     case "Avg seconds per Masks":
                                         //case 4:
                                         masksEntity.AvgsecondsperMasks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 5:
                                     case "ABICA":
                                         masksEntity.ABICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 6:

                                     case "ABICA-Masks":
                                         masksEntity.ABICA_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 7:
                                     case "ABITAMSUS-PROD":
                                         masksEntity.ABITAMSUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 8:
                                     case "ABITAMSUS-PROD-Masks":
                                         masksEntity.ABITAMSUS_PROD_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 9:
                                     case "AMERICAS-DEMO":
                                         masksEntity.AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 10:
                                     case "AMERICAS-DEMO-Masks":
                                         masksEntity.AMERICAS_DEMO_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 11:
                                     case "BATRU":
                                         masksEntity.BATRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 12:
                                     case "BATRU-Masks":
                                         masksEntity.BATRU_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 13:
                                     case "BIKR":
                                         masksEntity.BIKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 14:
                                     case "BIKR-Masks":
                                         masksEntity.BIKR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 15:
                                     case "BIMY":
                                         masksEntity.BIMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 16:
                                     case "BIMY-Masks":
                                         masksEntity.BIMY_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 17:
                                     case "BIPH":
                                         masksEntity.BIPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 18:
                                     case "BIPH-Masks":
                                         masksEntity.BIPH_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 19:
                                     case "BISEASK":
                                         masksEntity.BISEASK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 20:
                                     case "BISEASK-Masks":
                                         masksEntity.BISEASK_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 21:
                                     case "BITH":
                                         masksEntity.BITH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 22:
                                     case "BITH-Masks":
                                         masksEntity.BITH_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 23:
                                     case "BIVN":
                                         masksEntity.BIVN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 24:
                                     case "BIVN-Masks":
                                         masksEntity.BIVN_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 25:
                                     case "BPAU":
                                         masksEntity.BPAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 26:
                                     case "BPAU-Masks":
                                         masksEntity.BPAU_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 27:
                                     case "BRODMANN":
                                         masksEntity.BRODMANN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 28:
                                     case "BRODMANN-Masks":
                                         masksEntity.BRODMANN_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 29:
                                     case "CARREFOURAR":
                                         masksEntity.CARREFOURAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 30:
                                     case "CARREFOURAR-Masks":
                                         masksEntity.CARREFOURAR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 31:
                                     case "CCAAU":
                                         masksEntity.CCAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 32:
                                     case "CCAAU-Masks":
                                         masksEntity.CCAAU_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 33:
                                     case "CCABIZA":
                                         masksEntity.CCABIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 34:
                                     case "CCABIZA-Masks":
                                         masksEntity.CCABIZA_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 35:
                                     case "CCANZ":
                                         masksEntity.CCANZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 36:
                                     case "CCANZ-Masks":
                                         masksEntity.CCANZ_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 37:
                                     case "CCBOTTLERSUS":
                                         masksEntity.CCBOTTLERSUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 38:
                                     case "CCBOTTLERSUS-Masks":
                                         masksEntity.CCBOTTLERSUS_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 39:
                                     case "CCBR-PROD":
                                         masksEntity.CCBR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 40:
                                     case "CCBR-PROD-Masks":
                                         masksEntity.CCBR_PROD_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 41:
                                     case "CCJP":
                                         masksEntity.CCJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 42:
                                     case "CCJP-Masks":
                                         masksEntity.CCJP_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 43:
                                     case "CCKH":
                                         masksEntity.CCKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 44:
                                     case "CCKH-Masks":
                                         masksEntity.CCKH_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 45:
                                     case "CCKR":
                                         masksEntity.CCKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 46:
                                     case "CCKR-Masks":
                                         masksEntity.CCKR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 47:
                                     case "CCMY":
                                         masksEntity.CCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 48:
                                     case "CCMY-Masks":
                                         masksEntity.CCMY_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 49:
                                     case "CCPH":
                                         masksEntity.CCPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 50:
                                     case "CCPH-Masks":
                                         masksEntity.CCPH_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 51:
                                     case "CCRPR-PROD":
                                         masksEntity.CCRPR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 52:
                                     case "CCRPR-PROD-Masks":
                                         masksEntity.CCRPR_PROD_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 53:
                                     case "CCRU":
                                         masksEntity.CCRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 54:
                                     case "CCRU-Masks":
                                         masksEntity.CCRU_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 55:
                                     case "CCTH":
                                         masksEntity.CCTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 56:
                                     case "CCTH-Masks":
                                         masksEntity.CCTH_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 57:
                                     case "CCTH-UAT":
                                         masksEntity.CCTH_UAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 58:
                                     case "CCTH-UAT-Masks":
                                         masksEntity.CCTH_UAT_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 59:
                                     case "CCTRADMX":
                                         masksEntity.CCTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 60:
                                     case "CCTRADMX-Masks":
                                         masksEntity.CCTRADMX_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 61:
                                     case "CCUS":
                                         masksEntity.CCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 62:
                                     case "CCUS-Masks":
                                         masksEntity.CCUS_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 63:
                                     case "CCZA":
                                         masksEntity.CCZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 64:
                                     case "CCZA-Masks":
                                         masksEntity.CCZA_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 65:
                                     case "CEREBOSTH":
                                         masksEntity.CEREBOSTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 66:
                                     case "CEREBOSTH-Masks":
                                         masksEntity.CEREBOSTH_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 67:
                                     case "CROWDSOURCE":
                                         masksEntity.CROWDSOURCE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 68:
                                     case "CROWDSOURCE-Masks":
                                         masksEntity.CROWDSOURCE_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 69:
                                     case "DIAGEOAU":
                                         masksEntity.DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 70:
                                     case "DIAGEOAU-Masks":
                                         masksEntity.DIAGEOAU_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 71:
                                     case "DIAGEOBR":
                                         masksEntity.DIAGEOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 72:
                                     case "DIAGEOBR-Masks":
                                         masksEntity.DIAGEOBR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 73:
                                     case "DIAGEOGR":
                                         masksEntity.DIAGEOGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 74:
                                     case "DIAGEOGR-Masks":
                                         masksEntity.DIAGEOGR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 75:
                                     case "DIAGEOIE":
                                         masksEntity.DIAGEOIE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 76:
                                     case "DIAGEOIE-Masks":
                                         masksEntity.DIAGEOIE_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 77:
                                     case "DIAGEOKE":
                                         masksEntity.DIAGEOKE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 78:
                                     case "DIAGEOKE-Masks":
                                         masksEntity.DIAGEOKE_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 79:
                                     case "DIAGEOMX":
                                         masksEntity.DIAGEOMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 80:
                                     case "DIAGEOMX-Masks":
                                         masksEntity.DIAGEOMX_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 81:
                                     case "DIAGEOPT":
                                         masksEntity.DIAGEOPT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 82:
                                     case "DIAGEOPT-Masks":
                                         masksEntity.DIAGEOPT_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 83:
                                     case "DIAGEOTW":
                                         masksEntity.DIAGEOTW = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 84:
                                     case "DIAGEOTW-Masks":
                                         masksEntity.DIAGEOTW_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 85:
                                     case "DIAGEOUK":
                                         masksEntity.DIAGEOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 86:
                                     case "DIAGEOUK-Masks":
                                         masksEntity.DIAGEOUK_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 87:
                                     case "DIAGEOZA":
                                         masksEntity.DIAGEOZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 88:
                                     case "DIAGEOZA-Masks":
                                         masksEntity.DIAGEOZA_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 89:
                                     case "EMEA-DEMO":
                                         masksEntity.EMEA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 90:
                                     case "EMEA-DEMO-Masks":
                                         masksEntity.EMEA_DEMO_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 91:
                                     case "FERREROIT":
                                         masksEntity.FERREROIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 92:
                                     case "FERREROIT-Masks":
                                         masksEntity.FERREROIT_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 93:
                                     case "GILLETTEUS":
                                         masksEntity.GILLETTEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 94:
                                     case "GILLETTEUS-Masks":
                                         masksEntity.GILLETTEUS_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 95:
                                     case "GOOGLEUS":
                                         masksEntity.GOOGLEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 96:
                                     case "GOOGLEUS-Masks":
                                         masksEntity.GOOGLEUS_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 97:
                                     case "HBCDE":
                                         masksEntity.HBCDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 98:
                                     case "HBCDE-Masks":
                                         masksEntity.HBCDE_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 99:
                                     case "HEINEKENCN":
                                         masksEntity.HEINEKENCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 100:
                                     case "HEINEKENCN-Masks":
                                         masksEntity.HEINEKENCN_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 101:
                                     case "HEINEKENUS-PROD":
                                         masksEntity.HEINEKENUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 102:
                                     case "HEINEKENUS-PROD-Masks":
                                         masksEntity.HEINEKENUS_PROD_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 103:
                                     case "HEINZCR":
                                         masksEntity.HEINZCR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 104:
                                     case "HEINZCR-Masks":
                                         masksEntity.HEINZCR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 105:
                                     case "INBEVAR":
                                         masksEntity.INBEVAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 106:
                                     case "INBEVAR-Masks":
                                         masksEntity.INBEVAR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 107:
                                     case "INBEVBE":
                                         masksEntity.INBEVBE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 108:
                                     case "INBEVBE-Masks":
                                         masksEntity.INBEVBE_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 109:
                                     //case "INBEVBE-SAND":
                                     //    masksEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     ////case 110:
                                     //case "INBEVBE-SAND-Masks":
                                     //    masksEntity.INBEVBE_SAND_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 111:
                                     case "INBEVBR":
                                         masksEntity.INBEVBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 112:
                                     case "INBEVBR-Masks":
                                         masksEntity.INBEVBR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 113:
                                     case "INBEVBR_ONTRADE":
                                         masksEntity.INBEVBR_ONTRADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 114:
                                     case "INBEVBR_ONTRADE-Masks":
                                         masksEntity.INBEVBR_ONTRADE_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 115:
                                     case "INBEVCL":
                                         masksEntity.INBEVCL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 116:
                                     case "INBEVCL-Masks":
                                         masksEntity.INBEVCL_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 117:
                                     case "INBEVCN":
                                         masksEntity.INBEVCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 118:
                                     case "INBEVCN-Masks":
                                         masksEntity.INBEVCN_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 119:
                                     case "INBEVCOOLERAR":
                                         masksEntity.INBEVCOOLERAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 120:
                                     case "INBEVCOOLERAR-Masks":
                                         masksEntity.INBEVCOOLERAR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 121:
                                     case "INBEVCOOLERBR":
                                         masksEntity.INBEVCOOLERBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 122:
                                     case "INBEVCOOLERBR-Masks":
                                         masksEntity.INBEVCOOLERBR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 123:
                                     case "INBEVCOOLERUS":
                                         masksEntity.INBEVCOOLERUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 124:
                                     case "INBEVCOOLERUS-Masks":
                                         masksEntity.INBEVCOOLERUS_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 125:
                                     case "INBEVFR":
                                         masksEntity.INBEVFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 126:
                                     case "INBEVFR-Masks":
                                         masksEntity.INBEVFR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 127:
                                     case "INBEVLU":
                                         masksEntity.INBEVLU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 128:
                                     case "INBEVLU-Masks":
                                         masksEntity.INBEVLU_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 129:
                                     case "INBEVLU-SAND":
                                         masksEntity.INBEVLU_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 130:
                                     case "INBEVLU-SAND-Masks":
                                         masksEntity.INBEVLU_SAND_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 131:
                                     case "INBEVMX":
                                         masksEntity.INBEVMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 132:
                                     case "INBEVMX-Masks":
                                         masksEntity.INBEVMX_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 133:
                                     case "INBEVNL":
                                         masksEntity.INBEVNL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 134:
                                     case "INBEVNL-Masks":
                                         masksEntity.INBEVNL_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 135:
                                     case "INBEVNL-SAND":
                                         masksEntity.INBEVNL_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 136:
                                     case "INBEVNL-SAND-Masks":
                                         masksEntity.INBEVNL_SAND_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 137:
                                     case "INBEVPY":
                                         masksEntity.INBEVPY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 138:
                                     case "INBEVPY-Masks":
                                         masksEntity.INBEVPY_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 139:
                                     case "INBEVTRADMX":
                                         masksEntity.INBEVTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 140:
                                     case "INBEVTRADMX-Masks":
                                         masksEntity.INBEVTRADMX_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 141:
                                     case "INBEVUS":
                                         masksEntity.INBEVUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 142:
                                     case "INBEVUS-Masks":
                                         masksEntity.INBEVUS_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 143:
                                     case "JTIUA":
                                         masksEntity.JTIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 144:
                                     case "JTIUA-Masks":
                                         masksEntity.JTIUA_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 145:
                                     case "KCMY":
                                         masksEntity.KCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 146:
                                     case "KCMY-Masks":
                                         masksEntity.KCMY_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 147:
                                     case "KCUS":
                                         masksEntity.KCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 148:
                                     case "KCUS-Masks":
                                         masksEntity.KCUS_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 149:
                                     case "KEURIGCA":
                                         masksEntity.KEURIGCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 150:
                                     case "KEURIGCA-Masks":
                                         masksEntity.KEURIGCA_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////// just only finished 150 //////////////
                                     //case 151:
                                     case "LABATTPLNOPTCA":
                                         masksEntity.LABATTPLNOPTCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 152:
                                     case "LABATTPLNOPTCA-Masks":
                                         masksEntity.LABATTPLNOPTCA_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 153:
                                     case "LAVAZZAAT":
                                         masksEntity.LAVAZZAAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 154:
                                     case "LAVAZZAAT-Masks":
                                         masksEntity.LAVAZZAAT_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 155:
                                     case "LAVAZZAAU":
                                         masksEntity.LAVAZZAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 156:
                                     case "LAVAZZAAU-Masks":
                                         masksEntity.LAVAZZAAU_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 157:
                                     case "LAVAZZABE":
                                         masksEntity.LAVAZZABE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 158:
                                     case "LAVAZZABE-Masks":
                                         masksEntity.LAVAZZABE_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 159:
                                     case "LAVAZZABG":
                                         masksEntity.LAVAZZABG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 160:
                                     case "LAVAZZABG-Masks":
                                         masksEntity.LAVAZZABG_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 161:
                                     case "LAVAZZACA":
                                         masksEntity.LAVAZZACA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 162:
                                     case "LAVAZZACA-Masks":
                                         masksEntity.LAVAZZACA_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 163:
                                     case "LAVAZZACH":
                                         masksEntity.LAVAZZACH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 164:
                                     case "LAVAZZACH-Masks":
                                         masksEntity.LAVAZZACH_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 165:
                                     case "LAVAZZACL":
                                         masksEntity.LAVAZZACL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 166:
                                     case "LAVAZZACL-Masks":
                                         masksEntity.LAVAZZACL_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 167:
                                     case "LAVAZZACN":
                                         masksEntity.LAVAZZACN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 168:
                                     case "LAVAZZACN-Masks":
                                         masksEntity.LAVAZZACN_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 169:
                                     case "LAVAZZACZ":
                                         masksEntity.LAVAZZACZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 170:
                                     case "LAVAZZACZ-Masks":
                                         masksEntity.LAVAZZACZ_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 171:
                                     case "LAVAZZADE":
                                         masksEntity.LAVAZZADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 172:
                                     case "LAVAZZADE-Masks":
                                         masksEntity.LAVAZZADE_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 173:
                                     case "LAVAZZADK":
                                         masksEntity.LAVAZZADK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 174:
                                     case "LAVAZZADK-Masks":
                                         masksEntity.LAVAZZADK_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 175:
                                     case "LAVAZZAEE":
                                         masksEntity.LAVAZZAEE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 176:
                                     case "LAVAZZAEE-Masks":
                                         masksEntity.LAVAZZAEE_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 177:
                                     case "LAVAZZAES":
                                         masksEntity.LAVAZZAES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 178:
                                     case "LAVAZZAES-Masks":
                                         masksEntity.LAVAZZAES_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 179:
                                     case "LAVAZZAFR":
                                         masksEntity.LAVAZZAFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 180:
                                     case "LAVAZZAFR-Masks":
                                         masksEntity.LAVAZZAFR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 181:
                                     case "LAVAZZAGR":
                                         masksEntity.LAVAZZAGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 182:
                                     case "LAVAZZAGR-Masks":
                                         masksEntity.LAVAZZAGR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 183:
                                     case "LAVAZZAHK":
                                         masksEntity.LAVAZZAHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 184:
                                     case "LAVAZZAHK-Masks":
                                         masksEntity.LAVAZZAHK_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 185:
                                     case "LAVAZZAHR":
                                         masksEntity.LAVAZZAHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 186:
                                     case "LAVAZZAHR-Masks":
                                         masksEntity.LAVAZZAHR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 187:
                                     case "LAVAZZAIL":
                                         masksEntity.LAVAZZAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 188:
                                     case "LAVAZZAIL-Masks":
                                         masksEntity.LAVAZZAIL_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 189:
                                     case "LAVAZZAIT":
                                         masksEntity.LAVAZZAIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 190:
                                     case "LAVAZZAIT-Masks":
                                         masksEntity.LAVAZZAIT_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 191:
                                     case "LAVAZZAJP":
                                         masksEntity.LAVAZZAJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 192:
                                     case "LAVAZZAJP-Masks":
                                         masksEntity.LAVAZZAJP_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 193:
                                     case "LAVAZZAKR":
                                         masksEntity.LAVAZZAKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 194:
                                     case "LAVAZZAKR-Masks":
                                         masksEntity.LAVAZZAKR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 195:
                                     case "LAVAZZALT":
                                         masksEntity.LAVAZZALT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 196:
                                     case "LAVAZZALT-Masks":
                                         masksEntity.LAVAZZALT_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 197:
                                     case "LAVAZZALU":
                                         masksEntity.LAVAZZALU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 198:
                                     case "LAVAZZALU-Masks":
                                         masksEntity.LAVAZZALU_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 199:
                                     case "LAVAZZALV":
                                         masksEntity.LAVAZZALV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 200:
                                     case "LAVAZZALV-Masks":
                                         masksEntity.LAVAZZALV_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 201:
                                     case "LAVAZZAMA":
                                         masksEntity.LAVAZZAMA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 202:
                                     case "LAVAZZAMA-Masks":
                                         masksEntity.LAVAZZAMA_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 203:
                                     case "LAVAZZANL":
                                         masksEntity.LAVAZZANL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 204:
                                     case "LAVAZZANL-Masks":
                                         masksEntity.LAVAZZANL_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 205:
                                     case "LAVAZZAPL":
                                         masksEntity.LAVAZZAPL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 206:
                                     case "LAVAZZAPL-Masks":
                                         masksEntity.LAVAZZAPL_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 207:
                                     case "LAVAZZARO":
                                         masksEntity.LAVAZZARO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 208:
                                     case "LAVAZZARO-Masks":
                                         masksEntity.LAVAZZARO_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 209:
                                     case "LAVAZZARU":
                                         masksEntity.LAVAZZARU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 210:
                                     case "LAVAZZARU-Masks":
                                         masksEntity.LAVAZZARU_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 211:
                                     case "LAVAZZASA":
                                         masksEntity.LAVAZZASA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 212:
                                     case "LAVAZZASA-Masks":
                                         masksEntity.LAVAZZASA_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 213:
                                     case "LAVAZZASE":
                                         masksEntity.LAVAZZASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 214:
                                     case "LAVAZZASE-Masks":
                                         masksEntity.LAVAZZASE_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 215:
                                     case "LAVAZZASG":
                                         masksEntity.LAVAZZASG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 216:
                                     case "LAVAZZASG-Masks":
                                         masksEntity.LAVAZZASG_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 217:
                                     case "LAVAZZAUAE":
                                         masksEntity.LAVAZZAUAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 218:
                                     case "LAVAZZAUAE-Masks":
                                         masksEntity.LAVAZZAUAE_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 219:
                                     case "LAVAZZAUK":
                                         masksEntity.LAVAZZAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 220:
                                     case "LAVAZZAUK-Masks":
                                         masksEntity.LAVAZZAUK_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 221:
                                     case "LAVAZZAUS":
                                         masksEntity.LAVAZZAUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 222:
                                     case "LAVAZZAUS-Masks":
                                         masksEntity.LAVAZZAUS_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 223:

                                     case "LAVAZZAZA":
                                         masksEntity.LAVAZZAZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     case "LAVAZZAZA-Masks":
                                         masksEntity.LAVAZZAZA_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 225:
                                     case "LRSUK":
                                         masksEntity.LRSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 226:
                                     case "LRSUK-Masks":
                                         masksEntity.LRSUK_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 227:
                                     case "MARSBR":
                                         masksEntity.MARSBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 228:
                                     case "MARSBR-Masks":
                                         masksEntity.MARSBR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 229:
                                     case "MARSIN":
                                         masksEntity.MARSIN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 230:
                                     case "MARSIN-Masks":
                                         masksEntity.MARSIN_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 231:
                                     case "MARSIN-OLD":
                                         masksEntity.MARSIN_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 232:
                                     case "MARSIN-OLD-Masks":
                                         masksEntity.MARSIN_OLD_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 233:
                                     case "MARSRU-PROD":
                                         masksEntity.MARSRU_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 234:
                                     case "MARSRU-PROD-Masks":
                                         masksEntity.MARSRU_PROD_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 235:
                                     case "MAYORAID":
                                         masksEntity.MAYORAID = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 236:
                                     case "MAYORAID-Masks":
                                         masksEntity.MAYORAID_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 237:
                                     case "MJNCN":
                                         masksEntity.MJNCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 238:
                                     case "MJNCN-Masks":
                                         masksEntity.MJNCN_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 239:
                                     case "MOLSONCOOLERHN":
                                         masksEntity.MOLSONCOOLERHN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 240:
                                     case "MOLSONCOOLERHN-Masks":
                                         masksEntity.MOLSONCOOLERHN_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 241:
                                     case "MOLSONCOOLERHR":
                                         masksEntity.MOLSONCOOLERHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 242:
                                     case "MOLSONCOOLERHR-Masks":
                                         masksEntity.MOLSONCOOLERHR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 243:
                                     case "MOLSONCOORSUK":
                                         masksEntity.MOLSONCOORSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 244:
                                     case "MOLSONCOORSUK-Masks":
                                         masksEntity.MOLSONCOORSUK_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 245:
                                     case "NESTLEUK":
                                         masksEntity.NESTLEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 246:
                                     case "NESTLEUK-Masks":
                                         masksEntity.NESTLEUK_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 247:
                                     case "NIVEAUK":
                                         masksEntity.NIVEAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 248:
                                     case "NIVEAUK-Masks":
                                         masksEntity.NIVEAUK_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 249:
                                     case "NRF2017-DEMO":
                                         masksEntity.NRF2017_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 250:
                                     case "NRF2017-DEMO-Masks":
                                         masksEntity.NRF2017_DEMO_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 251:
                                     case "ONE-AMERICAS-DEMO":
                                         masksEntity.ONE_AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 252:                                  
                                     case "ONE-AMERICAS-DEMO-Masks":
                                         masksEntity.ONE_AMERICAS_DEMO_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 253:
                                     case "ONE-APAC-DEMO":
                                         masksEntity.ONE_APAC_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 254:
                                     case "ONE-APAC-DEMO-Masks":
                                         masksEntity.ONE_APAC_DEMO_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 255:
                                     case "PEPSICOBR":
                                         masksEntity.PEPSICOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 256:
                                     case "PEPSICOBR-Masks":
                                         masksEntity.PEPSICOBR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 257:
                                     case "PNGAU":
                                         masksEntity.PNGAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 258:
                                     case "PNGAU-Masks":
                                         masksEntity.PNGAU_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 259:
                                     case "PNGAU-OLD":
                                         masksEntity.PNGAU_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 260:
                                     case "PNGAU-OLD-Masks":
                                         masksEntity.PNGAU_OLD_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 261:
                                     case "PNGCAREUS":
                                         masksEntity.PNGCAREUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 262:
                                     case "PNGCAREUS-Masks":
                                         masksEntity.PNGCAREUS_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 263:
                                     case "PNGCN-PROD":
                                         masksEntity.PNGCN_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 264:
                                     case "PNGCN-PROD-Masks":
                                         masksEntity.PNGCN_PROD_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 265:
                                     case "PNGJP":
                                         masksEntity.PNGJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 266:
                                     case "PNGJP-Masks":
                                         masksEntity.PNGJP_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 267:
                                     case "PNGJP-OLD":
                                         masksEntity.PNGJP_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 268:
                                     case "PNGJP-OLD-Masks":
                                         masksEntity.PNGJP_OLD_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 269:
                                     case "PNGUS":
                                         masksEntity.PNGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 270:
                                     case "PNGUS-Masks":
                                         masksEntity.PNGUS_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 271:
                                     case "PNGUSEPISODIC":
                                         masksEntity.PNGUSEPISODIC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 272:
                                     case "PNGUSEPISODIC-Masks":
                                         masksEntity.PNGUSEPISODIC_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 273:
                                     case "RBUS":
                                         masksEntity.RBUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 274:
                                     case "RBUS-Masks":
                                         masksEntity.RBUS_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 275:
                                     case "RE-XSUITE-DEMO":
                                         masksEntity.RE_XSUITE_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 276:
                                     case "RE-XSUITE-DEMO-Masks":
                                         masksEntity.RE_XSUITE_DEMO_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 277:
                                     case "REPNGCN-DEMO":
                                         masksEntity.REPNGCN_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 278:
                                     case "REPNGCN-DEMO-Masks":
                                         masksEntity.REPNGCN_DEMO_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 279:
                                     case "RI-DEMO":
                                         masksEntity.RI_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 280:
                                     case "RI-DEMO-Masks":
                                         masksEntity.RI_DEMO_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 281:
                                     case "RI-DIAGEOAU":
                                         masksEntity.RI_DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 282:
                                     case "RI-DIAGEOAU-Masks":
                                         masksEntity.RI_DIAGEOAU_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 283:
                                     case "RIALCBEVUK-PROD":
                                         masksEntity.RIALCBEVUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 284:
                                     case "RIALCBEVUK-PROD-Masks":
                                         masksEntity.RIALCBEVUK_PROD_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 285:
                                     case "RICOFFEEUS":
                                         masksEntity.RICOFFEEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 286:
                                     case "RICOFFEEUS-Masks":
                                         masksEntity.RICOFFEEUS_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 287:
                                     case "RINIELSENUS":
                                         masksEntity.RINIELSENUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 288:
                                     case "RINIELSENUS-Masks":
                                         masksEntity.RINIELSENUS_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 289:
                                     case "RIPETCAREUK-PROD":
                                         masksEntity.RIPETCAREUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 290:
                                     case "RIPETCAREUK-PROD-Masks":
                                         masksEntity.RIPETCAREUK_PROD_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 291:
                                     case "RIUS":
                                         masksEntity.RIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 292:
                                     case "RIUS-Masks":
                                         masksEntity.RIUS_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 293:
                                     case "RIUS-DEV":
                                         masksEntity.RIUS_DEV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 294:
                                     case "RIUS-DEV-Masks":
                                         masksEntity.RIUS_DEV_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 295:
                                     case "RNBDE":
                                         masksEntity.RNBDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 296:
                                     case "RNBDE-Masks":
                                         masksEntity.RNBDE_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 297:
                                     case "SMARTCOOLER-POC2":
                                         masksEntity.SMARTCOOLER_POC2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 298:
                                     case "SMARTCOOLER-POC2-Masks":
                                         masksEntity.SMARTCOOLER_POC2_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 299:
                                     case "SMARTCOOLER-TRN":
                                         masksEntity.SMARTCOOLER_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 300:
                                     case "SMARTCOOLER-TRN-Masks":
                                         masksEntity.SMARTCOOLER_TRN_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 301:
                                     case "SMARTCOOLER2-TRN":
                                         masksEntity.SMARTCOOLER2_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 302:
                                     case "SMARTCOOLER2-TRN-Masks":
                                         masksEntity.SMARTCOOLER2_TRN_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 303:
                                     case "SOLARBR":
                                         masksEntity.SOLARBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 304:
                                     case "SOLARBR-Masks":
                                         masksEntity.SOLARBR_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 305:
                                     case "STATIC-CAMERA-DEMO":
                                         masksEntity.STATIC_CAMERA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 306:
                                     case "STATIC-CAMERA-DEMO-Masks":
                                         masksEntity.STATIC_CAMERA_DEMO_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 307:
                                     case "SWIRECN":
                                         masksEntity.SWIRECN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 308:
                                     case "SWIRECN-Masks":
                                         masksEntity.SWIRECN_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 309:
                                     case "SWIREREDCN":
                                         masksEntity.SWIREREDCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 310:
                                     case "SWIREREDCN-Masks":
                                         masksEntity.SWIREREDCN_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 311:
                                     case "TNUVAIL":
                                         masksEntity.TNUVAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 312:
                                     case "TNUVAIL-Masks":
                                         masksEntity.TNUVAIL_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 313:
                                     case "TRAXDEMO-TS-PROD":
                                         masksEntity.TRAXDEMO_TS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 314:
                                     case "TRAXDEMO-TS-PROD-Masks":
                                         masksEntity.TRAXDEMO_TS_PROD_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 315:
                                     case "TWEAU":
                                         masksEntity.TWEAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 316:
                                     case "TWEAU-Masks":
                                         masksEntity.TWEAU_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 317:
                                     case "RI-DEMO2":
                                         masksEntity.RI_DEMO2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 318:
                                     case "RI-DEMO2-Masks":
                                         masksEntity.RI_DEMO2_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 319:
                                     case "COMPASSCCH-SAND":
                                         masksEntity.COMPASSCCH_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 320:
                                     case "COMPASSCCH-SAND-Masks":
                                         masksEntity.COMPASSCCH_SAND_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 321:
                                     case "LAVAZZAIT-SAND":
                                         masksEntity.LAVAZZAIT_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 322:
                                     case "LAVAZZAIT-SAND-Masks":
                                         masksEntity.LAVAZZAIT_SAND_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 323:
                                     case "INBEVUS-STG":
                                         masksEntity.INBEVUS_STG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 324:
                                     case "INBEVUS-STG-Masks":
                                         masksEntity.INBEVUS_STG_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 325:
                                     case "LAVAZZAFR-SAND":
                                         masksEntity.LAVAZZAFR_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 326:
                                     case "LAVAZZAFR-SAND-Masks":
                                         masksEntity.LAVAZZAFR_SAND_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 327:
                                     case "INBEVBE-SAND":
                                         masksEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 328:
                                     case "INBEVBE-SAND-Masks":
                                         masksEntity.INBEVBE_SAND_Masks = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;


                                     //NEW Columns Addition
                                     //case 333:
                                     case "B2BRU":
                                         masksEntity.B2BRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 334:
                                     case "BRMUS":
                                         masksEntity.BRMUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 335:
                                     case "CBCIL":
                                         masksEntity.CBCIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 336:
                                     case "CCCOOLERMX":
                                         masksEntity.CCCOOLERMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 337:
                                     case "DIAGEOAR":
                                         masksEntity.DIAGEOAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 338:
                                     case "DIAGEOBENELUX":
                                         masksEntity.DIAGEOBENELUX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 339:
                                     case "DIAGEOCH":
                                         masksEntity.DIAGEOCH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 340:
                                     case "DIAGEOGA":
                                         masksEntity.DIAGEOGA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 341:
                                     case "DIAGEOGTR":
                                         masksEntity.DIAGEOGTR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 342:
                                     case "DIAGEONORDICS":
                                         masksEntity.DIAGEONORDICS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 343:
                                     case "DIAGEOUS":
                                         masksEntity.DIAGEOUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 344:
                                     case "FERREROEXTIT":
                                         masksEntity.FERREROEXTIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 345:
                                     case "GOOGLEHK":
                                         masksEntity.GOOGLEHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 346:
                                     case "HEINEKENPILOTCN":
                                         masksEntity.HEINEKENPILOTCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 347:
                                     case "IMBO":
                                         masksEntity.IMBO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 348:
                                     case "INBEVCI":
                                         masksEntity.INBEVCI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 349:
                                     case "INBEVCNTT":
                                         masksEntity.INBEVCNTT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 350:
                                     case "INBEVCO":
                                         masksEntity.INBEVCO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 351:
                                     case "INBEVZA":
                                         masksEntity.INBEVZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 352:
                                     case "INORU":
                                         masksEntity.INORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 353:
                                     case "JJSP":
                                         masksEntity.JJSP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 354:
                                     case "JNJES":
                                         masksEntity.JNJES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 355:
                                     case "JNJUK":
                                         masksEntity.JNJUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 356:
                                     case "JRIJP":
                                         masksEntity.JRIJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 357:
                                     case "KELLOGSUSPOC":
                                         masksEntity.KELLOGSUSPOC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 358:
                                     case "KRAFTUS":
                                         masksEntity.KRAFTUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 359:
                                     case "MARS-CHOCO-RU":
                                         masksEntity.MARS_CHOCO_RU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 360:
                                     case "MHUK":
                                         masksEntity.MHUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 361:
                                     case "MILLERCOORS":
                                         masksEntity.MILLERCOORS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 362:
                                     case "MOLSONONTRADEUK":
                                         masksEntity.MOLSONONTRADEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 363:
                                     case "MYCHEMISTAU":
                                         masksEntity.MYCHEMISTAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 364:
                                     case "NESTLEROAMLERUK":
                                         masksEntity.NESTLEROAMLERUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 365:
                                     case "NRF2018":
                                         masksEntity.NRF2018 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 366:
                                     case "PENAFLORAR":
                                         masksEntity.PENAFLORAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 367:
                                     case "PMIUA":
                                         masksEntity.PMIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 368:
                                     case "PNGAMERICA":
                                         masksEntity.PNGAMERICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 369:
                                     case "PNGRO":
                                         masksEntity.PNGRO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 370:
                                     case "RBAU":
                                         masksEntity.RBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 371:
                                     case "RBCA":
                                         masksEntity.RBCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 372:
                                     case "RBDK":
                                         masksEntity.RBDK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 373:
                                     case "RBMANUAL":
                                         masksEntity.RBMANUAL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 374:
                                     case "RINIELSENRU-MARS":
                                         masksEntity.RINIELSENRU_MARS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 375:
                                     case "RINIELSENUSQI":
                                         masksEntity.RINIELSENUSQI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 376:
                                     case "RIPANELCN":
                                         masksEntity.RIPANELCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 377:
                                     case "RISPARKWINEDE":
                                         masksEntity.RISPARKWINEDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 378:
                                     case "SANOFIAE":
                                         masksEntity.SANOFIAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 379:
                                     case "SANOFIAU":
                                         masksEntity.SANOFIAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 380:
                                     case "SANOFIHK":
                                         masksEntity.SANOFIHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 381:
                                     case "SANOFIKH":
                                         masksEntity.SANOFIKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 382:
                                     case "SANOFINZ":
                                         masksEntity.SANOFINZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 383:
                                     case "SANOFIRU":
                                         masksEntity.SANOFIRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 384:
                                     case "SANOFITR":
                                         masksEntity.SANOFITR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 385:
                                     case "SANOFIUA":
                                         masksEntity.SANOFIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 386:
                                     case "SHUFERSALIL":
                                         masksEntity.SHUFERSALIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 387:
                                     case "SUNTORYJP":
                                         masksEntity.SUNTORYJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 388:
                                     case "TESCOTH":
                                         masksEntity.TESCOTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 389:
                                     case "TESCOUK":
                                         masksEntity.TESCOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 390:
                                     case "TRAXROBOT":
                                         masksEntity.TRAXROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 391:
                                     case "XSUITE-SHOWCASE":
                                         masksEntity.XSUITE_SHOWCASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 392:
                                     case "ABIUS":
                                         masksEntity.ABIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 393:
                                     case "BADGERROBOT":
                                         masksEntity.BADGERROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 394:
                                     case "CUBAU":
                                         masksEntity.CUBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 395:
                                     case "DIAGEORU":
                                         masksEntity.DIAGEORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 396:
                                     case "GFKFR":
                                         masksEntity.GFKFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 397:
                                     case "JNJIT":
                                         masksEntity.JNJIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 398:
                                     case "LIGHTTRAX":
                                         masksEntity.LIGHTTRAX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 399:
                                     case "LIGHTTRAXOFFLINE":
                                         masksEntity.LIGHTTRAXOFFLINE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 400:
                                     case "RINIELSENFR":
                                         masksEntity.RINIELSENFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 401:
                                     case "SANOFIKZ":
                                         masksEntity.SANOFIKZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 402:
                                     case "SANOFILB":
                                         masksEntity.SANOFILB = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 403:
                                     case "SANOFISA":
                                         masksEntity.SANOFISA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 404:
                                     case "SANOFIZA":
                                         masksEntity.SANOFIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 405:
                                     case "WATSONSHK":
                                         masksEntity.WATSONSHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 406:
                                     case "KELLOGGUS":
                                         masksEntity.KELLOGGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 407:
                                     case "TSINGTAOBEERCN":
                                         masksEntity.TSINGTAOBEERCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                  

                                     default: break;


                                     #endregion
                                 }
                             }
                        }

                    }
                    catch (Exception ex)
                    {
                        Response.Redirect("error.aspx");
                        throw ex;
                    }
                }

                if (globalCenterName == center && rowNumber > 1)
                {
                    masksEntity.ImportedDate = GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim());//GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    masksEntity.ImportedYear = masksEntity.ImportedDate.Substring(0, 6);
                    //pricingprobesEntity.ImportTime = GeneralUtility.ConvertSystemTimeFormat(System.DateTime.Now);
                    masksEntity.CreatedDate = GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    masksEntity.CreatedBy = userEntity.ID;


                    maskslist.Add(masksEntity);
                }

                #endregion
            }
        }

        private void Votes_BindBusiness(List<VotesEntity> voteslist, ExcelWorksheet ws, string center)
        {
            var userEntity = (UserEntity)Session["ID"];
            for (var rowNumber = 1; rowNumber <= ws.Dimension.End.Row; rowNumber++)
            {
                var votesEntity = new VotesEntity();

                votesEntity.ID = GeneralUtility.GeneratedKey;

                #region Populate Excel data

                for (var colNumber = 1; colNumber <= ws.Dimension.End.Column; colNumber++)
                {
                    var columnName1 = ws.Cells[1, colNumber].Value.ToString().Trim();
                    var columnName2 = string.Empty;
                    string columnName3 = string.Empty;
                    if (columnName1 == "Votes")
                    {
                        columnName2 = ws.Cells[1, colNumber - 1].Value.ToString();
                        columnName3 = columnName2 + "-" + columnName1;
                    }
                    else
                    {
                        columnName3 = columnName1;
                    }

                    try
                    {
                        if (true && rowNumber > 1)
                        {
                             //globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            if (Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != "" && Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != null)
                            {
                                globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            }
                            else
                            {
                                globalCenterName = "";
                            }
                             if (globalCenterName == center)
                             {
                                 switch (columnName3)
                                 {
                                     #region
                                     //case 1:
                                     case "QAT":
                                         votesEntity.QAT = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 2:
                                     case "Center":
                                         votesEntity.Center = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 3:
                                     case "Total Votes":
                                         votesEntity.TotalVotes = Convert.ToInt32(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     case "Avg seconds per Votes":
                                         //case 4:
                                         votesEntity.AvgsecondsperVotes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 5:
                                     case "ABICA":
                                         votesEntity.ABICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 6:

                                     case "ABICA-Votes":
                                         votesEntity.ABICA_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 7:
                                     case "ABITAMSUS-PROD":
                                         votesEntity.ABITAMSUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 8:
                                     case "ABITAMSUS-PROD-Votes":
                                         votesEntity.ABITAMSUS_PROD_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 9:
                                     case "AMERICAS-DEMO":
                                         votesEntity.AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 10:
                                     case "AMERICAS-DEMO-Votes":
                                         votesEntity.AMERICAS_DEMO_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 11:
                                     case "BATRU":
                                         votesEntity.BATRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 12:
                                     case "BATRU-Votes":
                                         votesEntity.BATRU_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 13:
                                     case "BIKR":
                                         votesEntity.BIKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 14:
                                     case "BIKR-Votes":
                                         votesEntity.BIKR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 15:
                                     case "BIMY":
                                         votesEntity.BIMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 16:
                                     case "BIMY-Votes":
                                         votesEntity.BIMY_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 17:
                                     case "BIPH":
                                         votesEntity.BIPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 18:
                                     case "BIPH-Votes":
                                         votesEntity.BIPH_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 19:
                                     case "BISEASK":
                                         votesEntity.BISEASK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 20:
                                     case "BISEASK-Votes":
                                         votesEntity.BISEASK_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 21:
                                     case "BITH":
                                         votesEntity.BITH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 22:
                                     case "BITH-Votes":
                                         votesEntity.BITH_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 23:
                                     case "BIVN":
                                         votesEntity.BIVN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 24:
                                     case "BIVN-Votes":
                                         votesEntity.BIVN_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 25:
                                     case "BPAU":
                                         votesEntity.BPAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 26:
                                     case "BPAU-Votes":
                                         votesEntity.BPAU_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 27:
                                     case "BRODMANN":
                                         votesEntity.BRODMANN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 28:
                                     case "BRODMANN-Votes":
                                         votesEntity.BRODMANN_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 29:
                                     case "CARREFOURAR":
                                         votesEntity.CARREFOURAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 30:
                                     case "CARREFOURAR-Votes":
                                         votesEntity.CARREFOURAR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 31:
                                     case "CCAAU":
                                         votesEntity.CCAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 32:
                                     case "CCAAU-Votes":
                                         votesEntity.CCAAU_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 33:
                                     case "CCABIZA":
                                         votesEntity.CCABIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 34:
                                     case "CCABIZA-Votes":
                                         votesEntity.CCABIZA_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 35:
                                     case "CCANZ":
                                         votesEntity.CCANZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 36:
                                     case "CCANZ-Votes":
                                         votesEntity.CCANZ_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 37:
                                     case "CCBOTTLERSUS":
                                         votesEntity.CCBOTTLERSUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 38:
                                     case "CCBOTTLERSUS-Votes":
                                         votesEntity.CCBOTTLERSUS_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 39:
                                     case "CCBR-PROD":
                                         votesEntity.CCBR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 40:
                                     case "CCBR-PROD-Votes":
                                         votesEntity.CCBR_PROD_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 41:
                                     case "CCJP":
                                         votesEntity.CCJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 42:
                                     case "CCJP-Votes":
                                         votesEntity.CCJP_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 43:
                                     case "CCKH":
                                         votesEntity.CCKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 44:
                                     case "CCKH-Votes":
                                         votesEntity.CCKH_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 45:
                                     case "CCKR":
                                         votesEntity.CCKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 46:
                                     case "CCKR-Votes":
                                         votesEntity.CCKR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 47:
                                     case "CCMY":
                                         votesEntity.CCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 48:
                                     case "CCMY-Votes":
                                         votesEntity.CCMY_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 49:
                                     case "CCPH":
                                         votesEntity.CCPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 50:
                                     case "CCPH-Votes":
                                         votesEntity.CCPH_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 51:
                                     case "CCRPR-PROD":
                                         votesEntity.CCRPR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 52:
                                     case "CCRPR-PROD-Votes":
                                         votesEntity.CCRPR_PROD_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 53:
                                     case "CCRU":
                                         votesEntity.CCRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 54:
                                     case "CCRU-Votes":
                                         votesEntity.CCRU_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 55:
                                     case "CCTH":
                                         votesEntity.CCTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 56:
                                     case "CCTH-Votes":
                                         votesEntity.CCTH_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 57:
                                     case "CCTH-UAT":
                                         votesEntity.CCTH_UAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 58:
                                     case "CCTH-UAT-Votes":
                                         votesEntity.CCTH_UAT_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 59:
                                     case "CCTRADMX":
                                         votesEntity.CCTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 60:
                                     case "CCTRADMX-Votes":
                                         votesEntity.CCTRADMX_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 61:
                                     case "CCUS":
                                         votesEntity.CCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 62:
                                     case "CCUS-Votes":
                                         votesEntity.CCUS_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 63:
                                     case "CCZA":
                                         votesEntity.CCZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 64:
                                     case "CCZA-Votes":
                                         votesEntity.CCZA_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 65:
                                     case "CEREBOSTH":
                                         votesEntity.CEREBOSTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 66:
                                     case "CEREBOSTH-Votes":
                                         votesEntity.CEREBOSTH_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 67:
                                     case "CROWDSOURCE":
                                         votesEntity.CROWDSOURCE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 68:
                                     case "CROWDSOURCE-Votes":
                                         votesEntity.CROWDSOURCE_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 69:
                                     case "DIAGEOAU":
                                         votesEntity.DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 70:
                                     case "DIAGEOAU-Votes":
                                         votesEntity.DIAGEOAU_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 71:
                                     case "DIAGEOBR":
                                         votesEntity.DIAGEOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 72:
                                     case "DIAGEOBR-Votes":
                                         votesEntity.DIAGEOBR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 73:
                                     case "DIAGEOGR":
                                         votesEntity.DIAGEOGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 74:
                                     case "DIAGEOGR-Votes":
                                         votesEntity.DIAGEOGR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 75:
                                     case "DIAGEOIE":
                                         votesEntity.DIAGEOIE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 76:
                                     case "DIAGEOIE-Votes":
                                         votesEntity.DIAGEOIE_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 77:
                                     case "DIAGEOKE":
                                         votesEntity.DIAGEOKE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 78:
                                     case "DIAGEOKE-Votes":
                                         votesEntity.DIAGEOKE_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 79:
                                     case "DIAGEOMX":
                                         votesEntity.DIAGEOMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 80:
                                     case "DIAGEOMX-Votes":
                                         votesEntity.DIAGEOMX_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 81:
                                     case "DIAGEOPT":
                                         votesEntity.DIAGEOPT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 82:
                                     case "DIAGEOPT-Votes":
                                         votesEntity.DIAGEOPT_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 83:
                                     case "DIAGEOTW":
                                         votesEntity.DIAGEOTW = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 84:
                                     case "DIAGEOTW-Votes":
                                         votesEntity.DIAGEOTW_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 85:
                                     case "DIAGEOUK":
                                         votesEntity.DIAGEOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 86:
                                     case "DIAGEOUK-Votes":
                                         votesEntity.DIAGEOUK_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 87:
                                     case "DIAGEOZA":
                                         votesEntity.DIAGEOZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 88:
                                     case "DIAGEOZA-Votes":
                                         votesEntity.DIAGEOZA_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 89:
                                     case "EMEA-DEMO":
                                         votesEntity.EMEA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 90:
                                     case "EMEA-DEMO-Votes":
                                         votesEntity.EMEA_DEMO_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 91:
                                     case "FERREROIT":
                                         votesEntity.FERREROIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 92:
                                     case "FERREROIT-Votes":
                                         votesEntity.FERREROIT_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 93:
                                     case "GILLETTEUS":
                                         votesEntity.GILLETTEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 94:
                                     case "GILLETTEUS-Votes":
                                         votesEntity.GILLETTEUS_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 95:
                                     case "GOOGLEUS":
                                         votesEntity.GOOGLEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 96:
                                     case "GOOGLEUS-Votes":
                                         votesEntity.GOOGLEUS_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 97:
                                     case "HBCDE":
                                         votesEntity.HBCDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 98:
                                     case "HBCDE-Votes":
                                         votesEntity.HBCDE_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 99:
                                     case "HEINEKENCN":
                                         votesEntity.HEINEKENCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 100:
                                     case "HEINEKENCN-Votes":
                                         votesEntity.HEINEKENCN_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 101:
                                     case "HEINEKENUS-PROD":
                                         votesEntity.HEINEKENUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 102:
                                     case "HEINEKENUS-PROD-Votes":
                                         votesEntity.HEINEKENUS_PROD_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 103:
                                     case "HEINZCR":
                                         votesEntity.HEINZCR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 104:
                                     case "HEINZCR-Votes":
                                         votesEntity.HEINZCR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 105:
                                     case "INBEVAR":
                                         votesEntity.INBEVAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 106:
                                     case "INBEVAR-Votes":
                                         votesEntity.INBEVAR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 107:
                                     case "INBEVBE":
                                         votesEntity.INBEVBE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 108:
                                     case "INBEVBE-Votes":
                                         votesEntity.INBEVBE_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 109:
                                     //case "INBEVBE-SAND":
                                     //    votesEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     ////case 110:
                                     //case "INBEVBE-SAND-Votes":
                                     //    votesEntity.INBEVBE_SAND_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 111:
                                     case "INBEVBR":
                                         votesEntity.INBEVBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 112:
                                     case "INBEVBR-Votes":
                                         votesEntity.INBEVBR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 113:
                                     case "INBEVBR_ONTRADE":
                                         votesEntity.INBEVBR_ONTRADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 114:
                                     case "INBEVBR_ONTRADE-Votes":
                                         votesEntity.INBEVBR_ONTRADE_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 115:
                                     case "INBEVCL":
                                         votesEntity.INBEVCL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 116:
                                     case "INBEVCL-Votes":
                                         votesEntity.INBEVCL_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 117:
                                     case "INBEVCN":
                                         votesEntity.INBEVCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 118:
                                     case "INBEVCN-Votes":
                                         votesEntity.INBEVCN_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 119:
                                     case "INBEVCOOLERAR":
                                         votesEntity.INBEVCOOLERAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 120:
                                     case "INBEVCOOLERAR-Votes":
                                         votesEntity.INBEVCOOLERAR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 121:
                                     case "INBEVCOOLERBR":
                                         votesEntity.INBEVCOOLERBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 122:
                                     case "INBEVCOOLERBR-Votes":
                                         votesEntity.INBEVCOOLERBR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 123:
                                     case "INBEVCOOLERUS":
                                         votesEntity.INBEVCOOLERUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 124:
                                     case "INBEVCOOLERUS-Votes":
                                         votesEntity.INBEVCOOLERUS_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 125:
                                     case "INBEVFR":
                                         votesEntity.INBEVFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 126:
                                     case "INBEVFR-Votes":
                                         votesEntity.INBEVFR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 127:
                                     case "INBEVLU":
                                         votesEntity.INBEVLU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 128:
                                     case "INBEVLU-Votes":
                                         votesEntity.INBEVLU_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 129:
                                     case "INBEVLU-SAND":
                                         votesEntity.INBEVLU_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 130:
                                     case "INBEVLU-SAND-Votes":
                                         votesEntity.INBEVLU_SAND_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 131:
                                     case "INBEVMX":
                                         votesEntity.INBEVMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 132:
                                     case "INBEVMX-Votes":
                                         votesEntity.INBEVMX_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 133:
                                     case "INBEVNL":
                                         votesEntity.INBEVNL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 134:
                                     case "INBEVNL-Votes":
                                         votesEntity.INBEVNL_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 135:
                                     case "INBEVNL-SAND":
                                         votesEntity.INBEVNL_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 136:
                                     case "INBEVNL-SAND-Votes":
                                         votesEntity.INBEVNL_SAND_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 137:
                                     case "INBEVPY":
                                         votesEntity.INBEVPY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 138:
                                     case "INBEVPY-Votes":
                                         votesEntity.INBEVPY_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 139:
                                     case "INBEVTRADMX":
                                         votesEntity.INBEVTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 140:
                                     case "INBEVTRADMX-Votes":
                                         votesEntity.INBEVTRADMX_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 141:
                                     case "INBEVUS":
                                         votesEntity.INBEVUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 142:
                                     case "INBEVUS-Votes":
                                         votesEntity.INBEVUS_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 143:
                                     case "JTIUA":
                                         votesEntity.JTIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 144:
                                     case "JTIUA-Votes":
                                         votesEntity.JTIUA_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 145:
                                     case "KCMY":
                                         votesEntity.KCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 146:
                                     case "KCMY-Votes":
                                         votesEntity.KCMY_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 147:
                                     case "KCUS":
                                         votesEntity.KCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 148:
                                     case "KCUS-Votes":
                                         votesEntity.KCUS_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 149:
                                     case "KEURIGCA":
                                         votesEntity.KEURIGCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 150:
                                     case "KEURIGCA-Votes":
                                         votesEntity.KEURIGCA_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////// just only finished 150 //////////////
                                     //case 151:
                                     case "LABATTPLNOPTCA":
                                         votesEntity.LABATTPLNOPTCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 152:
                                     case "LABATTPLNOPTCA-Votes":
                                         votesEntity.LABATTPLNOPTCA_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 153:
                                     case "LAVAZZAAT":
                                         votesEntity.LAVAZZAAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 154:
                                     case "LAVAZZAAT-Votes":
                                         votesEntity.LAVAZZAAT_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 155:
                                     case "LAVAZZAAU":
                                         votesEntity.LAVAZZAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 156:
                                     case "LAVAZZAAU-Votes":
                                         votesEntity.LAVAZZAAU_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 157:
                                     case "LAVAZZABE":
                                         votesEntity.LAVAZZABE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 158:
                                     case "LAVAZZABE-Votes":
                                         votesEntity.LAVAZZABE_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 159:
                                     case "LAVAZZABG":
                                         votesEntity.LAVAZZABG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 160:
                                     case "LAVAZZABG-Votes":
                                         votesEntity.LAVAZZABG_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 161:
                                     case "LAVAZZACA":
                                         votesEntity.LAVAZZACA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 162:
                                     case "LAVAZZACA-Votes":
                                         votesEntity.LAVAZZACA_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 163:
                                     case "LAVAZZACH":
                                         votesEntity.LAVAZZACH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 164:
                                     case "LAVAZZACH-Votes":
                                         votesEntity.LAVAZZACH_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 165:
                                     case "LAVAZZACL":
                                         votesEntity.LAVAZZACL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 166:
                                     case "LAVAZZACL-Votes":
                                         votesEntity.LAVAZZACL_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 167:
                                     case "LAVAZZACN":
                                         votesEntity.LAVAZZACN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 168:
                                     case "LAVAZZACN-Votes":
                                         votesEntity.LAVAZZACN_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 169:
                                     case "LAVAZZACZ":
                                         votesEntity.LAVAZZACZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 170:
                                     case "LAVAZZACZ-Votes":
                                         votesEntity.LAVAZZACZ_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 171:
                                     case "LAVAZZADE":
                                         votesEntity.LAVAZZADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 172:
                                     case "LAVAZZADE-Votes":
                                         votesEntity.LAVAZZADE_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 173:
                                     case "LAVAZZADK":
                                         votesEntity.LAVAZZADK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 174:
                                     case "LAVAZZADK-Votes":
                                         votesEntity.LAVAZZADK_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 175:
                                     case "LAVAZZAEE":
                                         votesEntity.LAVAZZAEE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 176:
                                     case "LAVAZZAEE-Votes":
                                         votesEntity.LAVAZZAEE_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 177:
                                     case "LAVAZZAES":
                                         votesEntity.LAVAZZAES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 178:
                                     case "LAVAZZAES-Votes":
                                         votesEntity.LAVAZZAES_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 179:
                                     case "LAVAZZAFR":
                                         votesEntity.LAVAZZAFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 180:
                                     case "LAVAZZAFR-Votes":
                                         votesEntity.LAVAZZAFR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 181:
                                     case "LAVAZZAGR":
                                         votesEntity.LAVAZZAGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 182:
                                     case "LAVAZZAGR-Votes":
                                         votesEntity.LAVAZZAGR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 183:
                                     case "LAVAZZAHK":
                                         votesEntity.LAVAZZAHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 184:
                                     case "LAVAZZAHK-Votes":
                                         votesEntity.LAVAZZAHK_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 185:
                                     case "LAVAZZAHR":
                                         votesEntity.LAVAZZAHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 186:
                                     case "LAVAZZAHR-Votes":
                                         votesEntity.LAVAZZAHR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 187:
                                     case "LAVAZZAIL":
                                         votesEntity.LAVAZZAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 188:
                                     case "LAVAZZAIL-Votes":
                                         votesEntity.LAVAZZAIL_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 189:
                                     case "LAVAZZAIT":
                                         votesEntity.LAVAZZAIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 190:
                                     case "LAVAZZAIT-Votes":
                                         votesEntity.LAVAZZAIT_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 191:
                                     case "LAVAZZAJP":
                                         votesEntity.LAVAZZAJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 192:
                                     case "LAVAZZAJP-Votes":
                                         votesEntity.LAVAZZAJP_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 193:
                                     case "LAVAZZAKR":
                                         votesEntity.LAVAZZAKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 194:
                                     case "LAVAZZAKR-Votes":
                                         votesEntity.LAVAZZAKR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 195:
                                     case "LAVAZZALT":
                                         votesEntity.LAVAZZALT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 196:
                                     case "LAVAZZALT-Votes":
                                         votesEntity.LAVAZZALT_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 197:
                                     case "LAVAZZALU":
                                         votesEntity.LAVAZZALU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 198:
                                     case "LAVAZZALU-Votes":
                                         votesEntity.LAVAZZALU_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 199:
                                     case "LAVAZZALV":
                                         votesEntity.LAVAZZALV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 200:
                                     case "LAVAZZALV-Votes":
                                         votesEntity.LAVAZZALV_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 201:
                                     case "LAVAZZAMA":
                                         votesEntity.LAVAZZAMA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 202:
                                     case "LAVAZZAMA-Votes":
                                         votesEntity.LAVAZZAMA_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 203:
                                     case "LAVAZZANL":
                                         votesEntity.LAVAZZANL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 204:
                                     case "LAVAZZANL-Votes":
                                         votesEntity.LAVAZZANL_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 205:
                                     case "LAVAZZAPL":
                                         votesEntity.LAVAZZAPL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 206:
                                     case "LAVAZZAPL-Votes":
                                         votesEntity.LAVAZZAPL_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 207:
                                     case "LAVAZZARO":
                                         votesEntity.LAVAZZARO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 208:
                                     case "LAVAZZARO-Votes":
                                         votesEntity.LAVAZZARO_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 209:
                                     case "LAVAZZARU":
                                         votesEntity.LAVAZZARU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 210:
                                     case "LAVAZZARU-Votes":
                                         votesEntity.LAVAZZARU_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 211:
                                     case "LAVAZZASA":
                                         votesEntity.LAVAZZASA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 212:
                                     case "LAVAZZASA-Votes":
                                         votesEntity.LAVAZZASA_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 213:
                                     case "LAVAZZASE":
                                         votesEntity.LAVAZZASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 214:
                                     case "LAVAZZASE-Votes":
                                         votesEntity.LAVAZZASE_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 215:
                                     case "LAVAZZASG":
                                         votesEntity.LAVAZZASG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 216:
                                     case "LAVAZZASG-Votes":
                                         votesEntity.LAVAZZASG_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 217:
                                     case "LAVAZZAUAE":
                                         votesEntity.LAVAZZAUAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 218:
                                     case "LAVAZZAUAE-Votes":
                                         votesEntity.LAVAZZAUAE_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 219:
                                     case "LAVAZZAUK":
                                         votesEntity.LAVAZZAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 220:
                                     case "LAVAZZAUK-Votes":
                                         votesEntity.LAVAZZAUK_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 221:
                                     case "LAVAZZAUS":
                                         votesEntity.LAVAZZAUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 222:
                                     case "LAVAZZAUS-Votes":
                                         votesEntity.LAVAZZAUS_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 223:

                                     case "LAVAZZAZA":
                                         votesEntity.LAVAZZAZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     case "LAVAZZAZA-Votes":
                                         votesEntity.LAVAZZAZA_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 225:
                                     case "LRSUK":
                                         votesEntity.LRSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 226:
                                     case "LRSUK-Votes":
                                         votesEntity.LRSUK_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 227:
                                     case "MARSBR":
                                         votesEntity.MARSBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 228:
                                     case "MARSBR-Votes":
                                         votesEntity.MARSBR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 229:
                                     case "MARSIN":
                                         votesEntity.MARSIN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 230:
                                     case "MARSIN-Votes":
                                         votesEntity.MARSIN_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 231:
                                     case "MARSIN-OLD":
                                         votesEntity.MARSIN_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 232:
                                     case "MARSIN-OLD-Votes":
                                         votesEntity.MARSIN_OLD_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 233:
                                     case "MARSRU-PROD":
                                         votesEntity.MARSRU_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 234:
                                     case "MARSRU-PROD-Votes":
                                         votesEntity.MARSRU_PROD_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 235:
                                     case "MAYORAID":
                                         votesEntity.MAYORAID = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 236:
                                     case "MAYORAID-Votes":
                                         votesEntity.MAYORAID_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 237:
                                     case "MJNCN":
                                         votesEntity.MJNCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 238:
                                     case "MJNCN-Votes":
                                         votesEntity.MJNCN_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 239:
                                     case "MOLSONCOOLERHN":
                                         votesEntity.MOLSONCOOLERHN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 240:
                                     case "MOLSONCOOLERHN-Votes":
                                         votesEntity.MOLSONCOOLERHN_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 241:
                                     case "MOLSONCOOLERHR":
                                         votesEntity.MOLSONCOOLERHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 242:
                                     case "MOLSONCOOLERHR-Votes":
                                         votesEntity.MOLSONCOOLERHR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 243:
                                     case "MOLSONCOORSUK":
                                         votesEntity.MOLSONCOORSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 244:
                                     case "MOLSONCOORSUK-Votes":
                                         votesEntity.MOLSONCOORSUK_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 245:
                                     case "NESTLEUK":
                                         votesEntity.NESTLEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 246:
                                     case "NESTLEUK-Votes":
                                         votesEntity.NESTLEUK_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 247:
                                     case "NIVEAUK":
                                         votesEntity.NIVEAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 248:
                                     case "NIVEAUK-Votes":
                                         votesEntity.NIVEAUK_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 249:
                                     case "NRF2017-DEMO":
                                         votesEntity.NRF2017_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 250:
                                     case "NRF2017-DEMO-Votes":
                                         votesEntity.NRF2017_DEMO_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 251:
                                     case "ONE-AMERICAS-DEMO":
                                         votesEntity.ONE_AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 252:                                  
                                     case "ONE-AMERICAS-DEMO-Votes":
                                         votesEntity.ONE_AMERICAS_DEMO_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 253:
                                     case "ONE-APAC-DEMO":
                                         votesEntity.ONE_APAC_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 254:
                                     case "ONE-APAC-DEMO-Votes":
                                         votesEntity.ONE_APAC_DEMO_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 255:
                                     case "PEPSICOBR":
                                         votesEntity.PEPSICOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 256:
                                     case "PEPSICOBR-Votes":
                                         votesEntity.PEPSICOBR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 257:
                                     case "PNGAU":
                                         votesEntity.PNGAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 258:
                                     case "PNGAU-Votes":
                                         votesEntity.PNGAU_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 259:
                                     case "PNGAU-OLD":
                                         votesEntity.PNGAU_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 260:
                                     case "PNGAU-OLD-Votes":
                                         votesEntity.PNGAU_OLD_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 261:
                                     case "PNGCAREUS":
                                         votesEntity.PNGCAREUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 262:
                                     case "PNGCAREUS-Votes":
                                         votesEntity.PNGCAREUS_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 263:
                                     case "PNGCN-PROD":
                                         votesEntity.PNGCN_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 264:
                                     case "PNGCN-PROD-Votes":
                                         votesEntity.PNGCN_PROD_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 265:
                                     case "PNGJP":
                                         votesEntity.PNGJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 266:
                                     case "PNGJP-Votes":
                                         votesEntity.PNGJP_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 267:
                                     case "PNGJP-OLD":
                                         votesEntity.PNGJP_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 268:
                                     case "PNGJP-OLD-Votes":
                                         votesEntity.PNGJP_OLD_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 269:
                                     case "PNGUS":
                                         votesEntity.PNGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 270:
                                     case "PNGUS-Votes":
                                         votesEntity.PNGUS_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 271:
                                     case "PNGUSEPISODIC":
                                         votesEntity.PNGUSEPISODIC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 272:
                                     case "PNGUSEPISODIC-Votes":
                                         votesEntity.PNGUSEPISODIC_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 273:
                                     case "RBUS":
                                         votesEntity.RBUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 274:
                                     case "RBUS-Votes":
                                         votesEntity.RBUS_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 275:
                                     case "RE-XSUITE-DEMO":
                                         votesEntity.RE_XSUITE_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 276:
                                     case "RE-XSUITE-DEMO-Votes":
                                         votesEntity.RE_XSUITE_DEMO_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 277:
                                     case "REPNGCN-DEMO":
                                         votesEntity.REPNGCN_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 278:
                                     case "REPNGCN-DEMO-Votes":
                                         votesEntity.REPNGCN_DEMO_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 279:
                                     case "RI-DEMO":
                                         votesEntity.RI_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 280:
                                     case "RI-DEMO-Votes":
                                         votesEntity.RI_DEMO_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 281:
                                     case "RI-DIAGEOAU":
                                         votesEntity.RI_DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 282:
                                     case "RI-DIAGEOAU-Votes":
                                         votesEntity.RI_DIAGEOAU_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 283:
                                     case "RIALCBEVUK-PROD":
                                         votesEntity.RIALCBEVUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 284:
                                     case "RIALCBEVUK-PROD-Votes":
                                         votesEntity.RIALCBEVUK_PROD_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 285:
                                     case "RICOFFEEUS":
                                         votesEntity.RICOFFEEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 286:
                                     case "RICOFFEEUS-Votes":
                                         votesEntity.RICOFFEEUS_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 287:
                                     case "RINIELSENUS":
                                         votesEntity.RINIELSENUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 288:
                                     case "RINIELSENUS-Votes":
                                         votesEntity.RINIELSENUS_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 289:
                                     case "RIPETCAREUK-PROD":
                                         votesEntity.RIPETCAREUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 290:
                                     case "RIPETCAREUK-PROD-Votes":
                                         votesEntity.RIPETCAREUK_PROD_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 291:
                                     case "RIUS":
                                         votesEntity.RIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 292:
                                     case "RIUS-Votes":
                                         votesEntity.RIUS_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 293:
                                     case "RIUS-DEV":
                                         votesEntity.RIUS_DEV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 294:
                                     case "RIUS-DEV-Votes":
                                         votesEntity.RIUS_DEV_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 295:
                                     case "RNBDE":
                                         votesEntity.RNBDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 296:
                                     case "RNBDE-Votes":
                                         votesEntity.RNBDE_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 297:
                                     case "SMARTCOOLER-POC2":
                                         votesEntity.SMARTCOOLER_POC2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 298:
                                     case "SMARTCOOLER-POC2-Votes":
                                         votesEntity.SMARTCOOLER_POC2_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 299:
                                     case "SMARTCOOLER-TRN":
                                         votesEntity.SMARTCOOLER_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 300:
                                     case "SMARTCOOLER-TRN-Votes":
                                         votesEntity.SMARTCOOLER_TRN_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 301:
                                     case "SMARTCOOLER2-TRN":
                                         votesEntity.SMARTCOOLER2_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 302:
                                     case "SMARTCOOLER2-TRN-Votes":
                                         votesEntity.SMARTCOOLER2_TRN_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 303:
                                     case "SOLARBR":
                                         votesEntity.SOLARBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 304:
                                     case "SOLARBR-Votes":
                                         votesEntity.SOLARBR_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 305:
                                     case "STATIC-CAMERA-DEMO":
                                         votesEntity.STATIC_CAMERA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 306:
                                     case "STATIC-CAMERA-DEMO-Votes":
                                         votesEntity.STATIC_CAMERA_DEMO_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 307:
                                     case "SWIRECN":
                                         votesEntity.SWIRECN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 308:
                                     case "SWIRECN-Votes":
                                         votesEntity.SWIRECN_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 309:
                                     case "SWIREREDCN":
                                         votesEntity.SWIREREDCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 310:
                                     case "SWIREREDCN-Votes":
                                         votesEntity.SWIREREDCN_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 311:
                                     case "TNUVAIL":
                                         votesEntity.TNUVAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 312:
                                     case "TNUVAIL-Votes":
                                         votesEntity.TNUVAIL_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 313:
                                     case "TRAXDEMO-TS-PROD":
                                         votesEntity.TRAXDEMO_TS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 314:
                                     case "TRAXDEMO-TS-PROD-Votes":
                                         votesEntity.TRAXDEMO_TS_PROD_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 315:
                                     case "TWEAU":
                                         votesEntity.TWEAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 316:
                                     case "TWEAU-Votes":
                                         votesEntity.TWEAU_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 317:
                                     case "RI-DEMO2":
                                         votesEntity.RI_DEMO2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 318:
                                     case "RI-DEMO2-Votes":
                                         votesEntity.RI_DEMO2_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 319:
                                     case "COMPASSCCH-SAND":
                                         votesEntity.COMPASSCCH_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 320:
                                     case "COMPASSCCH-SAND-Votes":
                                         votesEntity.COMPASSCCH_SAND_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 321:
                                     case "LAVAZZAIT-SAND":
                                         votesEntity.LAVAZZAIT_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 322:
                                     case "LAVAZZAIT-SAND-Votes":
                                         votesEntity.LAVAZZAIT_SAND_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 323:
                                     case "INBEVUS-STG":
                                         votesEntity.INBEVUS_STG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 324:
                                     case "INBEVUS-STG-Votes":
                                         votesEntity.INBEVUS_STG_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 325:
                                     case "LAVAZZAFR-SAND":
                                         votesEntity.LAVAZZAFR_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 326:
                                     case "LAVAZZAFR-SAND-Votes":
                                         votesEntity.LAVAZZAFR_SAND_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 327:
                                     case "INBEVBE-SAND":
                                         votesEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 328:
                                     case "INBEVBE-SAND-Votes":
                                         votesEntity.INBEVBE_SAND_Votes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;




                                     //NEW Columns Addition
                                     //case 333:
                                     case "B2BRU":
                                         votesEntity.B2BRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 334:
                                     case "BRMUS":
                                         votesEntity.BRMUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 335:
                                     case "CBCIL":
                                         votesEntity.CBCIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 336:
                                     case "CCCOOLERMX":
                                         votesEntity.CCCOOLERMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 337:
                                     case "DIAGEOAR":
                                         votesEntity.DIAGEOAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 338:
                                     case "DIAGEOBENELUX":
                                         votesEntity.DIAGEOBENELUX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 339:
                                     case "DIAGEOCH":
                                         votesEntity.DIAGEOCH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 340:
                                     case "DIAGEOGA":
                                         votesEntity.DIAGEOGA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 341:
                                     case "DIAGEOGTR":
                                         votesEntity.DIAGEOGTR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 342:
                                     case "DIAGEONORDICS":
                                         votesEntity.DIAGEONORDICS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 343:
                                     case "DIAGEOUS":
                                         votesEntity.DIAGEOUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 344:
                                     case "FERREROEXTIT":
                                         votesEntity.FERREROEXTIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 345:
                                     case "GOOGLEHK":
                                         votesEntity.GOOGLEHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 346:
                                     case "HEINEKENPILOTCN":
                                         votesEntity.HEINEKENPILOTCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 347:
                                     case "IMBO":
                                         votesEntity.IMBO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 348:
                                     case "INBEVCI":
                                         votesEntity.INBEVCI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 349:
                                     case "INBEVCNTT":
                                         votesEntity.INBEVCNTT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 350:
                                     case "INBEVCO":
                                         votesEntity.INBEVCO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 351:
                                     case "INBEVZA":
                                         votesEntity.INBEVZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 352:
                                     case "INORU":
                                         votesEntity.INORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 353:
                                     case "JJSP":
                                         votesEntity.JJSP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 354:
                                     case "JNJES":
                                         votesEntity.JNJES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 355:
                                     case "JNJUK":
                                         votesEntity.JNJUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 356:
                                     case "JRIJP":
                                         votesEntity.JRIJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 357:
                                     case "KELLOGSUSPOC":
                                         votesEntity.KELLOGSUSPOC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 358:
                                     case "KRAFTUS":
                                         votesEntity.KRAFTUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 359:
                                     case "MARS-CHOCO-RU":
                                         votesEntity.MARS_CHOCO_RU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 360:
                                     case "MHUK":
                                         votesEntity.MHUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 361:
                                     case "MILLERCOORS":
                                         votesEntity.MILLERCOORS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 362:
                                     case "MOLSONONTRADEUK":
                                         votesEntity.MOLSONONTRADEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 363:
                                     case "MYCHEMISTAU":
                                         votesEntity.MYCHEMISTAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 364:
                                     case "NESTLEROAMLERUK":
                                         votesEntity.NESTLEROAMLERUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 365:
                                     case "NRF2018":
                                         votesEntity.NRF2018 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 366:
                                     case "PENAFLORAR":
                                         votesEntity.PENAFLORAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 367:
                                     case "PMIUA":
                                         votesEntity.PMIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 368:
                                     case "PNGAMERICA":
                                         votesEntity.PNGAMERICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 369:
                                     case "PNGRO":
                                         votesEntity.PNGRO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 370:
                                     case "RBAU":
                                         votesEntity.RBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 371:
                                     case "RBCA":
                                         votesEntity.RBCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 372:
                                     case "RBDK":
                                         votesEntity.RBDK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 373:
                                     case "RBMANUAL":
                                         votesEntity.RBMANUAL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 374:
                                     case "RINIELSENRU-MARS":
                                         votesEntity.RINIELSENRU_MARS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 375:
                                     case "RINIELSENUSQI":
                                         votesEntity.RINIELSENUSQI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 376:
                                     case "RIPANELCN":
                                         votesEntity.RIPANELCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 377:
                                     case "RISPARKWINEDE":
                                         votesEntity.RISPARKWINEDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 378:
                                     case "SANOFIAE":
                                         votesEntity.SANOFIAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 379:
                                     case "SANOFIAU":
                                         votesEntity.SANOFIAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 380:
                                     case "SANOFIHK":
                                         votesEntity.SANOFIHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 381:
                                     case "SANOFIKH":
                                         votesEntity.SANOFIKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 382:
                                     case "SANOFINZ":
                                         votesEntity.SANOFINZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 383:
                                     case "SANOFIRU":
                                         votesEntity.SANOFIRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 384:
                                     case "SANOFITR":
                                         votesEntity.SANOFITR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 385:
                                     case "SANOFIUA":
                                         votesEntity.SANOFIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 386:
                                     case "SHUFERSALIL":
                                         votesEntity.SHUFERSALIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 387:
                                     case "SUNTORYJP":
                                         votesEntity.SUNTORYJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 388:
                                     case "TESCOTH":
                                         votesEntity.TESCOTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 389:
                                     case "TESCOUK":
                                         votesEntity.TESCOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 390:
                                     case "TRAXROBOT":
                                         votesEntity.TRAXROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 391:
                                     case "XSUITE-SHOWCASE":
                                         votesEntity.XSUITE_SHOWCASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 392:
                                     case "ABIUS":
                                         votesEntity.ABIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 393:
                                     case "BADGERROBOT":
                                         votesEntity.BADGERROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 394:
                                     case "CUBAU":
                                         votesEntity.CUBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 395:
                                     case "DIAGEORU":
                                         votesEntity.DIAGEORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 396:
                                     case "GFKFR":
                                         votesEntity.GFKFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 397:
                                     case "JNJIT":
                                         votesEntity.JNJIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 398:
                                     case "LIGHTTRAX":
                                         votesEntity.LIGHTTRAX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 399:
                                     case "LIGHTTRAXOFFLINE":
                                         votesEntity.LIGHTTRAXOFFLINE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 400:
                                     case "RINIELSENFR":
                                         votesEntity.RINIELSENFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 401:
                                     case "SANOFIKZ":
                                         votesEntity.SANOFIKZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 402:
                                     case "SANOFILB":
                                         votesEntity.SANOFILB = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 403:
                                     case "SANOFISA":
                                         votesEntity.SANOFISA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 404:
                                     case "SANOFIZA":
                                         votesEntity.SANOFIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 405:
                                     case "WATSONSHK":
                                         votesEntity.WATSONSHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 406:
                                     case "KELLOGGUS":
                                         votesEntity.KELLOGGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 407:
                                     case "TSINGTAOBEERCN":
                                         votesEntity.TSINGTAOBEERCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     default: break;


                                     #endregion
                                 }
                             }
                        }

                    }
                    catch (Exception ex)
                    {
                        Response.Redirect("error.aspx");
                        throw ex;
                    }
                }

                if (globalCenterName == center && rowNumber > 1)
                {
                    votesEntity.ImportedDate = GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim());//GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    votesEntity.ImportedYear = votesEntity.ImportedDate.Substring(0, 6);
                    //pricingprobesEntity.ImportTime = GeneralUtility.ConvertSystemTimeFormat(System.DateTime.Now);
                    votesEntity.CreatedDate = GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    votesEntity.CreatedBy = userEntity.ID;


                    voteslist.Add(votesEntity);
                }

                #endregion
            }
        }

        private void Repricing_BindBusiness(List<RepricingEntity> repricinglist, ExcelWorksheet ws, string center)
        {
            var userEntity = (UserEntity)Session["ID"];
            for (var rowNumber = 1; rowNumber <= ws.Dimension.End.Row; rowNumber++)
            {
                var repricingEntity = new RepricingEntity();

                repricingEntity.ID = GeneralUtility.GeneratedKey;

                #region Populate Excel data

                for (var colNumber = 1; colNumber <= ws.Dimension.End.Column; colNumber++)
                {
                    var columnName1 = ws.Cells[1, colNumber].Value.ToString().Trim();
                    var columnName2 = string.Empty;
                    string columnName3 = string.Empty;
                    if (columnName1 == "Repricing")
                    {
                        columnName2 = ws.Cells[1, colNumber - 1].Value.ToString();
                        columnName3 = columnName2 + "-" + columnName1;
                    }
                    else
                    {
                        columnName3 = columnName1;
                    }
                    try
                    {
                        if (true && rowNumber > 1)
                        {
                            if (Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != "" && Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != null)
                            {
                                globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            }
                            else
                            {
                                globalCenterName = "";
                            }
                            if (globalCenterName == center)
                            {
                                switch (columnName3)
                                {
                                    #region
                                    //case 1:
                                    case "QAT":
                                        repricingEntity.QAT = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 2:
                                    case "Center":
                                        repricingEntity.Center = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 3:
                                    case "Total Repricing":
                                        repricingEntity.TotalRepricing = Convert.ToInt32(ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    case "Avg seconds per Repricing":
                                        //case 4:
                                        repricingEntity.AvgsecondsperRepricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 5:
                                    case "ABICA":
                                        repricingEntity.ABICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 6:

                                    case "ABICA-Repricing":
                                        repricingEntity.ABICA_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 7:
                                    case "ABITAMSUS-PROD":
                                        repricingEntity.ABITAMSUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 8:
                                    case "ABITAMSUS-PROD-Repricing":
                                        repricingEntity.ABITAMSUS_PROD_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 9:
                                    case "AMERICAS-DEMO":
                                        repricingEntity.AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 10:
                                    case "AMERICAS-DEMO-Repricing":
                                        repricingEntity.AMERICAS_DEMO_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 11:
                                    case "BATRU":
                                        repricingEntity.BATRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 12:
                                    case "BATRU-Repricing":
                                        repricingEntity.BATRU_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 13:
                                    case "BIKR":
                                        repricingEntity.BIKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 14:
                                    case "BIKR-Repricing":
                                        repricingEntity.BIKR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 15:
                                    case "BIMY":
                                        repricingEntity.BIMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 16:
                                    case "BIMY-Repricing":
                                        repricingEntity.BIMY_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 17:
                                    case "BIPH":
                                        repricingEntity.BIPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 18:
                                    case "BIPH-Repricing":
                                        repricingEntity.BIPH_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 19:
                                    case "BISEASK":
                                        repricingEntity.BISEASK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 20:
                                    case "BISEASK-Repricing":
                                        repricingEntity.BISEASK_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 21:
                                    case "BITH":
                                        repricingEntity.BITH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 22:
                                    case "BITH-Repricing":
                                        repricingEntity.BITH_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 23:
                                    case "BIVN":
                                        repricingEntity.BIVN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 24:
                                    case "BIVN-Repricing":
                                        repricingEntity.BIVN_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 25:
                                    case "BPAU":
                                        repricingEntity.BPAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 26:
                                    case "BPAU-Repricing":
                                        repricingEntity.BPAU_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 27:
                                    case "BRODMANN":
                                        repricingEntity.BRODMANN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 28:
                                    case "BRODMANN-Repricing":
                                        repricingEntity.BRODMANN_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 29:
                                    case "CARREFOURAR":
                                        repricingEntity.CARREFOURAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 30:
                                    case "CARREFOURAR-Repricing":
                                        repricingEntity.CARREFOURAR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 31:
                                    case "CCAAU":
                                        repricingEntity.CCAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 32:
                                    case "CCAAU-Repricing":
                                        repricingEntity.CCAAU_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 33:
                                    case "CCABIZA":
                                        repricingEntity.CCABIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 34:
                                    case "CCABIZA-Repricing":
                                        repricingEntity.CCABIZA_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 35:
                                    case "CCANZ":
                                        repricingEntity.CCANZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 36:
                                    case "CCANZ-Repricing":
                                        repricingEntity.CCANZ_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 37:
                                    case "CCBOTTLERSUS":
                                        repricingEntity.CCBOTTLERSUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 38:
                                    case "CCBOTTLERSUS-Repricing":
                                        repricingEntity.CCBOTTLERSUS_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 39:
                                    case "CCBR-PROD":
                                        repricingEntity.CCBR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 40:
                                    case "CCBR-PROD-Repricing":
                                        repricingEntity.CCBR_PROD_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 41:
                                    case "CCJP":
                                        repricingEntity.CCJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 42:
                                    case "CCJP-Repricing":
                                        repricingEntity.CCJP_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 43:
                                    case "CCKH":
                                        repricingEntity.CCKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 44:
                                    case "CCKH-Repricing":
                                        repricingEntity.CCKH_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 45:
                                    case "CCKR":
                                        repricingEntity.CCKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 46:
                                    case "CCKR-Repricing":
                                        repricingEntity.CCKR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 47:
                                    case "CCMY":
                                        repricingEntity.CCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 48:
                                    case "CCMY-Repricing":
                                        repricingEntity.CCMY_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 49:
                                    case "CCPH":
                                        repricingEntity.CCPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 50:
                                    case "CCPH-Repricing":
                                        repricingEntity.CCPH_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 51:
                                    case "CCRPR-PROD":
                                        repricingEntity.CCRPR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 52:
                                    case "CCRPR-PROD-Repricing":
                                        repricingEntity.CCRPR_PROD_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 53:
                                    case "CCRU":
                                        repricingEntity.CCRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 54:
                                    case "CCRU-Repricing":
                                        repricingEntity.CCRU_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 55:
                                    case "CCTH":
                                        repricingEntity.CCTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 56:
                                    case "CCTH-Repricing":
                                        repricingEntity.CCTH_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 57:
                                    case "CCTH-UAT":
                                        repricingEntity.CCTH_UAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 58:
                                    case "CCTH-UAT-Repricing":
                                        repricingEntity.CCTH_UAT_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 59:
                                    case "CCTRADMX":
                                        repricingEntity.CCTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 60:
                                    case "CCTRADMX-Repricing":
                                        repricingEntity.CCTRADMX_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 61:
                                    case "CCUS":
                                        repricingEntity.CCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 62:
                                    case "CCUS-Repricing":
                                        repricingEntity.CCUS_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 63:
                                    case "CCZA":
                                        repricingEntity.CCZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 64:
                                    case "CCZA-Repricing":
                                        repricingEntity.CCZA_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 65:
                                    case "CEREBOSTH":
                                        repricingEntity.CEREBOSTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 66:
                                    case "CEREBOSTH-Repricing":
                                        repricingEntity.CEREBOSTH_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 67:
                                    case "CROWDSOURCE":
                                        repricingEntity.CROWDSOURCE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 68:
                                    case "CROWDSOURCE-Repricing":
                                        repricingEntity.CROWDSOURCE_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 69:
                                    case "DIAGEOAU":
                                        repricingEntity.DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 70:
                                    case "DIAGEOAU-Repricing":
                                        repricingEntity.DIAGEOAU_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 71:
                                    case "DIAGEOBR":
                                        repricingEntity.DIAGEOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 72:
                                    case "DIAGEOBR-Repricing":
                                        repricingEntity.DIAGEOBR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 73:
                                    case "DIAGEOGR":
                                        repricingEntity.DIAGEOGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 74:
                                    case "DIAGEOGR-Repricing":
                                        repricingEntity.DIAGEOGR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 75:
                                    case "DIAGEOIE":
                                        repricingEntity.DIAGEOIE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 76:
                                    case "DIAGEOIE-Repricing":
                                        repricingEntity.DIAGEOIE_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 77:
                                    case "DIAGEOKE":
                                        repricingEntity.DIAGEOKE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 78:
                                    case "DIAGEOKE-Repricing":
                                        repricingEntity.DIAGEOKE_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 79:
                                    case "DIAGEOMX":
                                        repricingEntity.DIAGEOMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 80:
                                    case "DIAGEOMX-Repricing":
                                        repricingEntity.DIAGEOMX_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 81:
                                    case "DIAGEOPT":
                                        repricingEntity.DIAGEOPT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 82:
                                    case "DIAGEOPT-Repricing":
                                        repricingEntity.DIAGEOPT_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 83:
                                    case "DIAGEOTW":
                                        repricingEntity.DIAGEOTW = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 84:
                                    case "DIAGEOTW-Repricing":
                                        repricingEntity.DIAGEOTW_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 85:
                                    case "DIAGEOUK":
                                        repricingEntity.DIAGEOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 86:
                                    case "DIAGEOUK-Repricing":
                                        repricingEntity.DIAGEOUK_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 87:
                                    case "DIAGEOZA":
                                        repricingEntity.DIAGEOZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 88:
                                    case "DIAGEOZA-Repricing":
                                        repricingEntity.DIAGEOZA_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 89:
                                    case "EMEA-DEMO":
                                        repricingEntity.EMEA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 90:
                                    case "EMEA-DEMO-Repricing":
                                        repricingEntity.EMEA_DEMO_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 91:
                                    case "FERREROIT":
                                        repricingEntity.FERREROIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 92:
                                    case "FERREROIT-Repricing":
                                        repricingEntity.FERREROIT_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 93:
                                    case "GILLETTEUS":
                                        repricingEntity.GILLETTEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 94:
                                    case "GILLETTEUS-Repricing":
                                        repricingEntity.GILLETTEUS_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 95:
                                    case "GOOGLEUS":
                                        repricingEntity.GOOGLEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 96:
                                    case "GOOGLEUS-Repricing":
                                        repricingEntity.GOOGLEUS_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 97:
                                    case "HBCDE":
                                        repricingEntity.HBCDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 98:
                                    case "HBCDE-Repricing":
                                        repricingEntity.HBCDE_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 99:
                                    case "HEINEKENCN":
                                        repricingEntity.HEINEKENCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 100:
                                    case "HEINEKENCN-Repricing":
                                        repricingEntity.HEINEKENCN_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 101:
                                    case "HEINEKENUS-PROD":
                                        repricingEntity.HEINEKENUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 102:
                                    case "HEINEKENUS-PROD-Repricing":
                                        repricingEntity.HEINEKENUS_PROD_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 103:
                                    case "HEINZCR":
                                        repricingEntity.HEINZCR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 104:
                                    case "HEINZCR-Repricing":
                                        repricingEntity.HEINZCR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 105:
                                    case "INBEVAR":
                                        repricingEntity.INBEVAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 106:
                                    case "INBEVAR-Repricing":
                                        repricingEntity.INBEVAR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 107:
                                    case "INBEVBE":
                                        repricingEntity.INBEVBE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 108:
                                    case "INBEVBE-Repricing":
                                        repricingEntity.INBEVBE_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 109:
                                    //case "INBEVBE-SAND":
                                    //    repricingEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    //    break;
                                    ////case 110:
                                    //case "INBEVBE-SAND-Repricing":
                                    //    repricingEntity.INBEVBE_SAND_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    //    break;
                                    //case 111:
                                    case "INBEVBR":
                                        repricingEntity.INBEVBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 112:
                                    case "INBEVBR-Repricing":
                                        repricingEntity.INBEVBR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 113:
                                    case "INBEVBR_ONTRADE":
                                        repricingEntity.INBEVBR_ONTRADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 114:
                                    case "INBEVBR_ONTRADE-Repricing":
                                        repricingEntity.INBEVBR_ONTRADE_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 115:
                                    case "INBEVCL":
                                        repricingEntity.INBEVCL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 116:
                                    case "INBEVCL-Repricing":
                                        repricingEntity.INBEVCL_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 117:
                                    case "INBEVCN":
                                        repricingEntity.INBEVCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 118:
                                    case "INBEVCN-Repricing":
                                        repricingEntity.INBEVCN_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 119:
                                    case "INBEVCOOLERAR":
                                        repricingEntity.INBEVCOOLERAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 120:
                                    case "INBEVCOOLERAR-Repricing":
                                        repricingEntity.INBEVCOOLERAR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 121:
                                    case "INBEVCOOLERBR":
                                        repricingEntity.INBEVCOOLERBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 122:
                                    case "INBEVCOOLERBR-Repricing":
                                        repricingEntity.INBEVCOOLERBR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 123:
                                    case "INBEVCOOLERUS":
                                        repricingEntity.INBEVCOOLERUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 124:
                                    case "INBEVCOOLERUS-Repricing":
                                        repricingEntity.INBEVCOOLERUS_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 125:
                                    case "INBEVFR":
                                        repricingEntity.INBEVFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 126:
                                    case "INBEVFR-Repricing":
                                        repricingEntity.INBEVFR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 127:
                                    case "INBEVLU":
                                        repricingEntity.INBEVLU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 128:
                                    case "INBEVLU-Repricing":
                                        repricingEntity.INBEVLU_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 129:
                                    case "INBEVLU-SAND":
                                        repricingEntity.INBEVLU_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 130:
                                    case "INBEVLU-SAND-Repricing":
                                        repricingEntity.INBEVLU_SAND_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 131:
                                    case "INBEVMX":
                                        repricingEntity.INBEVMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 132:
                                    case "INBEVMX-Repricing":
                                        repricingEntity.INBEVMX_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 133:
                                    case "INBEVNL":
                                        repricingEntity.INBEVNL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 134:
                                    case "INBEVNL-Repricing":
                                        repricingEntity.INBEVNL_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 135:
                                    case "INBEVNL-SAND":
                                        repricingEntity.INBEVNL_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 136:
                                    case "INBEVNL-SAND-Repricing":
                                        repricingEntity.INBEVNL_SAND_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 137:
                                    case "INBEVPY":
                                        repricingEntity.INBEVPY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 138:
                                    case "INBEVPY-Repricing":
                                        repricingEntity.INBEVPY_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 139:
                                    case "INBEVTRADMX":
                                        repricingEntity.INBEVTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 140:
                                    case "INBEVTRADMX-Repricing":
                                        repricingEntity.INBEVTRADMX_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 141:
                                    case "INBEVUS":
                                        repricingEntity.INBEVUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 142:
                                    case "INBEVUS-Repricing":
                                        repricingEntity.INBEVUS_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 143:
                                    case "JTIUA":
                                        repricingEntity.JTIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 144:
                                    case "JTIUA-Repricing":
                                        repricingEntity.JTIUA_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 145:
                                    case "KCMY":
                                        repricingEntity.KCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 146:
                                    case "KCMY-Repricing":
                                        repricingEntity.KCMY_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 147:
                                    case "KCUS":
                                        repricingEntity.KCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 148:
                                    case "KCUS-Repricing":
                                        repricingEntity.KCUS_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 149:
                                    case "KEURIGCA":
                                        repricingEntity.KEURIGCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 150:
                                    case "KEURIGCA-Repricing":
                                        repricingEntity.KEURIGCA_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////// just only finished 150 //////////////
                                    //case 151:
                                    case "LABATTPLNOPTCA":
                                        repricingEntity.LABATTPLNOPTCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 152:
                                    case "LABATTPLNOPTCA-Repricing":
                                        repricingEntity.LABATTPLNOPTCA_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 153:
                                    case "LAVAZZAAT":
                                        repricingEntity.LAVAZZAAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 154:
                                    case "LAVAZZAAT-Repricing":
                                        repricingEntity.LAVAZZAAT_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 155:
                                    case "LAVAZZAAU":
                                        repricingEntity.LAVAZZAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 156:
                                    case "LAVAZZAAU-Repricing":
                                        repricingEntity.LAVAZZAAU_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 157:
                                    case "LAVAZZABE":
                                        repricingEntity.LAVAZZABE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 158:
                                    case "LAVAZZABE-Repricing":
                                        repricingEntity.LAVAZZABE_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 159:
                                    case "LAVAZZABG":
                                        repricingEntity.LAVAZZABG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 160:
                                    case "LAVAZZABG-Repricing":
                                        repricingEntity.LAVAZZABG_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 161:
                                    case "LAVAZZACA":
                                        repricingEntity.LAVAZZACA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 162:
                                    case "LAVAZZACA-Repricing":
                                        repricingEntity.LAVAZZACA_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 163:
                                    case "LAVAZZACH":
                                        repricingEntity.LAVAZZACH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 164:
                                    case "LAVAZZACH-Repricing":
                                        repricingEntity.LAVAZZACH_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 165:
                                    case "LAVAZZACL":
                                        repricingEntity.LAVAZZACL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 166:
                                    case "LAVAZZACL-Repricing":
                                        repricingEntity.LAVAZZACL_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 167:
                                    case "LAVAZZACN":
                                        repricingEntity.LAVAZZACN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 168:
                                    case "LAVAZZACN-Repricing":
                                        repricingEntity.LAVAZZACN_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 169:
                                    case "LAVAZZACZ":
                                        repricingEntity.LAVAZZACZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 170:
                                    case "LAVAZZACZ-Repricing":
                                        repricingEntity.LAVAZZACZ_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 171:
                                    case "LAVAZZADE":
                                        repricingEntity.LAVAZZADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 172:
                                    case "LAVAZZADE-Repricing":
                                        repricingEntity.LAVAZZADE_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 173:
                                    case "LAVAZZADK":
                                        repricingEntity.LAVAZZADK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 174:
                                    case "LAVAZZADK-Repricing":
                                        repricingEntity.LAVAZZADK_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 175:
                                    case "LAVAZZAEE":
                                        repricingEntity.LAVAZZAEE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 176:
                                    case "LAVAZZAEE-Repricing":
                                        repricingEntity.LAVAZZAEE_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 177:
                                    case "LAVAZZAES":
                                        repricingEntity.LAVAZZAES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 178:
                                    case "LAVAZZAES-Repricing":
                                        repricingEntity.LAVAZZAES_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 179:
                                    case "LAVAZZAFR":
                                        repricingEntity.LAVAZZAFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 180:
                                    case "LAVAZZAFR-Repricing":
                                        repricingEntity.LAVAZZAFR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 181:
                                    case "LAVAZZAGR":
                                        repricingEntity.LAVAZZAGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 182:
                                    case "LAVAZZAGR-Repricing":
                                        repricingEntity.LAVAZZAGR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 183:
                                    case "LAVAZZAHK":
                                        repricingEntity.LAVAZZAHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 184:
                                    case "LAVAZZAHK-Repricing":
                                        repricingEntity.LAVAZZAHK_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 185:
                                    case "LAVAZZAHR":
                                        repricingEntity.LAVAZZAHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 186:
                                    case "LAVAZZAHR-Repricing":
                                        repricingEntity.LAVAZZAHR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 187:
                                    case "LAVAZZAIL":
                                        repricingEntity.LAVAZZAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 188:
                                    case "LAVAZZAIL-Repricing":
                                        repricingEntity.LAVAZZAIL_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 189:
                                    case "LAVAZZAIT":
                                        repricingEntity.LAVAZZAIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 190:
                                    case "LAVAZZAIT-Repricing":
                                        repricingEntity.LAVAZZAIT_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 191:
                                    case "LAVAZZAJP":
                                        repricingEntity.LAVAZZAJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 192:
                                    case "LAVAZZAJP-Repricing":
                                        repricingEntity.LAVAZZAJP_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 193:
                                    case "LAVAZZAKR":
                                        repricingEntity.LAVAZZAKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 194:
                                    case "LAVAZZAKR-Repricing":
                                        repricingEntity.LAVAZZAKR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 195:
                                    case "LAVAZZALT":
                                        repricingEntity.LAVAZZALT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 196:
                                    case "LAVAZZALT-Repricing":
                                        repricingEntity.LAVAZZALT_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 197:
                                    case "LAVAZZALU":
                                        repricingEntity.LAVAZZALU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 198:
                                    case "LAVAZZALU-Repricing":
                                        repricingEntity.LAVAZZALU_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 199:
                                    case "LAVAZZALV":
                                        repricingEntity.LAVAZZALV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 200:
                                    case "LAVAZZALV-Repricing":
                                        repricingEntity.LAVAZZALV_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 201:
                                    case "LAVAZZAMA":
                                        repricingEntity.LAVAZZAMA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 202:
                                    case "LAVAZZAMA-Repricing":
                                        repricingEntity.LAVAZZAMA_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 203:
                                    case "LAVAZZANL":
                                        repricingEntity.LAVAZZANL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 204:
                                    case "LAVAZZANL-Repricing":
                                        repricingEntity.LAVAZZANL_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 205:
                                    case "LAVAZZAPL":
                                        repricingEntity.LAVAZZAPL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 206:
                                    case "LAVAZZAPL-Repricing":
                                        repricingEntity.LAVAZZAPL_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 207:
                                    case "LAVAZZARO":
                                        repricingEntity.LAVAZZARO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 208:
                                    case "LAVAZZARO-Repricing":
                                        repricingEntity.LAVAZZARO_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 209:
                                    case "LAVAZZARU":
                                        repricingEntity.LAVAZZARU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 210:
                                    case "LAVAZZARU-Repricing":
                                        repricingEntity.LAVAZZARU_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 211:
                                    case "LAVAZZASA":
                                        repricingEntity.LAVAZZASA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 212:
                                    case "LAVAZZASA-Repricing":
                                        repricingEntity.LAVAZZASA_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 213:
                                    case "LAVAZZASE":
                                        repricingEntity.LAVAZZASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 214:
                                    case "LAVAZZASE-Repricing":
                                        repricingEntity.LAVAZZASE_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 215:
                                    case "LAVAZZASG":
                                        repricingEntity.LAVAZZASG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 216:
                                    case "LAVAZZASG-Repricing":
                                        repricingEntity.LAVAZZASG_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 217:
                                    case "LAVAZZAUAE":
                                        repricingEntity.LAVAZZAUAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 218:
                                    case "LAVAZZAUAE-Repricing":
                                        repricingEntity.LAVAZZAUAE_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 219:
                                    case "LAVAZZAUK":
                                        repricingEntity.LAVAZZAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 220:
                                    case "LAVAZZAUK-Repricing":
                                        repricingEntity.LAVAZZAUK_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 221:
                                    case "LAVAZZAUS":
                                        repricingEntity.LAVAZZAUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 222:
                                    case "LAVAZZAUS-Repricing":
                                        repricingEntity.LAVAZZAUS_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 223:

                                    case "LAVAZZAZA":
                                        repricingEntity.LAVAZZAZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    case "LAVAZZAZA-Repricing":
                                        repricingEntity.LAVAZZAZA_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 225:
                                    case "LRSUK":
                                        repricingEntity.LRSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 226:
                                    case "LRSUK-Repricing":
                                        repricingEntity.LRSUK_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 227:
                                    case "MARSBR":
                                        repricingEntity.MARSBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 228:
                                    case "MARSBR-Repricing":
                                        repricingEntity.MARSBR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 229:
                                    case "MARSIN":
                                        repricingEntity.MARSIN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 230:
                                    case "MARSIN-Repricing":
                                        repricingEntity.MARSIN_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 231:
                                    case "MARSIN-OLD":
                                        repricingEntity.MARSIN_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 232:
                                    case "MARSIN-OLD-Repricing":
                                        repricingEntity.MARSIN_OLD_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 233:
                                    case "MARSRU-PROD":
                                        repricingEntity.MARSRU_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 234:
                                    case "MARSRU-PROD-Repricing":
                                        repricingEntity.MARSRU_PROD_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 235:
                                    case "MAYORAID":
                                        repricingEntity.MAYORAID = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 236:
                                    case "MAYORAID-Repricing":
                                        repricingEntity.MAYORAID_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 237:
                                    case "MJNCN":
                                        repricingEntity.MJNCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 238:
                                    case "MJNCN-Repricing":
                                        repricingEntity.MJNCN_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 239:
                                    case "MOLSONCOOLERHN":
                                        repricingEntity.MOLSONCOOLERHN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 240:
                                    case "MOLSONCOOLERHN-Repricing":
                                        repricingEntity.MOLSONCOOLERHN_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 241:
                                    case "MOLSONCOOLERHR":
                                        repricingEntity.MOLSONCOOLERHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 242:
                                    case "MOLSONCOOLERHR-Repricing":
                                        repricingEntity.MOLSONCOOLERHR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 243:
                                    case "MOLSONCOORSUK":
                                        repricingEntity.MOLSONCOORSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 244:
                                    case "MOLSONCOORSUK-Repricing":
                                        repricingEntity.MOLSONCOORSUK_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 245:
                                    case "NESTLEUK":
                                        repricingEntity.NESTLEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 246:
                                    case "NESTLEUK-Repricing":
                                        repricingEntity.NESTLEUK_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 247:
                                    case "NIVEAUK":
                                        repricingEntity.NIVEAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 248:
                                    case "NIVEAUK-Repricing":
                                        repricingEntity.NIVEAUK_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 249:
                                    case "NRF2017-DEMO":
                                        repricingEntity.NRF2017_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 250:
                                    case "NRF2017-DEMO-Repricing":
                                        repricingEntity.NRF2017_DEMO_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 251:
                                    case "ONE-AMERICAS-DEMO":
                                        repricingEntity.ONE_AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 252:                                  
                                    case "ONE-AMERICAS-DEMO-Repricing":
                                        repricingEntity.ONE_AMERICAS_DEMO_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 253:
                                    case "ONE-APAC-DEMO":
                                        repricingEntity.ONE_APAC_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 254:
                                    case "ONE-APAC-DEMO-Repricing":
                                        repricingEntity.ONE_APAC_DEMO_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 255:
                                    case "PEPSICOBR":
                                        repricingEntity.PEPSICOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 256:
                                    case "PEPSICOBR-Repricing":
                                        repricingEntity.PEPSICOBR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 257:
                                    case "PNGAU":
                                        repricingEntity.PNGAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 258:
                                    case "PNGAU-Repricing":
                                        repricingEntity.PNGAU_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 259:
                                    case "PNGAU-OLD":
                                        repricingEntity.PNGAU_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 260:
                                    case "PNGAU-OLD-Repricing":
                                        repricingEntity.PNGAU_OLD_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 261:
                                    case "PNGCAREUS":
                                        repricingEntity.PNGCAREUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 262:
                                    case "PNGCAREUS-Repricing":
                                        repricingEntity.PNGCAREUS_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 263:
                                    case "PNGCN-PROD":
                                        repricingEntity.PNGCN_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 264:
                                    case "PNGCN-PROD-Repricing":
                                        repricingEntity.PNGCN_PROD_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 265:
                                    case "PNGJP":
                                        repricingEntity.PNGJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 266:
                                    case "PNGJP-Repricing":
                                        repricingEntity.PNGJP_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 267:
                                    case "PNGJP-OLD":
                                        repricingEntity.PNGJP_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 268:
                                    case "PNGJP-OLD-Repricing":
                                        repricingEntity.PNGJP_OLD_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 269:
                                    case "PNGUS":
                                        repricingEntity.PNGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 270:
                                    case "PNGUS-Repricing":
                                        repricingEntity.PNGUS_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 271:
                                    case "PNGUSEPISODIC":
                                        repricingEntity.PNGUSEPISODIC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 272:
                                    case "PNGUSEPISODIC-Repricing":
                                        repricingEntity.PNGUSEPISODIC_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 273:
                                    case "RBUS":
                                        repricingEntity.RBUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 274:
                                    case "RBUS-Repricing":
                                        repricingEntity.RBUS_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 275:
                                    case "RE-XSUITE-DEMO":
                                        repricingEntity.RE_XSUITE_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 276:
                                    case "RE-XSUITE-DEMO-Repricing":
                                        repricingEntity.RE_XSUITE_DEMO_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 277:
                                    case "REPNGCN-DEMO":
                                        repricingEntity.REPNGCN_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 278:
                                    case "REPNGCN-DEMO-Repricing":
                                        repricingEntity.REPNGCN_DEMO_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 279:
                                    case "RI-DEMO":
                                        repricingEntity.RI_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 280:
                                    case "RI-DEMO-Repricing":
                                        repricingEntity.RI_DEMO_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 281:
                                    case "RI-DIAGEOAU":
                                        repricingEntity.RI_DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 282:
                                    case "RI-DIAGEOAU-Repricing":
                                        repricingEntity.RI_DIAGEOAU_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 283:
                                    case "RIALCBEVUK-PROD":
                                        repricingEntity.RIALCBEVUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 284:
                                    case "RIALCBEVUK-PROD-Repricing":
                                        repricingEntity.RIALCBEVUK_PROD_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 285:
                                    case "RICOFFEEUS":
                                        repricingEntity.RICOFFEEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 286:
                                    case "RICOFFEEUS-Repricing":
                                        repricingEntity.RICOFFEEUS_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 287:
                                    case "RINIELSENUS":
                                        repricingEntity.RINIELSENUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 288:
                                    case "RINIELSENUS-Repricing":
                                        repricingEntity.RINIELSENUS_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 289:
                                    case "RIPETCAREUK-PROD":
                                        repricingEntity.RIPETCAREUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 290:
                                    case "RIPETCAREUK-PROD-Repricing":
                                        repricingEntity.RIPETCAREUK_PROD_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 291:
                                    case "RIUS":
                                        repricingEntity.RIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 292:
                                    case "RIUS-Repricing":
                                        repricingEntity.RIUS_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 293:
                                    case "RIUS-DEV":
                                        repricingEntity.RIUS_DEV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 294:
                                    case "RIUS-DEV-Repricing":
                                        repricingEntity.RIUS_DEV_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 295:
                                    case "RNBDE":
                                        repricingEntity.RNBDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 296:
                                    case "RNBDE-Repricing":
                                        repricingEntity.RNBDE_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 297:
                                    case "SMARTCOOLER-POC2":
                                        repricingEntity.SMARTCOOLER_POC2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 298:
                                    case "SMARTCOOLER-POC2-Repricing":
                                        repricingEntity.SMARTCOOLER_POC2_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 299:
                                    case "SMARTCOOLER-TRN":
                                        repricingEntity.SMARTCOOLER_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 300:
                                    case "SMARTCOOLER-TRN-Repricing":
                                        repricingEntity.SMARTCOOLER_TRN_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 301:
                                    case "SMARTCOOLER2-TRN":
                                        repricingEntity.SMARTCOOLER2_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 302:
                                    case "SMARTCOOLER2-TRN-Repricing":
                                        repricingEntity.SMARTCOOLER2_TRN_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 303:
                                    case "SOLARBR":
                                        repricingEntity.SOLARBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 304:
                                    case "SOLARBR-Repricing":
                                        repricingEntity.SOLARBR_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 305:
                                    case "STATIC-CAMERA-DEMO":
                                        repricingEntity.STATIC_CAMERA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 306:
                                    case "STATIC-CAMERA-DEMO-Repricing":
                                        repricingEntity.STATIC_CAMERA_DEMO_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 307:
                                    case "SWIRECN":
                                        repricingEntity.SWIRECN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 308:
                                    case "SWIRECN-Repricing":
                                        repricingEntity.SWIRECN_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 309:
                                    case "SWIREREDCN":
                                        repricingEntity.SWIREREDCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 310:
                                    case "SWIREREDCN-Repricing":
                                        repricingEntity.SWIREREDCN_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 311:
                                    case "TNUVAIL":
                                        repricingEntity.TNUVAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 312:
                                    case "TNUVAIL-Repricing":
                                        repricingEntity.TNUVAIL_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 313:
                                    case "TRAXDEMO-TS-PROD":
                                        repricingEntity.TRAXDEMO_TS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 314:
                                    case "TRAXDEMO-TS-PROD-Repricing":
                                        repricingEntity.TRAXDEMO_TS_PROD_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 315:
                                    case "TWEAU":
                                        repricingEntity.TWEAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 316:
                                    case "TWEAU-Repricing":
                                        repricingEntity.TWEAU_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 317:
                                    case "RI-DEMO2":
                                        repricingEntity.RI_DEMO2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 318:
                                    case "RI-DEMO2-Repricing":
                                        repricingEntity.RI_DEMO2_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 319:
                                    case "COMPASSCCH-SAND":
                                        repricingEntity.COMPASSCCH_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 320:
                                    case "COMPASSCCH-SAND-Repricing":
                                        repricingEntity.COMPASSCCH_SAND_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 321:
                                    case "LAVAZZAIT-SAND":
                                        repricingEntity.LAVAZZAIT_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 322:
                                    case "LAVAZZAIT-SAND-Repricing":
                                        repricingEntity.LAVAZZAIT_SAND_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 323:
                                    case "INBEVUS-STG":
                                        repricingEntity.INBEVUS_STG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 324:
                                    case "INBEVUS-STG-Repricing":
                                        repricingEntity.INBEVUS_STG_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 325:
                                    case "LAVAZZAFR-SAND":
                                        repricingEntity.LAVAZZAFR_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 326:
                                    case "LAVAZZAFR-SAND-Repricing":
                                        repricingEntity.LAVAZZAFR_SAND_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 327:
                                    case "INBEVBE-SAND":
                                        repricingEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 328:
                                    case "INBEVBE-SAND-Repricing":
                                        repricingEntity.INBEVBE_SAND_Repricing = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;




                                    //NEW Columns Addition
                                    //case 333:
                                    case "B2BRU":
                                        repricingEntity.B2BRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 334:
                                    case "BRMUS":
                                        repricingEntity.BRMUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 335:
                                    case "CBCIL":
                                        repricingEntity.CBCIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 336:
                                    case "CCCOOLERMX":
                                        repricingEntity.CCCOOLERMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 337:
                                    case "DIAGEOAR":
                                        repricingEntity.DIAGEOAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 338:
                                    case "DIAGEOBENELUX":
                                        repricingEntity.DIAGEOBENELUX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 339:
                                    case "DIAGEOCH":
                                        repricingEntity.DIAGEOCH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 340:
                                    case "DIAGEOGA":
                                        repricingEntity.DIAGEOGA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 341:
                                    case "DIAGEOGTR":
                                        repricingEntity.DIAGEOGTR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 342:
                                    case "DIAGEONORDICS":
                                        repricingEntity.DIAGEONORDICS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 343:
                                    case "DIAGEOUS":
                                        repricingEntity.DIAGEOUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 344:
                                    case "FERREROEXTIT":
                                        repricingEntity.FERREROEXTIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 345:
                                    case "GOOGLEHK":
                                        repricingEntity.GOOGLEHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 346:
                                    case "HEINEKENPILOTCN":
                                        repricingEntity.HEINEKENPILOTCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 347:
                                    case "IMBO":
                                        repricingEntity.IMBO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 348:
                                    case "INBEVCI":
                                        repricingEntity.INBEVCI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 349:
                                    case "INBEVCNTT":
                                        repricingEntity.INBEVCNTT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 350:
                                    case "INBEVCO":
                                        repricingEntity.INBEVCO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 351:
                                    case "INBEVZA":
                                        repricingEntity.INBEVZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 352:
                                    case "INORU":
                                        repricingEntity.INORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 353:
                                    case "JJSP":
                                        repricingEntity.JJSP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 354:
                                    case "JNJES":
                                        repricingEntity.JNJES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 355:
                                    case "JNJUK":
                                        repricingEntity.JNJUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 356:
                                    case "JRIJP":
                                        repricingEntity.JRIJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 357:
                                    case "KELLOGSUSPOC":
                                        repricingEntity.KELLOGSUSPOC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 358:
                                    case "KRAFTUS":
                                        repricingEntity.KRAFTUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 359:
                                    case "MARS-CHOCO-RU":
                                        repricingEntity.MARS_CHOCO_RU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 360:
                                    case "MHUK":
                                        repricingEntity.MHUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 361:
                                    case "MILLERCOORS":
                                        repricingEntity.MILLERCOORS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 362:
                                    case "MOLSONONTRADEUK":
                                        repricingEntity.MOLSONONTRADEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 363:
                                    case "MYCHEMISTAU":
                                        repricingEntity.MYCHEMISTAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 364:
                                    case "NESTLEROAMLERUK":
                                        repricingEntity.NESTLEROAMLERUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 365:
                                    case "NRF2018":
                                        repricingEntity.NRF2018 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 366:
                                    case "PENAFLORAR":
                                        repricingEntity.PENAFLORAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 367:
                                    case "PMIUA":
                                        repricingEntity.PMIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 368:
                                    case "PNGAMERICA":
                                        repricingEntity.PNGAMERICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 369:
                                    case "PNGRO":
                                        repricingEntity.PNGRO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 370:
                                    case "RBAU":
                                        repricingEntity.RBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 371:
                                    case "RBCA":
                                        repricingEntity.RBCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 372:
                                    case "RBDK":
                                        repricingEntity.RBDK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 373:
                                    case "RBMANUAL":
                                        repricingEntity.RBMANUAL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 374:
                                    case "RINIELSENRU-MARS":
                                        repricingEntity.RINIELSENRU_MARS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 375:
                                    case "RINIELSENUSQI":
                                        repricingEntity.RINIELSENUSQI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 376:
                                    case "RIPANELCN":
                                        repricingEntity.RIPANELCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 377:
                                    case "RISPARKWINEDE":
                                        repricingEntity.RISPARKWINEDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 378:
                                    case "SANOFIAE":
                                        repricingEntity.SANOFIAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 379:
                                    case "SANOFIAU":
                                        repricingEntity.SANOFIAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 380:
                                    case "SANOFIHK":
                                        repricingEntity.SANOFIHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 381:
                                    case "SANOFIKH":
                                        repricingEntity.SANOFIKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 382:
                                    case "SANOFINZ":
                                        repricingEntity.SANOFINZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 383:
                                    case "SANOFIRU":
                                        repricingEntity.SANOFIRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 384:
                                    case "SANOFITR":
                                        repricingEntity.SANOFITR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 385:
                                    case "SANOFIUA":
                                        repricingEntity.SANOFIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 386:
                                    case "SHUFERSALIL":
                                        repricingEntity.SHUFERSALIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 387:
                                    case "SUNTORYJP":
                                        repricingEntity.SUNTORYJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 388:
                                    case "TESCOTH":
                                        repricingEntity.TESCOTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 389:
                                    case "TESCOUK":
                                        repricingEntity.TESCOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 390:
                                    case "TRAXROBOT":
                                        repricingEntity.TRAXROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 391:
                                    case "XSUITE-SHOWCASE":
                                        repricingEntity.XSUITE_SHOWCASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;


                                    //case 392:
                                    case "ABIUS":
                                        repricingEntity.ABIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 393:
                                    case "BADGERROBOT":
                                        repricingEntity.BADGERROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 394:
                                    case "CUBAU":
                                        repricingEntity.CUBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 395:
                                    case "DIAGEORU":
                                        repricingEntity.DIAGEORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 396:
                                    case "GFKFR":
                                        repricingEntity.GFKFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 397:
                                    case "JNJIT":
                                        repricingEntity.JNJIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 398:
                                    case "LIGHTTRAX":
                                        repricingEntity.LIGHTTRAX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 399:
                                    case "LIGHTTRAXOFFLINE":
                                        repricingEntity.LIGHTTRAXOFFLINE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 400:
                                    case "RINIELSENFR":
                                        repricingEntity.RINIELSENFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 401:
                                    case "SANOFIKZ":
                                        repricingEntity.SANOFIKZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 402:
                                    case "SANOFILB":
                                        repricingEntity.SANOFILB = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 403:
                                    case "SANOFISA":
                                        repricingEntity.SANOFISA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 404:
                                    case "SANOFIZA":
                                        repricingEntity.SANOFIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 405:
                                    case "WATSONSHK":
                                        repricingEntity.WATSONSHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 406:
                                    case "KELLOGGUS":
                                        repricingEntity.KELLOGGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 407:
                                    case "TSINGTAOBEERCN":
                                        repricingEntity.TSINGTAOBEERCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    default: break;


                                    #endregion
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        Response.Redirect("error.aspx");
                        throw ex;
                    }
                }

                if (globalCenterName == center && rowNumber > 1)
                {
                    repricingEntity.ImportedDate = GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim());//GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    repricingEntity.ImportedYear = repricingEntity.ImportedDate.Substring(0, 6);
                    //pricingprobesEntity.ImportTime = GeneralUtility.ConvertSystemTimeFormat(System.DateTime.Now);
                    repricingEntity.CreatedDate = GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    repricingEntity.CreatedBy = userEntity.ID;


                    repricinglist.Add(repricingEntity);
                }

                #endregion
            }
        }

        private void Scenes_BindBusiness(List<ScenesEntity> sceneslist, ExcelWorksheet ws, string center)
        {
            var userEntity = (UserEntity)Session["ID"];
            for (var rowNumber = 1; rowNumber <= ws.Dimension.End.Row; rowNumber++)
            {
                var scenesEntity = new ScenesEntity();

                scenesEntity.ID = GeneralUtility.GeneratedKey;

                #region Populate Excel data

                for (var colNumber = 1; colNumber <= ws.Dimension.End.Column; colNumber++)
                {
                    var columnName1 = ws.Cells[1, colNumber].Value.ToString().Trim();
                    var columnName2 = string.Empty;
                    string columnName3 = string.Empty;
                    if (columnName1 == "Scenes")
                    {
                        columnName2 = ws.Cells[1, colNumber - 1].Value.ToString();
                        columnName3 = columnName2 + "-" + columnName1;
                    }
                    else
                    {
                        columnName3 = columnName1;
                    }

                    try
                    {
                        if (true && rowNumber > 1)
                        {
                             globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                             if (globalCenterName == center)
                             {
                                 switch (columnName3)
                                 {
                                     #region
                                     //case 1:
                                     case "QAT":
                                         scenesEntity.QAT = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 2:
                                     case "Center":
                                         scenesEntity.Center = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 3:
                                     case "Total Scenes":
                                         scenesEntity.TotalScenes = Convert.ToInt32(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     case "Avg seconds per Scenes":
                                         //case 4:
                                         scenesEntity.AvgsecondsperScenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 5:
                                     case "ABICA":
                                         scenesEntity.ABICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 6:

                                     case "ABICA-Scenes":
                                         scenesEntity.ABICA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 7:
                                     case "ABITAMSUS-PROD":
                                         scenesEntity.ABITAMSUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 8:
                                     case "ABITAMSUS-PROD-Scenes":
                                         scenesEntity.ABITAMSUS_PROD_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 9:
                                     case "AMERICAS-DEMO":
                                         scenesEntity.AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 10:
                                     case "AMERICAS-DEMO-Scenes":
                                         scenesEntity.AMERICAS_DEMO_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 11:
                                     case "BATRU":
                                         scenesEntity.BATRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 12:
                                     case "BATRU-Scenes":
                                         scenesEntity.BATRU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 13:
                                     case "BIKR":
                                         scenesEntity.BIKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 14:
                                     case "BIKR-Scenes":
                                         scenesEntity.BIKR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 15:
                                     case "BIMY":
                                         scenesEntity.BIMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 16:
                                     case "BIMY-Scenes":
                                         scenesEntity.BIMY_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 17:
                                     case "BIPH":
                                         scenesEntity.BIPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 18:
                                     case "BIPH-Scenes":
                                         scenesEntity.BIPH_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 19:
                                     case "BISEASK":
                                         scenesEntity.BISEASK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 20:
                                     case "BISEASK-Scenes":
                                         scenesEntity.BISEASK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 21:
                                     case "BITH":
                                         scenesEntity.BITH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 22:
                                     case "BITH-Scenes":
                                         scenesEntity.BITH_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 23:
                                     case "BIVN":
                                         scenesEntity.BIVN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 24:
                                     case "BIVN-Scenes":
                                         scenesEntity.BIVN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 25:
                                     case "BPAU":
                                         scenesEntity.BPAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 26:
                                     case "BPAU-Scenes":
                                         scenesEntity.BPAU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 27:
                                     case "BRODMANN":
                                         scenesEntity.BRODMANN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 28:
                                     case "BRODMANN-Scenes":
                                         scenesEntity.BRODMANN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 29:
                                     case "CARREFOURAR":
                                         scenesEntity.CARREFOURAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 30:
                                     case "CARREFOURAR-Scenes":
                                         scenesEntity.CARREFOURAR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 31:
                                     case "CCAAU":
                                         scenesEntity.CCAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 32:
                                     case "CCAAU-Scenes":
                                         scenesEntity.CCAAU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 33:
                                     case "CCABIZA":
                                         scenesEntity.CCABIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 34:
                                     case "CCABIZA-Scenes":
                                         scenesEntity.CCABIZA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 35:
                                     case "CCANZ":
                                         scenesEntity.CCANZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 36:
                                     case "CCANZ-Scenes":
                                         scenesEntity.CCANZ_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 37:
                                     case "CCBOTTLERSUS":
                                         scenesEntity.CCBOTTLERSUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 38:
                                     case "CCBOTTLERSUS-Scenes":
                                         scenesEntity.CCBOTTLERSUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 39:
                                     case "CCBR-PROD":
                                         scenesEntity.CCBR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 40:
                                     case "CCBR-PROD-Scenes":
                                         scenesEntity.CCBR_PROD_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 41:
                                     case "CCJP":
                                         scenesEntity.CCJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 42:
                                     case "CCJP-Scenes":
                                         scenesEntity.CCJP_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 43:
                                     case "CCKH":
                                         scenesEntity.CCKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 44:
                                     case "CCKH-Scenes":
                                         scenesEntity.CCKH_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 45:
                                     case "CCKR":
                                         scenesEntity.CCKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 46:
                                     case "CCKR-Scenes":
                                         scenesEntity.CCKR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 47:
                                     case "CCMY":
                                         scenesEntity.CCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 48:
                                     case "CCMY-Scenes":
                                         scenesEntity.CCMY_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 49:
                                     case "CCPH":
                                         scenesEntity.CCPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 50:
                                     case "CCPH-Scenes":
                                         scenesEntity.CCPH_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 51:
                                     case "CCRPR-PROD":
                                         scenesEntity.CCRPR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 52:
                                     case "CCRPR-PROD-Scenes":
                                         scenesEntity.CCRPR_PROD_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 53:
                                     case "CCRU":
                                         scenesEntity.CCRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 54:
                                     case "CCRU-Scenes":
                                         scenesEntity.CCRU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 55:
                                     case "CCTH":
                                         scenesEntity.CCTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 56:
                                     case "CCTH-Scenes":
                                         scenesEntity.CCTH_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 57:
                                     case "CCTH-UAT":
                                         scenesEntity.CCTH_UAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 58:
                                     case "CCTH-UAT-Scenes":
                                         scenesEntity.CCTH_UAT_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 59:
                                     case "CCTRADMX":
                                         scenesEntity.CCTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 60:
                                     case "CCTRADMX-Scenes":
                                         scenesEntity.CCTRADMX_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 61:
                                     case "CCUS":
                                         scenesEntity.CCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 62:
                                     case "CCUS-Scenes":
                                         scenesEntity.CCUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 63:
                                     case "CCZA":
                                         scenesEntity.CCZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 64:
                                     case "CCZA-Scenes":
                                         scenesEntity.CCZA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 65:
                                     case "CEREBOSTH":
                                         scenesEntity.CEREBOSTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 66:
                                     case "CEREBOSTH-Scenes":
                                         scenesEntity.CEREBOSTH_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 67:
                                     case "CROWDSOURCE":
                                         scenesEntity.CROWDSOURCE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 68:
                                     case "CROWDSOURCE-Scenes":
                                         scenesEntity.CROWDSOURCE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 69:
                                     case "DIAGEOAU":
                                         scenesEntity.DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 70:
                                     case "DIAGEOAU-Scenes":
                                         scenesEntity.DIAGEOAU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 71:
                                     case "DIAGEOBR":
                                         scenesEntity.DIAGEOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 72:
                                     case "DIAGEOBR-Scenes":
                                         scenesEntity.DIAGEOBR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 73:
                                     case "DIAGEOGR":
                                         scenesEntity.DIAGEOGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 74:
                                     case "DIAGEOGR-Scenes":
                                         scenesEntity.DIAGEOGR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 75:
                                     case "DIAGEOIE":
                                         scenesEntity.DIAGEOIE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 76:
                                     case "DIAGEOIE-Scenes":
                                         scenesEntity.DIAGEOIE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 77:
                                     case "DIAGEOKE":
                                         scenesEntity.DIAGEOKE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 78:
                                     case "DIAGEOKE-Scenes":
                                         scenesEntity.DIAGEOKE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 79:
                                     case "DIAGEOMX":
                                         scenesEntity.DIAGEOMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 80:
                                     case "DIAGEOMX-Scenes":
                                         scenesEntity.DIAGEOMX_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 81:
                                     case "DIAGEOPT":
                                         scenesEntity.DIAGEOPT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 82:
                                     case "DIAGEOPT-Scenes":
                                         scenesEntity.DIAGEOPT_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 83:
                                     case "DIAGEOTW":
                                         scenesEntity.DIAGEOTW = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 84:
                                     case "DIAGEOTW-Scenes":
                                         scenesEntity.DIAGEOTW_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 85:
                                     case "DIAGEOUK":
                                         scenesEntity.DIAGEOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 86:
                                     case "DIAGEOUK-Scenes":
                                         scenesEntity.DIAGEOUK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 87:
                                     case "DIAGEOZA":
                                         scenesEntity.DIAGEOZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 88:
                                     case "DIAGEOZA-Scenes":
                                         scenesEntity.DIAGEOZA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 89:
                                     case "EMEA-DEMO":
                                         scenesEntity.EMEA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 90:
                                     case "EMEA-DEMO-Scenes":
                                         scenesEntity.EMEA_DEMO_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 91:
                                     case "FERREROIT":
                                         scenesEntity.FERREROIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 92:
                                     case "FERREROIT-Scenes":
                                         scenesEntity.FERREROIT_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 93:
                                     case "GILLETTEUS":
                                         scenesEntity.GILLETTEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 94:
                                     case "GILLETTEUS-Scenes":
                                         scenesEntity.GILLETTEUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 95:
                                     case "GOOGLEUS":
                                         scenesEntity.GOOGLEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 96:
                                     case "GOOGLEUS-Scenes":
                                         scenesEntity.GOOGLEUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 97:
                                     case "HBCDE":
                                         scenesEntity.HBCDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 98:
                                     case "HBCDE-Scenes":
                                         scenesEntity.HBCDE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 99:
                                     case "HEINEKENCN":
                                         scenesEntity.HEINEKENCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 100:
                                     case "HEINEKENCN-Scenes":
                                         scenesEntity.HEINEKENCN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 101:
                                     case "HEINEKENUS-PROD":
                                         scenesEntity.HEINEKENUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 102:
                                     case "HEINEKENUS-PROD-Scenes":
                                         scenesEntity.HEINEKENUS_PROD_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 103:
                                     case "HEINZCR":
                                         scenesEntity.HEINZCR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 104:
                                     case "HEINZCR-Scenes":
                                         scenesEntity.HEINZCR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 105:
                                     case "INBEVAR":
                                         scenesEntity.INBEVAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 106:
                                     case "INBEVAR-Scenes":
                                         scenesEntity.INBEVAR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 107:
                                     case "INBEVBE":
                                         scenesEntity.INBEVBE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 108:
                                     case "INBEVBE-Scenes":
                                         scenesEntity.INBEVBE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 109:
                                     //case "INBEVBE-SAND":
                                     //    scenesEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     ////case 110:
                                     //case "INBEVBE-SAND-Scenes":
                                     //    scenesEntity.INBEVBE_SAND_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 111:
                                     case "INBEVBR":
                                         scenesEntity.INBEVBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 112:
                                     case "INBEVBR-Scenes":
                                         scenesEntity.INBEVBR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 113:
                                     case "INBEVBR_ONTRADE":
                                         scenesEntity.INBEVBR_ONTRADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 114:
                                     case "INBEVBR_ONTRADE-Scenes":
                                         scenesEntity.INBEVBR_ONTRADE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 115:
                                     case "INBEVCL":
                                         scenesEntity.INBEVCL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 116:
                                     case "INBEVCL-Scenes":
                                         scenesEntity.INBEVCL_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 117:
                                     case "INBEVCN":
                                         scenesEntity.INBEVCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 118:
                                     case "INBEVCN-Scenes":
                                         scenesEntity.INBEVCN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 119:
                                     case "INBEVCOOLERAR":
                                         scenesEntity.INBEVCOOLERAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 120:
                                     case "INBEVCOOLERAR-Scenes":
                                         scenesEntity.INBEVCOOLERAR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 121:
                                     case "INBEVCOOLERBR":
                                         scenesEntity.INBEVCOOLERBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 122:
                                     case "INBEVCOOLERBR-Scenes":
                                         scenesEntity.INBEVCOOLERBR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 123:
                                     case "INBEVCOOLERUS":
                                         scenesEntity.INBEVCOOLERUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 124:
                                     case "INBEVCOOLERUS-Scenes":
                                         scenesEntity.INBEVCOOLERUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 125:
                                     case "INBEVFR":
                                         scenesEntity.INBEVFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 126:
                                     case "INBEVFR-Scenes":
                                         scenesEntity.INBEVFR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 127:
                                     case "INBEVLU":
                                         scenesEntity.INBEVLU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 128:
                                     case "INBEVLU-Scenes":
                                         scenesEntity.INBEVLU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 129:
                                     case "INBEVLU-SAND":
                                         scenesEntity.INBEVLU_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 130:
                                     case "INBEVLU-SAND-Scenes":
                                         scenesEntity.INBEVLU_SAND_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 131:
                                     case "INBEVMX":
                                         scenesEntity.INBEVMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 132:
                                     case "INBEVMX-Scenes":
                                         scenesEntity.INBEVMX_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 133:
                                     case "INBEVNL":
                                         scenesEntity.INBEVNL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 134:
                                     case "INBEVNL-Scenes":
                                         scenesEntity.INBEVNL_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 135:
                                     case "INBEVNL-SAND":
                                         scenesEntity.INBEVNL_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 136:
                                     case "INBEVNL-SAND-Scenes":
                                         scenesEntity.INBEVNL_SAND_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 137:
                                     case "INBEVPY":
                                         scenesEntity.INBEVPY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 138:
                                     case "INBEVPY-Scenes":
                                         scenesEntity.INBEVPY_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 139:
                                     case "INBEVTRADMX":
                                         scenesEntity.INBEVTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 140:
                                     case "INBEVTRADMX-Scenes":
                                         scenesEntity.INBEVTRADMX_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 141:
                                     case "INBEVUS":
                                         scenesEntity.INBEVUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 142:
                                     case "INBEVUS-Scenes":
                                         scenesEntity.INBEVUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 143:
                                     case "JTIUA":
                                         scenesEntity.JTIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 144:
                                     case "JTIUA-Scenes":
                                         scenesEntity.JTIUA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 145:
                                     case "KCMY":
                                         scenesEntity.KCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 146:
                                     case "KCMY-Scenes":
                                         scenesEntity.KCMY_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 147:
                                     case "KCUS":
                                         scenesEntity.KCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 148:
                                     case "KCUS-Scenes":
                                         scenesEntity.KCUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 149:
                                     case "KEURIGCA":
                                         scenesEntity.KEURIGCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 150:
                                     case "KEURIGCA-Scenes":
                                         scenesEntity.KEURIGCA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////// just only finished 150 //////////////
                                     //case 151:
                                     case "LABATTPLNOPTCA":
                                         scenesEntity.LABATTPLNOPTCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 152:
                                     case "LABATTPLNOPTCA-Scenes":
                                         scenesEntity.LABATTPLNOPTCA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 153:
                                     case "LAVAZZAAT":
                                         scenesEntity.LAVAZZAAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 154:
                                     case "LAVAZZAAT-Scenes":
                                         scenesEntity.LAVAZZAAT_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 155:
                                     case "LAVAZZAAU":
                                         scenesEntity.LAVAZZAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 156:
                                     case "LAVAZZAAU-Scenes":
                                         scenesEntity.LAVAZZAAU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 157:
                                     case "LAVAZZABE":
                                         scenesEntity.LAVAZZABE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 158:
                                     case "LAVAZZABE-Scenes":
                                         scenesEntity.LAVAZZABE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 159:
                                     case "LAVAZZABG":
                                         scenesEntity.LAVAZZABG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 160:
                                     case "LAVAZZABG-Scenes":
                                         scenesEntity.LAVAZZABG_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 161:
                                     case "LAVAZZACA":
                                         scenesEntity.LAVAZZACA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 162:
                                     case "LAVAZZACA-Scenes":
                                         scenesEntity.LAVAZZACA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 163:
                                     case "LAVAZZACH":
                                         scenesEntity.LAVAZZACH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 164:
                                     case "LAVAZZACH-Scenes":
                                         scenesEntity.LAVAZZACH_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 165:
                                     case "LAVAZZACL":
                                         scenesEntity.LAVAZZACL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 166:
                                     case "LAVAZZACL-Scenes":
                                         scenesEntity.LAVAZZACL_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 167:
                                     case "LAVAZZACN":
                                         scenesEntity.LAVAZZACN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 168:
                                     case "LAVAZZACN-Scenes":
                                         scenesEntity.LAVAZZACN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 169:
                                     case "LAVAZZACZ":
                                         scenesEntity.LAVAZZACZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 170:
                                     case "LAVAZZACZ-Scenes":
                                         scenesEntity.LAVAZZACZ_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 171:
                                     case "LAVAZZADE":
                                         scenesEntity.LAVAZZADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 172:
                                     case "LAVAZZADE-Scenes":
                                         scenesEntity.LAVAZZADE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 173:
                                     case "LAVAZZADK":
                                         scenesEntity.LAVAZZADK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 174:
                                     case "LAVAZZADK-Scenes":
                                         scenesEntity.LAVAZZADK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 175:
                                     case "LAVAZZAEE":
                                         scenesEntity.LAVAZZAEE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 176:
                                     case "LAVAZZAEE-Scenes":
                                         scenesEntity.LAVAZZAEE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 177:
                                     case "LAVAZZAES":
                                         scenesEntity.LAVAZZAES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 178:
                                     case "LAVAZZAES-Scenes":
                                         scenesEntity.LAVAZZAES_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 179:
                                     case "LAVAZZAFR":
                                         scenesEntity.LAVAZZAFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 180:
                                     case "LAVAZZAFR-Scenes":
                                         scenesEntity.LAVAZZAFR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 181:
                                     case "LAVAZZAGR":
                                         scenesEntity.LAVAZZAGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 182:
                                     case "LAVAZZAGR-Scenes":
                                         scenesEntity.LAVAZZAGR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 183:
                                     case "LAVAZZAHK":
                                         scenesEntity.LAVAZZAHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 184:
                                     case "LAVAZZAHK-Scenes":
                                         scenesEntity.LAVAZZAHK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 185:
                                     case "LAVAZZAHR":
                                         scenesEntity.LAVAZZAHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 186:
                                     case "LAVAZZAHR-Scenes":
                                         scenesEntity.LAVAZZAHR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 187:
                                     case "LAVAZZAIL":
                                         scenesEntity.LAVAZZAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 188:
                                     case "LAVAZZAIL-Scenes":
                                         scenesEntity.LAVAZZAIL_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 189:
                                     case "LAVAZZAIT":
                                         scenesEntity.LAVAZZAIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 190:
                                     case "LAVAZZAIT-Scenes":
                                         scenesEntity.LAVAZZAIT_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 191:
                                     case "LAVAZZAJP":
                                         scenesEntity.LAVAZZAJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 192:
                                     case "LAVAZZAJP-Scenes":
                                         scenesEntity.LAVAZZAJP_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 193:
                                     case "LAVAZZAKR":
                                         scenesEntity.LAVAZZAKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 194:
                                     case "LAVAZZAKR-Scenes":
                                         scenesEntity.LAVAZZAKR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 195:
                                     case "LAVAZZALT":
                                         scenesEntity.LAVAZZALT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 196:
                                     case "LAVAZZALT-Scenes":
                                         scenesEntity.LAVAZZALT_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 197:
                                     case "LAVAZZALU":
                                         scenesEntity.LAVAZZALU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 198:
                                     case "LAVAZZALU-Scenes":
                                         scenesEntity.LAVAZZALU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 199:
                                     case "LAVAZZALV":
                                         scenesEntity.LAVAZZALV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 200:
                                     case "LAVAZZALV-Scenes":
                                         scenesEntity.LAVAZZALV_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 201:
                                     case "LAVAZZAMA":
                                         scenesEntity.LAVAZZAMA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 202:
                                     case "LAVAZZAMA-Scenes":
                                         scenesEntity.LAVAZZAMA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 203:
                                     case "LAVAZZANL":
                                         scenesEntity.LAVAZZANL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 204:
                                     case "LAVAZZANL-Scenes":
                                         scenesEntity.LAVAZZANL_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 205:
                                     case "LAVAZZAPL":
                                         scenesEntity.LAVAZZAPL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 206:
                                     case "LAVAZZAPL-Scenes":
                                         scenesEntity.LAVAZZAPL_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 207:
                                     case "LAVAZZARO":
                                         scenesEntity.LAVAZZARO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 208:
                                     case "LAVAZZARO-Scenes":
                                         scenesEntity.LAVAZZARO_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 209:
                                     case "LAVAZZARU":
                                         scenesEntity.LAVAZZARU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 210:
                                     case "LAVAZZARU-Scenes":
                                         scenesEntity.LAVAZZARU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 211:
                                     case "LAVAZZASA":
                                         scenesEntity.LAVAZZASA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 212:
                                     case "LAVAZZASA-Scenes":
                                         scenesEntity.LAVAZZASA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 213:
                                     case "LAVAZZASE":
                                         scenesEntity.LAVAZZASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 214:
                                     case "LAVAZZASE-Scenes":
                                         scenesEntity.LAVAZZASE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 215:
                                     case "LAVAZZASG":
                                         scenesEntity.LAVAZZASG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 216:
                                     case "LAVAZZASG-Scenes":
                                         scenesEntity.LAVAZZASG_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 217:
                                     case "LAVAZZAUAE":
                                         scenesEntity.LAVAZZAUAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 218:
                                     case "LAVAZZAUAE-Scenes":
                                         scenesEntity.LAVAZZAUAE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 219:
                                     case "LAVAZZAUK":
                                         scenesEntity.LAVAZZAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 220:
                                     case "LAVAZZAUK-Scenes":
                                         scenesEntity.LAVAZZAUK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 221:
                                     case "LAVAZZAUS":
                                         scenesEntity.LAVAZZAUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 222:
                                     case "LAVAZZAUS-Scenes":
                                         scenesEntity.LAVAZZAUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 223:

                                     case "LAVAZZAZA":
                                         scenesEntity.LAVAZZAZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     case "LAVAZZAZA-Scenes":
                                         scenesEntity.LAVAZZAZA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 225:
                                     case "LRSUK":
                                         scenesEntity.LRSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 226:
                                     case "LRSUK-Scenes":
                                         scenesEntity.LRSUK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 227:
                                     case "MARSBR":
                                         scenesEntity.MARSBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 228:
                                     case "MARSBR-Scenes":
                                         scenesEntity.MARSBR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 229:
                                     case "MARSIN":
                                         scenesEntity.MARSIN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 230:
                                     case "MARSIN-Scenes":
                                         scenesEntity.MARSIN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 231:
                                     case "MARSIN-OLD":
                                         scenesEntity.MARSIN_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 232:
                                     case "MARSIN-OLD-Scenes":
                                         scenesEntity.MARSIN_OLD_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 233:
                                     case "MARSRU-PROD":
                                         scenesEntity.MARSRU_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 234:
                                     case "MARSRU-PROD-Scenes":
                                         scenesEntity.MARSRU_PROD_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 235:
                                     case "MAYORAID":
                                         scenesEntity.MAYORAID = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 236:
                                     case "MAYORAID-Scenes":
                                         scenesEntity.MAYORAID_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 237:
                                     case "MJNCN":
                                         scenesEntity.MJNCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 238:
                                     case "MJNCN-Scenes":
                                         scenesEntity.MJNCN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 239:
                                     case "MOLSONCOOLERHN":
                                         scenesEntity.MOLSONCOOLERHN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 240:
                                     case "MOLSONCOOLERHN-Scenes":
                                         scenesEntity.MOLSONCOOLERHN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 241:
                                     case "MOLSONCOOLERHR":
                                         scenesEntity.MOLSONCOOLERHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 242:
                                     case "MOLSONCOOLERHR-Scenes":
                                         scenesEntity.MOLSONCOOLERHR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 243:
                                     case "MOLSONCOORSUK":
                                         scenesEntity.MOLSONCOORSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 244:
                                     case "MOLSONCOORSUK-Scenes":
                                         scenesEntity.MOLSONCOORSUK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 245:
                                     case "NESTLEUK":
                                         scenesEntity.NESTLEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 246:
                                     case "NESTLEUK-Scenes":
                                         scenesEntity.NESTLEUK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 247:
                                     case "NIVEAUK":
                                         scenesEntity.NIVEAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 248:
                                     case "NIVEAUK-Scenes":
                                         scenesEntity.NIVEAUK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 249:
                                     case "NRF2017-DEMO":
                                         scenesEntity.NRF2017_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 250:
                                     case "NRF2017-DEMO-Scenes":
                                         scenesEntity.NRF2017_DEMO_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 251:
                                     case "ONE-AMERICAS-DEMO":
                                         scenesEntity.ONE_AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 252:                                  
                                     case "ONE-AMERICAS-DEMO-Scenes":
                                         scenesEntity.ONE_AMERICAS_DEMO_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 253:
                                     case "ONE-APAC-DEMO":
                                         scenesEntity.ONE_APAC_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 254:
                                     case "ONE-APAC-DEMO-Scenes":
                                         scenesEntity.ONE_APAC_DEMO_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 255:
                                     case "PEPSICOBR":
                                         scenesEntity.PEPSICOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 256:
                                     case "PEPSICOBR-Scenes":
                                         scenesEntity.PEPSICOBR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 257:
                                     case "PNGAU":
                                         scenesEntity.PNGAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 258:
                                     case "PNGAU-Scenes":
                                         scenesEntity.PNGAU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 259:
                                     case "PNGAU-OLD":
                                         scenesEntity.PNGAU_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 260:
                                     case "PNGAU-OLD-Scenes":
                                         scenesEntity.PNGAU_OLD_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 261:
                                     case "PNGCAREUS":
                                         scenesEntity.PNGCAREUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 262:
                                     case "PNGCAREUS-Scenes":
                                         scenesEntity.PNGCAREUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 263:
                                     case "PNGCN-PROD":
                                         scenesEntity.PNGCN_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 264:
                                     case "PNGCN-PROD-Scenes":
                                         scenesEntity.PNGCN_PROD_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 265:
                                     case "PNGJP":
                                         scenesEntity.PNGJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 266:
                                     case "PNGJP-Scenes":
                                         scenesEntity.PNGJP_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 267:
                                     case "PNGJP-OLD":
                                         scenesEntity.PNGJP_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 268:
                                     case "PNGJP-OLD-Scenes":
                                         scenesEntity.PNGJP_OLD_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 269:
                                     case "PNGUS":
                                         scenesEntity.PNGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 270:
                                     case "PNGUS-Scenes":
                                         scenesEntity.PNGUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 271:
                                     case "PNGUSEPISODIC":
                                         scenesEntity.PNGUSEPISODIC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 272:
                                     case "PNGUSEPISODIC-Scenes":
                                         scenesEntity.PNGUSEPISODIC_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 273:
                                     case "RBUS":
                                         scenesEntity.RBUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 274:
                                     case "RBUS-Scenes":
                                         scenesEntity.RBUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 275:
                                     case "RE-XSUITE-DEMO":
                                         scenesEntity.RE_XSUITE_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 276:
                                     case "RE-XSUITE-DEMO-Scenes":
                                         scenesEntity.RE_XSUITE_DEMO_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 277:
                                     case "REPNGCN-DEMO":
                                         scenesEntity.REPNGCN_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 278:
                                     case "REPNGCN-DEMO-Scenes":
                                         scenesEntity.REPNGCN_DEMO_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 279:
                                     case "RI-DEMO":
                                         scenesEntity.RI_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 280:
                                     case "RI-DEMO-Scenes":
                                         scenesEntity.RI_DEMO_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 281:
                                     case "RI-DIAGEOAU":
                                         scenesEntity.RI_DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 282:
                                     case "RI-DIAGEOAU-Scenes":
                                         scenesEntity.RI_DIAGEOAU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 283:
                                     case "RIALCBEVUK-PROD":
                                         scenesEntity.RIALCBEVUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 284:
                                     case "RIALCBEVUK-PROD-Scenes":
                                         scenesEntity.RIALCBEVUK_PROD_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 285:
                                     case "RICOFFEEUS":
                                         scenesEntity.RICOFFEEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 286:
                                     case "RICOFFEEUS-Scenes":
                                         scenesEntity.RICOFFEEUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 287:
                                     case "RINIELSENUS":
                                         scenesEntity.RINIELSENUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 288:
                                     case "RINIELSENUS-Scenes":
                                         scenesEntity.RINIELSENUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 289:
                                     case "RIPETCAREUK-PROD":
                                         scenesEntity.RIPETCAREUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 290:
                                     case "RIPETCAREUK-PROD-Scenes":
                                         scenesEntity.RIPETCAREUK_PROD_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 291:
                                     case "RIUS":
                                         scenesEntity.RIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 292:
                                     case "RIUS-Scenes":
                                         scenesEntity.RIUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 293:
                                     case "RIUS-DEV":
                                         scenesEntity.RIUS_DEV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 294:
                                     case "RIUS-DEV-Scenes":
                                         scenesEntity.RIUS_DEV_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 295:
                                     case "RNBDE":
                                         scenesEntity.RNBDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 296:
                                     case "RNBDE-Scenes":
                                         scenesEntity.RNBDE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 297:
                                     case "SMARTCOOLER-POC2":
                                         scenesEntity.SMARTCOOLER_POC2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 298:
                                     case "SMARTCOOLER-POC2-Scenes":
                                         scenesEntity.SMARTCOOLER_POC2_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 299:
                                     case "SMARTCOOLER-TRN":
                                         scenesEntity.SMARTCOOLER_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 300:
                                     case "SMARTCOOLER-TRN-Scenes":
                                         scenesEntity.SMARTCOOLER_TRN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 301:
                                     case "SMARTCOOLER2-TRN":
                                         scenesEntity.SMARTCOOLER2_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 302:
                                     case "SMARTCOOLER2-TRN-Scenes":
                                         scenesEntity.SMARTCOOLER2_TRN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 303:
                                     case "SOLARBR":
                                         scenesEntity.SOLARBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 304:
                                     case "SOLARBR-Scenes":
                                         scenesEntity.SOLARBR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 305:
                                     case "STATIC-CAMERA-DEMO":
                                         scenesEntity.STATIC_CAMERA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 306:
                                     case "STATIC-CAMERA-DEMO-Scenes":
                                         scenesEntity.STATIC_CAMERA_DEMO_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 307:
                                     case "SWIRECN":
                                         scenesEntity.SWIRECN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 308:
                                     case "SWIRECN-Scenes":
                                         scenesEntity.SWIRECN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 309:
                                     case "SWIREREDCN":
                                         scenesEntity.SWIREREDCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 310:
                                     case "SWIREREDCN-Scenes":
                                         scenesEntity.SWIREREDCN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 311:
                                     case "TNUVAIL":
                                         scenesEntity.TNUVAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 312:
                                     case "TNUVAIL-Scenes":
                                         scenesEntity.TNUVAIL_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 313:
                                     case "TRAXDEMO-TS-PROD":
                                         scenesEntity.TRAXDEMO_TS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 314:
                                     case "TRAXDEMO-TS-PROD-Scenes":
                                         scenesEntity.TRAXDEMO_TS_PROD_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 315:
                                     case "TWEAU":
                                         scenesEntity.TWEAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 316:
                                     case "TWEAU-Scenes":
                                         scenesEntity.TWEAU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 317:
                                     case "RI-DEMO2":
                                         scenesEntity.RI_DEMO2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 318:
                                     case "RI-DEMO2-Scenes":
                                         scenesEntity.RI_DEMO2_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 319:
                                     case "COMPASSCCH-SAND":
                                         scenesEntity.COMPASSCCH_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 320:
                                     case "COMPASSCCH-SAND-Scenes":
                                         scenesEntity.COMPASSCCH_SAND_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 321:
                                     case "LAVAZZAIT-SAND":
                                         scenesEntity.LAVAZZAIT_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 322:
                                     case "LAVAZZAIT-SAND-Scenes":
                                         scenesEntity.LAVAZZAIT_SAND_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 323:
                                     case "INBEVUS-STG":
                                         scenesEntity.INBEVUS_STG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 324:
                                     case "INBEVUS-STG-Scenes":
                                         scenesEntity.INBEVUS_STG_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 325:
                                     case "LAVAZZAFR-SAND":
                                         scenesEntity.LAVAZZAFR_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 326:
                                     case "LAVAZZAFR-SAND-Scenes":
                                         scenesEntity.LAVAZZAFR_SAND_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 327:
                                     case "INBEVBE-SAND":
                                         scenesEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 328:
                                     case "INBEVBE-SAND-Scenes":
                                         scenesEntity.INBEVBE_SAND_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;



                                     //NEW Columns Addition
                                     //case 333:
                                     case "B2BRU-Scenes":
                                         scenesEntity.B2BRU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 334:
                                     case "BRMUS-Scenes":
                                         scenesEntity.BRMUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 335:
                                     case "CBCIL-Scenes":
                                         scenesEntity.CBCIL_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 336:
                                     case "CCCOOLERMX-Scenes":
                                         scenesEntity.CCCOOLERMX_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 337:
                                     case "DIAGEOAR-Scenes":
                                         scenesEntity.DIAGEOAR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 338:
                                     case "DIAGEOBENELUX-Scenes":
                                         scenesEntity.DIAGEOBENELUX_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 339:
                                     case "DIAGEOCH-Scenes":
                                         scenesEntity.DIAGEOCH_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 340:
                                     case "DIAGEOGA-Scenes":
                                         scenesEntity.DIAGEOGA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 341:
                                     case "DIAGEOGTR-Scenes":
                                         scenesEntity.DIAGEOGTR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 342:
                                     case "DIAGEONORDICS-Scenes":
                                         scenesEntity.DIAGEONORDICS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 343:
                                     case "DIAGEOUS-Scenes":
                                         scenesEntity.DIAGEOUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 344:
                                     case "FERREROEXTIT-Scenes":
                                         scenesEntity.FERREROEXTIT_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 345:
                                     case "GOOGLEHK-Scenes":
                                         scenesEntity.GOOGLEHK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 346:
                                     case "HEINEKENPILOTCN-Scenes":
                                         scenesEntity.HEINEKENPILOTCN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 347:
                                     case "IMBO-Scenes":
                                         scenesEntity.IMBO_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 348:
                                     case "INBEVCI-Scenes":
                                         scenesEntity.INBEVCI_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 349:
                                     case "INBEVCNTT-Scenes":
                                         scenesEntity.INBEVCNTT_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 350:
                                     case "INBEVCO-Scenes":
                                         scenesEntity.INBEVCO_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 351:
                                     case "INBEVZA-Scenes":
                                         scenesEntity.INBEVZA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 352:
                                     case "INORU-Scenes":
                                         scenesEntity.INORU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 353:
                                     case "JJSP-Scenes":
                                         scenesEntity.JJSP_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 354:
                                     case "JNJES-Scenes":
                                         scenesEntity.JNJES_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 355:
                                     case "JNJUK-Scenes":
                                         scenesEntity.JNJUK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 356:
                                     case "JRIJP-Scenes":
                                         scenesEntity.JRIJP_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 357:
                                     case "KELLOGSUSPOC-Scenes":
                                         scenesEntity.KELLOGSUSPOC_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 358:
                                     case "KRAFTUS-Scenes":
                                         scenesEntity.KRAFTUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 359:
                                     case "MARS-CHOCO-RU-Scenes":
                                         scenesEntity.MARS_CHOCO_RU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 360:
                                     case "MHUK-Scenes":
                                         scenesEntity.MHUK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 361:
                                     case "MILLERCOORS-Scenes":
                                         scenesEntity.MILLERCOORS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 362:
                                     case "MOLSONONTRADEUK-Scenes":
                                         scenesEntity.MOLSONONTRADEUK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 363:
                                     case "MYCHEMISTAU-Scenes":
                                         scenesEntity.MYCHEMISTAU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 364:
                                     case "NESTLEROAMLERUK-Scenes":
                                         scenesEntity.NESTLEROAMLERUK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 365:
                                     case "NRF2018-Scenes":
                                         scenesEntity.NRF2018_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 366:
                                     case "PENAFLORAR-Scenes":
                                         scenesEntity.PENAFLORAR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 367:
                                     case "PMIUA-Scenes":
                                         scenesEntity.PMIUA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 368:
                                     case "PNGAMERICA-Scenes":
                                         scenesEntity.PNGAMERICA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 369:
                                     case "PNGRO-Scenes":
                                         scenesEntity.PNGRO_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 370:
                                     case "RBAU-Scenes":
                                         scenesEntity.RBAU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 371:
                                     case "RBCA-Scenes":
                                         scenesEntity.RBCA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 372:
                                     case "RBDK-Scenes":
                                         scenesEntity.RBDK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 373:
                                     case "RBMANUAL-Scenes":
                                         scenesEntity.RBMANUAL_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 374:
                                     case "RINIELSENRU-MARS-Scenes":
                                         scenesEntity.RINIELSENRU_MARS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 375:
                                     case "RINIELSENUSQI-Scenes":
                                         scenesEntity.RINIELSENUSQI_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 376:
                                     case "RIPANELCN-Scenes":
                                         scenesEntity.RIPANELCN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 377:
                                     case "RISPARKWINEDE-Scenes":
                                         scenesEntity.RISPARKWINEDE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 378:
                                     case "SANOFIAE-Scenes":
                                         scenesEntity.SANOFIAE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 379:
                                     case "SANOFIAU-Scenes":
                                         scenesEntity.SANOFIAU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 380:
                                     case "SANOFIHK-Scenes":
                                         scenesEntity.SANOFIHK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 381:
                                     case "SANOFIKH-Scenes":
                                         scenesEntity.SANOFIKH_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 382:
                                     case "SANOFINZ-Scenes":
                                         scenesEntity.SANOFINZ_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 383:
                                     case "SANOFIRU-Scenes":
                                         scenesEntity.SANOFIRU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 384:
                                     case "SANOFITR-Scenes":
                                         scenesEntity.SANOFITR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 385:
                                     case "SANOFIUA-Scenes":
                                         scenesEntity.SANOFIUA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 386:
                                     case "SHUFERSALIL-Scenes":
                                         scenesEntity.SHUFERSALIL_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 387:
                                     case "SUNTORYJP-Scenes":
                                         scenesEntity.SUNTORYJP_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 388:
                                     case "TESCOTH-Scenes":
                                         scenesEntity.TESCOTH_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 389:
                                     case "TESCOUK-Scenes":
                                         scenesEntity.TESCOUK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 390:
                                     case "TRAXROBOT-Scenes":
                                         scenesEntity.TRAXROBOT_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 391:
                                     case "XSUITE-SHOWCASE-Scenes":
                                         scenesEntity.XSUITE_SHOWCASE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 392:
                                     case "ABIUS-Scenes":
                                         scenesEntity.ABIUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 393:
                                     case "BADGERROBOT-Scenes":
                                         scenesEntity.BADGERROBOT_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 394:
                                     case "CUBAU-Scenes":
                                         scenesEntity.CUBAU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 395:
                                     case "DIAGEORU-Scenes":
                                         scenesEntity.DIAGEORU_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 396:
                                     case "GFKFR-Scenes":
                                         scenesEntity.GFKFR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 397:
                                     case "JNJIT-Scenes":
                                         scenesEntity.JNJIT_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 398:
                                     case "LIGHTTRAX-Scenes":
                                         scenesEntity.LIGHTTRAX_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 399:
                                     case "LIGHTTRAXOFFLINE-Scenes":
                                         scenesEntity.LIGHTTRAXOFFLINE_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 400:
                                     case "RINIELSENFR-Scenes":
                                         scenesEntity.RINIELSENFR_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 401:
                                     case "SANOFIKZ-Scenes":
                                         scenesEntity.SANOFIKZ_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 402:
                                     case "SANOFILB-Scenes":
                                         scenesEntity.SANOFILB_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 403:
                                     case "SANOFISA-Scenes":
                                         scenesEntity.SANOFISA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 404:
                                     case "SANOFIZA-Scenes":
                                         scenesEntity.SANOFIZA_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 405:
                                     case "WATSONSHK-Scenes":
                                         scenesEntity.WATSONSHK_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 406:
                                     case "KELLOGGUS-Scenes":
                                         scenesEntity.KELLOGGUS_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                    
                                     //case 407:
                                     case "TSINGTAOBEERCN-Scenes":
                                         scenesEntity.TSINGTAOBEERCN_Scenes = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     #region "No need region"

                                     #endregion

                                     default: break;


                                     #endregion
                                 }
                             }
                        }

                    }
                    catch (Exception ex)
                    {
                        Response.Redirect("error.aspx");
                        throw ex;
                    }
                }

                if (globalCenterName == center && rowNumber > 1)
                {
                    scenesEntity.ImportedDate = GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim());//GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    scenesEntity.ImportedYear = scenesEntity.ImportedDate.Substring(0, 6);
                    //pricingprobesEntity.ImportTime = GeneralUtility.ConvertSystemTimeFormat(System.DateTime.Now);
                    scenesEntity.CreatedDate = GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    scenesEntity.CreatedBy = userEntity.ID;


                    sceneslist.Add(scenesEntity);
                }

                #endregion
            }
        }

        private void SceneRecognition_BindBusiness(List<SceneRecognitionEntity> scenerecognitionlist, ExcelWorksheet ws, string center)
        {
            var userEntity = (UserEntity)Session["ID"];
            for (var rowNumber = 1; rowNumber <= ws.Dimension.End.Row; rowNumber++)
            {
                var scenerecognitionEntity = new SceneRecognitionEntity();

                scenerecognitionEntity.ID = GeneralUtility.GeneratedKey;

                #region Populate Excel data

                for (var colNumber = 1; colNumber <= ws.Dimension.End.Column; colNumber++)
                {
                    var columnName1 = ws.Cells[1, colNumber].Value.ToString().Trim();
                    var columnName2 = string.Empty;
                    string columnName3 = string.Empty;
                    if (columnName1 == "Scene Recognition")
                    {
                        columnName2 = ws.Cells[1, colNumber - 1].Value.ToString();
                        columnName3 = columnName2 + "-" + columnName1;
                    }
                    else
                    {
                        columnName3 = columnName1;
                    }
                    try
                    {
                        if (true && rowNumber > 1)
                        {
                            //globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            if (Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != "" && Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != null)
                            {
                                globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            }
                            else
                            {
                                globalCenterName = "";
                            }
                            if (globalCenterName == center)
                            {
                            switch (columnName3)
                            {
                                #region
                                //case 1:
                                case "QAT":
                                    scenerecognitionEntity.QAT = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 2:
                                case "Center":
                                    scenerecognitionEntity.Center = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 3:
                                case "Total Scene Recognition":
                                    scenerecognitionEntity.TotalSceneRecognition = Convert.ToInt32(ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case "Avg seconds per Scene Recognition":
                                    //case 4:
                                    scenerecognitionEntity.Avgsecondsper_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 5:
                                case "ABICA":
                                    scenerecognitionEntity.ABICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 6:

                                case "ABICA-Scene Recognition":
                                    scenerecognitionEntity.ABICA_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 7:
                                case "ABITAMSUS-PROD":
                                    scenerecognitionEntity.ABITAMSUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 8:
                                case "ABITAMSUS-PROD-Scene Recognition":
                                    scenerecognitionEntity.ABITAMSUS_PROD_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 9:
                                case "AMERICAS-DEMO":
                                    scenerecognitionEntity.AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 10:
                                case "AMERICAS-DEMO-Scene Recognition":
                                    scenerecognitionEntity.AMERICAS_DEMO_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 11:
                                case "BATRU":
                                    scenerecognitionEntity.BATRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 12:
                                case "BATRU-Scene Recognition":
                                    scenerecognitionEntity.BATRU_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 13:
                                case "BIKR":
                                    scenerecognitionEntity.BIKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 14:
                                case "BIKR-Scene Recognition":
                                    scenerecognitionEntity.BIKR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 15:
                                case "BIMY":
                                    scenerecognitionEntity.BIMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 16:
                                case "BIMY-Scene Recognition":
                                    scenerecognitionEntity.BIMY_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 17:
                                case "BIPH":
                                    scenerecognitionEntity.BIPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 18:
                                case "BIPH-Scene Recognition":
                                    scenerecognitionEntity.BIPH_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 19:
                                case "BISEASK":
                                    scenerecognitionEntity.BISEASK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 20:
                                case "BISEASK-Scene Recognition":
                                    scenerecognitionEntity.BISEASK_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 21:
                                case "BITH":
                                    scenerecognitionEntity.BITH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 22:
                                case "BITH-Scene Recognition":
                                    scenerecognitionEntity.BITH_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 23:
                                case "BIVN":
                                    scenerecognitionEntity.BIVN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 24:
                                case "BIVN-Scene Recognition":
                                    scenerecognitionEntity.BIVN_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 25:
                                case "BPAU":
                                    scenerecognitionEntity.BPAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 26:
                                case "BPAU-Scene Recognition":
                                    scenerecognitionEntity.BPAU_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 27:
                                case "BRODMANN":
                                    scenerecognitionEntity.BRODMANN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 28:
                                case "BRODMANN-Scene Recognition":
                                    scenerecognitionEntity.BRODMANN_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 29:
                                case "CARREFOURAR":
                                    scenerecognitionEntity.CARREFOURAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 30:
                                case "CARREFOURAR-Scene Recognition":
                                    scenerecognitionEntity.CARREFOURAR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 31:
                                case "CCAAU":
                                    scenerecognitionEntity.CCAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 32:
                                case "CCAAU-Scene Recognition":
                                    scenerecognitionEntity.CCAAU_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 33:
                                case "CCABIZA":
                                    scenerecognitionEntity.CCABIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 34:
                                case "CCABIZA-Scene Recognition":
                                    scenerecognitionEntity.CCABIZA_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 35:
                                case "CCANZ":
                                    scenerecognitionEntity.CCANZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 36:
                                case "CCANZ-Scene Recognition":
                                    scenerecognitionEntity.CCANZ_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 37:
                                case "CCBOTTLERSUS":
                                    scenerecognitionEntity.CCBOTTLERSUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 38:
                                case "CCBOTTLERSUS-Scene Recognition":
                                    scenerecognitionEntity.CCBOTTLERSUS_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 39:
                                case "CCBR-PROD":
                                    scenerecognitionEntity.CCBR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 40:
                                case "CCBR-PROD-Scene Recognition":
                                    scenerecognitionEntity.CCBR_PROD_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 41:
                                case "CCJP":
                                    scenerecognitionEntity.CCJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 42:
                                case "CCJP-Scene Recognition":
                                    scenerecognitionEntity.CCJP_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 43:
                                case "CCKH":
                                    scenerecognitionEntity.CCKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 44:
                                case "CCKH-Scene Recognition":
                                    scenerecognitionEntity.CCKH_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 45:
                                case "CCKR":
                                    scenerecognitionEntity.CCKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 46:
                                case "CCKR-Scene Recognition":
                                    scenerecognitionEntity.CCKR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 47:
                                case "CCMY":
                                    scenerecognitionEntity.CCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 48:
                                case "CCMY-Scene Recognition":
                                    scenerecognitionEntity.CCMY_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 49:
                                case "CCPH":
                                    scenerecognitionEntity.CCPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 50:
                                case "CCPH-Scene Recognition":
                                    scenerecognitionEntity.CCPH_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 51:
                                case "CCRPR-PROD":
                                    scenerecognitionEntity.CCRPR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 52:
                                case "CCRPR-PROD-Scene Recognition":
                                    scenerecognitionEntity.CCRPR_PROD_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 53:
                                case "CCRU":
                                    scenerecognitionEntity.CCRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 54:
                                case "CCRU-Scene Recognition":
                                    scenerecognitionEntity.CCRU_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 55:
                                case "CCTH":
                                    scenerecognitionEntity.CCTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 56:
                                case "CCTH-Scene Recognition":
                                    scenerecognitionEntity.CCTH_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 57:
                                case "CCTH-UAT":
                                    scenerecognitionEntity.CCTH_UAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 58:
                                case "CCTH-UAT-Scene Recognition":
                                    scenerecognitionEntity.CCTH_UAT_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 59:
                                case "CCTRADMX":
                                    scenerecognitionEntity.CCTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 60:
                                case "CCTRADMX-Scene Recognition":
                                    scenerecognitionEntity.CCTRADMX_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 61:
                                case "CCUS":
                                    scenerecognitionEntity.CCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 62:
                                case "CCUS-Scene Recognition":
                                    scenerecognitionEntity.CCUS_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 63:
                                case "CCZA":
                                    scenerecognitionEntity.CCZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 64:
                                case "CCZA-Scene Recognition":
                                    scenerecognitionEntity.CCZA_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 65:
                                case "CEREBOSTH":
                                    scenerecognitionEntity.CEREBOSTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 66:
                                case "CEREBOSTH-Scene Recognition":
                                    scenerecognitionEntity.CEREBOSTH_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 67:
                                case "CROWDSOURCE":
                                    scenerecognitionEntity.CROWDSOURCE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 68:
                                case "CROWDSOURCE-Scene Recognition":
                                    scenerecognitionEntity.CROWDSOURCE_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 69:
                                case "DIAGEOAU":
                                    scenerecognitionEntity.DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 70:
                                case "DIAGEOAU-Scene Recognition":
                                    scenerecognitionEntity.DIAGEOAU_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 71:
                                case "DIAGEOBR":
                                    scenerecognitionEntity.DIAGEOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 72:
                                case "DIAGEOBR-Scene Recognition":
                                    scenerecognitionEntity.DIAGEOBR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 73:
                                case "DIAGEOGR":
                                    scenerecognitionEntity.DIAGEOGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 74:
                                case "DIAGEOGR-Scene Recognition":
                                    scenerecognitionEntity.DIAGEOGR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 75:
                                case "DIAGEOIE":
                                    scenerecognitionEntity.DIAGEOIE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 76:
                                case "DIAGEOIE-Scene Recognition":
                                    scenerecognitionEntity.DIAGEOIE_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 77:
                                case "DIAGEOKE":
                                    scenerecognitionEntity.DIAGEOKE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 78:
                                case "DIAGEOKE-Scene Recognition":
                                    scenerecognitionEntity.DIAGEOKE_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 79:
                                case "DIAGEOMX":
                                    scenerecognitionEntity.DIAGEOMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 80:
                                case "DIAGEOMX-Scene Recognition":
                                    scenerecognitionEntity.DIAGEOMX_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 81:
                                case "DIAGEOPT":
                                    scenerecognitionEntity.DIAGEOPT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 82:
                                case "DIAGEOPT-Scene Recognition":
                                    scenerecognitionEntity.DIAGEOPT_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 83:
                                case "DIAGEOTW":
                                    scenerecognitionEntity.DIAGEOTW = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 84:
                                case "DIAGEOTW-Scene Recognition":
                                    scenerecognitionEntity.DIAGEOTW_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 85:
                                case "DIAGEOUK":
                                    scenerecognitionEntity.DIAGEOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 86:
                                case "DIAGEOUK-Scene Recognition":
                                    scenerecognitionEntity.DIAGEOUK_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 87:
                                case "DIAGEOZA":
                                    scenerecognitionEntity.DIAGEOZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 88:
                                case "DIAGEOZA-Scene Recognition":
                                    scenerecognitionEntity.DIAGEOZA_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 89:
                                case "EMEA-DEMO":
                                    scenerecognitionEntity.EMEA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 90:
                                case "EMEA-DEMO-Scene Recognition":
                                    scenerecognitionEntity.EMEA_DEMO_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 91:
                                case "FERREROIT":
                                    scenerecognitionEntity.FERREROIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 92:
                                case "FERREROIT-Scene Recognition":
                                    scenerecognitionEntity.FERREROIT_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 93:
                                case "GILLETTEUS":
                                    scenerecognitionEntity.GILLETTEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 94:
                                case "GILLETTEUS-Scene Recognition":
                                    scenerecognitionEntity.GILLETTEUS_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 95:
                                case "GOOGLEUS":
                                    scenerecognitionEntity.GOOGLEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 96:
                                case "GOOGLEUS-Scene Recognition":
                                    scenerecognitionEntity.GOOGLEUS_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 97:
                                case "HBCDE":
                                    scenerecognitionEntity.HBCDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 98:
                                case "HBCDE-Scene Recognition":
                                    scenerecognitionEntity.HBCDE_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 99:
                                case "HEINEKENCN":
                                    scenerecognitionEntity.HEINEKENCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 100:
                                case "HEINEKENCN-Scene Recognition":
                                    scenerecognitionEntity.HEINEKENCN_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 101:
                                case "HEINEKENUS-PROD":
                                    scenerecognitionEntity.HEINEKENUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 102:
                                case "HEINEKENUS-PROD-Scene Recognition":
                                    scenerecognitionEntity.HEINEKENUS_PROD_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 103:
                                case "HEINZCR":
                                    scenerecognitionEntity.HEINZCR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 104:
                                case "HEINZCR-Scene Recognition":
                                    scenerecognitionEntity.HEINZCR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 105:
                                case "INBEVAR":
                                    scenerecognitionEntity.INBEVAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 106:
                                case "INBEVAR-Scene Recognition":
                                    scenerecognitionEntity.INBEVAR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 107:
                                case "INBEVBE":
                                    scenerecognitionEntity.INBEVBE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 108:
                                case "INBEVBE-Scene Recognition":
                                    scenerecognitionEntity.INBEVBE_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 109:
                                //case "INBEVBE-SAND":
                                //    scenerecognitionEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                ////case 110:
                                //case "INBEVBE-SAND-Scene Recognition":
                                //    scenerecognitionEntity.INBEVBE_SAND_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 111:
                                case "INBEVBR":
                                    scenerecognitionEntity.INBEVBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 112:
                                case "INBEVBR-Scene Recognition":
                                    scenerecognitionEntity.INBEVBR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 113:
                                case "INBEVBR_ONTRADE":
                                    scenerecognitionEntity.INBEVBR_ONTRADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 114:
                                case "INBEVBR_ONTRADE-Scene Recognition":
                                    scenerecognitionEntity.INBEVBR_ONTRADE_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 115:
                                case "INBEVCL":
                                    scenerecognitionEntity.INBEVCL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 116:
                                case "INBEVCL-Scene Recognition":
                                    scenerecognitionEntity.INBEVCL_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 117:
                                case "INBEVCN":
                                    scenerecognitionEntity.INBEVCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 118:
                                case "INBEVCN-Scene Recognition":
                                    scenerecognitionEntity.INBEVCN_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 119:
                                case "INBEVCOOLERAR":
                                    scenerecognitionEntity.INBEVCOOLERAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 120:
                                case "INBEVCOOLERAR-Scene Recognition":
                                    scenerecognitionEntity.INBEVCOOLERAR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 121:
                                case "INBEVCOOLERBR":
                                    scenerecognitionEntity.INBEVCOOLERBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 122:
                                case "INBEVCOOLERBR-Scene Recognition":
                                    scenerecognitionEntity.INBEVCOOLERBR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 123:
                                case "INBEVCOOLERUS":
                                    scenerecognitionEntity.INBEVCOOLERUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 124:
                                case "INBEVCOOLERUS-Scene Recognition":
                                    scenerecognitionEntity.INBEVCOOLERUS_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 125:
                                case "INBEVFR":
                                    scenerecognitionEntity.INBEVFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 126:
                                case "INBEVFR-Scene Recognition":
                                    scenerecognitionEntity.INBEVFR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 127:
                                case "INBEVLU":
                                    scenerecognitionEntity.INBEVLU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 128:
                                case "INBEVLU-Scene Recognition":
                                    scenerecognitionEntity.INBEVLU_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 129:
                                case "INBEVLU-SAND":
                                    scenerecognitionEntity.INBEVLU_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 130:
                                case "INBEVLU-SAND-Scene Recognition":
                                    scenerecognitionEntity.INBEVLU_SAND_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 131:
                                case "INBEVMX":
                                    scenerecognitionEntity.INBEVMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 132:
                                case "INBEVMX-Scene Recognition":
                                    scenerecognitionEntity.INBEVMX_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 133:
                                case "INBEVNL":
                                    scenerecognitionEntity.INBEVNL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 134:
                                case "INBEVNL-Scene Recognition":
                                    scenerecognitionEntity.INBEVNL_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 135:
                                case "INBEVNL-SAND":
                                    scenerecognitionEntity.INBEVNL_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 136:
                                case "INBEVNL-SAND-Scene Recognition":
                                    scenerecognitionEntity.INBEVNL_SAND_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 137:
                                case "INBEVPY":
                                    scenerecognitionEntity.INBEVPY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 138:
                                case "INBEVPY-Scene Recognition":
                                    scenerecognitionEntity.INBEVPY_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 139:
                                case "INBEVTRADMX":
                                    scenerecognitionEntity.INBEVTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 140:
                                case "INBEVTRADMX-Scene Recognition":
                                    scenerecognitionEntity.INBEVTRADMX_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 141:
                                case "INBEVUS":
                                    scenerecognitionEntity.INBEVUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 142:
                                case "INBEVUS-Scene Recognition":
                                    scenerecognitionEntity.INBEVUS_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 143:
                                case "JTIUA":
                                    scenerecognitionEntity.JTIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 144:
                                case "JTIUA-Scene Recognition":
                                    scenerecognitionEntity.JTIUA_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 145:
                                case "KCMY":
                                    scenerecognitionEntity.KCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 146:
                                case "KCMY-Scene Recognition":
                                    scenerecognitionEntity.KCMY_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 147:
                                case "KCUS":
                                    scenerecognitionEntity.KCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 148:
                                case "KCUS-Scene Recognition":
                                    scenerecognitionEntity.KCUS_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 149:
                                case "KEURIGCA":
                                    scenerecognitionEntity.KEURIGCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 150:
                                case "KEURIGCA-Scene Recognition":
                                    scenerecognitionEntity.KEURIGCA_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////// just only finished 150 //////////////
                                //case 151:
                                case "LABATTPLNOPTCA":
                                    scenerecognitionEntity.LABATTPLNOPTCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 152:
                                case "LABATTPLNOPTCA-Scene Recognition":
                                    scenerecognitionEntity.LABATTPLNOPTCA_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 153:
                                case "LAVAZZAAT":
                                    scenerecognitionEntity.LAVAZZAAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 154:
                                case "LAVAZZAAT-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAAT_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 155:
                                case "LAVAZZAAU":
                                    scenerecognitionEntity.LAVAZZAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 156:
                                case "LAVAZZAAU-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAAU_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 157:
                                case "LAVAZZABE":
                                    scenerecognitionEntity.LAVAZZABE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 158:
                                case "LAVAZZABE-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZABE_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 159:
                                case "LAVAZZABG":
                                    scenerecognitionEntity.LAVAZZABG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 160:
                                case "LAVAZZABG-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZABG_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 161:
                                case "LAVAZZACA":
                                    scenerecognitionEntity.LAVAZZACA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 162:
                                case "LAVAZZACA-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZACA_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 163:
                                case "LAVAZZACH":
                                    scenerecognitionEntity.LAVAZZACH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 164:
                                case "LAVAZZACH-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZACH_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 165:
                                case "LAVAZZACL":
                                    scenerecognitionEntity.LAVAZZACL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 166:
                                case "LAVAZZACL-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZACL_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 167:
                                case "LAVAZZACN":
                                    scenerecognitionEntity.LAVAZZACN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 168:
                                case "LAVAZZACN-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZACN_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 169:
                                case "LAVAZZACZ":
                                    scenerecognitionEntity.LAVAZZACZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 170:
                                case "LAVAZZACZ-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZACZ_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 171:
                                case "LAVAZZADE":
                                    scenerecognitionEntity.LAVAZZADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 172:
                                case "LAVAZZADE-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZADE_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 173:
                                case "LAVAZZADK":
                                    scenerecognitionEntity.LAVAZZADK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 174:
                                case "LAVAZZADK-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZADK_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 175:
                                case "LAVAZZAEE":
                                    scenerecognitionEntity.LAVAZZAEE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 176:
                                case "LAVAZZAEE-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAEE_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 177:
                                case "LAVAZZAES":
                                    scenerecognitionEntity.LAVAZZAES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 178:
                                case "LAVAZZAES-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAES_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 179:
                                case "LAVAZZAFR":
                                    scenerecognitionEntity.LAVAZZAFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 180:
                                case "LAVAZZAFR-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAFR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 181:
                                case "LAVAZZAGR":
                                    scenerecognitionEntity.LAVAZZAGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 182:
                                case "LAVAZZAGR-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAGR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 183:
                                case "LAVAZZAHK":
                                    scenerecognitionEntity.LAVAZZAHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 184:
                                case "LAVAZZAHK-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAHK_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 185:
                                case "LAVAZZAHR":
                                    scenerecognitionEntity.LAVAZZAHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 186:
                                case "LAVAZZAHR-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAHR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 187:
                                case "LAVAZZAIL":
                                    scenerecognitionEntity.LAVAZZAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 188:
                                case "LAVAZZAIL-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAIL_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 189:
                                case "LAVAZZAIT":
                                    scenerecognitionEntity.LAVAZZAIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 190:
                                case "LAVAZZAIT-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAIT_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 191:
                                case "LAVAZZAJP":
                                    scenerecognitionEntity.LAVAZZAJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 192:
                                case "LAVAZZAJP-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAJP_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 193:
                                case "LAVAZZAKR":
                                    scenerecognitionEntity.LAVAZZAKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 194:
                                case "LAVAZZAKR-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAKR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 195:
                                case "LAVAZZALT":
                                    scenerecognitionEntity.LAVAZZALT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 196:
                                case "LAVAZZALT-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZALT_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 197:
                                case "LAVAZZALU":
                                    scenerecognitionEntity.LAVAZZALU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 198:
                                case "LAVAZZALU-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZALU_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 199:
                                case "LAVAZZALV":
                                    scenerecognitionEntity.LAVAZZALV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 200:
                                case "LAVAZZALV-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZALV_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 201:
                                case "LAVAZZAMA":
                                    scenerecognitionEntity.LAVAZZAMA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 202:
                                case "LAVAZZAMA-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAMA_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 203:
                                case "LAVAZZANL":
                                    scenerecognitionEntity.LAVAZZANL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 204:
                                case "LAVAZZANL-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZANL_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 205:
                                case "LAVAZZAPL":
                                    scenerecognitionEntity.LAVAZZAPL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 206:
                                case "LAVAZZAPL-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAPL_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 207:
                                case "LAVAZZARO":
                                    scenerecognitionEntity.LAVAZZARO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 208:
                                case "LAVAZZARO-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZARO_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 209:
                                case "LAVAZZARU":
                                    scenerecognitionEntity.LAVAZZARU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 210:
                                case "LAVAZZARU-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZARU_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 211:
                                case "LAVAZZASA":
                                    scenerecognitionEntity.LAVAZZASA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 212:
                                case "LAVAZZASA-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZASA_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 213:
                                case "LAVAZZASE":
                                    scenerecognitionEntity.LAVAZZASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 214:
                                case "LAVAZZASE-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZASE_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 215:
                                case "LAVAZZASG":
                                    scenerecognitionEntity.LAVAZZASG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 216:
                                case "LAVAZZASG-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZASG_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 217:
                                case "LAVAZZAUAE":
                                    scenerecognitionEntity.LAVAZZAUAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 218:
                                case "LAVAZZAUAE-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAUAE_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 219:
                                case "LAVAZZAUK":
                                    scenerecognitionEntity.LAVAZZAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 220:
                                case "LAVAZZAUK-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAUK_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 221:
                                case "LAVAZZAUS":
                                    scenerecognitionEntity.LAVAZZAUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 222:
                                case "LAVAZZAUS-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAUS_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 223:

                                case "LAVAZZAZA":
                                    scenerecognitionEntity.LAVAZZAZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case "LAVAZZAZA-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAZA_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 225:
                                case "LRSUK":
                                    scenerecognitionEntity.LRSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 226:
                                case "LRSUK-Scene Recognition":
                                    scenerecognitionEntity.LRSUK_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 227:
                                case "MARSBR":
                                    scenerecognitionEntity.MARSBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 228:
                                case "MARSBR-Scene Recognition":
                                    scenerecognitionEntity.MARSBR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 229:
                                case "MARSIN":
                                    scenerecognitionEntity.MARSIN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 230:
                                case "MARSIN-Scene Recognition":
                                    scenerecognitionEntity.MARSIN_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 231:
                                case "MARSIN-OLD":
                                    scenerecognitionEntity.MARSIN_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 232:
                                case "MARSIN-OLD-Scene Recognition":
                                    scenerecognitionEntity.MARSIN_OLD_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 233:
                                case "MARSRU-PROD":
                                    scenerecognitionEntity.MARSRU_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 234:
                                case "MARSRU-PROD-Scene Recognition":
                                    scenerecognitionEntity.MARSRU_PROD_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 235:
                                case "MAYORAID":
                                    scenerecognitionEntity.MAYORAID = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 236:
                                case "MAYORAID-Scene Recognition":
                                    scenerecognitionEntity.MAYORAID_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 237:
                                case "MJNCN":
                                    scenerecognitionEntity.MJNCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 238:
                                case "MJNCN-Scene Recognition":
                                    scenerecognitionEntity.MJNCN_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 239:
                                case "MOLSONCOOLERHN":
                                    scenerecognitionEntity.MOLSONCOOLERHN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 240:
                                case "MOLSONCOOLERHN-Scene Recognition":
                                    scenerecognitionEntity.MOLSONCOOLERHN_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 241:
                                case "MOLSONCOOLERHR":
                                    scenerecognitionEntity.MOLSONCOOLERHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 242:
                                case "MOLSONCOOLERHR-Scene Recognition":
                                    scenerecognitionEntity.MOLSONCOOLERHR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 243:
                                case "MOLSONCOORSUK":
                                    scenerecognitionEntity.MOLSONCOORSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 244:
                                case "MOLSONCOORSUK-Scene Recognition":
                                    scenerecognitionEntity.MOLSONCOORSUK_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 245:
                                case "NESTLEUK":
                                    scenerecognitionEntity.NESTLEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 246:
                                case "NESTLEUK-Scene Recognition":
                                    scenerecognitionEntity.NESTLEUK_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 247:
                                case "NIVEAUK":
                                    scenerecognitionEntity.NIVEAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 248:
                                case "NIVEAUK-Scene Recognition":
                                    scenerecognitionEntity.NIVEAUK_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 249:
                                case "NRF2017-DEMO":
                                    scenerecognitionEntity.NRF2017_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 250:
                                case "NRF2017-DEMO-Scene Recognition":
                                    scenerecognitionEntity.NRF2017_DEMO_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 251:
                                case "ONE-AMERICAS-DEMO":
                                    scenerecognitionEntity.ONE_AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 252:                                  
                                case "ONE-AMERICAS-DEMO-Scene Recognition":
                                    scenerecognitionEntity.ONE_AMERICAS_DEMO_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 253:
                                case "ONE-APAC-DEMO":
                                    scenerecognitionEntity.ONE_APAC_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 254:
                                case "ONE-APAC-DEMO-Scene Recognition":
                                    scenerecognitionEntity.ONE_APAC_DEMO_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 255:
                                case "PEPSICOBR":
                                    scenerecognitionEntity.PEPSICOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 256:
                                case "PEPSICOBR-Scene Recognition":
                                    scenerecognitionEntity.PEPSICOBR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 257:
                                case "PNGAU":
                                    scenerecognitionEntity.PNGAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 258:
                                case "PNGAU-Scene Recognition":
                                    scenerecognitionEntity.PNGAU_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 259:
                                case "PNGAU-OLD":
                                    scenerecognitionEntity.PNGAU_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 260:
                                case "PNGAU-OLD-Scene Recognition":
                                    scenerecognitionEntity.PNGAU_OLD_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 261:
                                case "PNGCAREUS":
                                    scenerecognitionEntity.PNGCAREUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 262:
                                case "PNGCAREUS-Scene Recognition":
                                    scenerecognitionEntity.PNGCAREUS_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 263:
                                case "PNGCN-PROD":
                                    scenerecognitionEntity.PNGCN_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 264:
                                case "PNGCN-PROD-Scene Recognition":
                                    scenerecognitionEntity.PNGCN_PROD_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 265:
                                case "PNGJP":
                                    scenerecognitionEntity.PNGJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 266:
                                case "PNGJP-Scene Recognition":
                                    scenerecognitionEntity.PNGJP_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 267:
                                case "PNGJP-OLD":
                                    scenerecognitionEntity.PNGJP_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 268:
                                case "PNGJP-OLD-Scene Recognition":
                                    scenerecognitionEntity.PNGJP_OLD_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 269:
                                case "PNGUS":
                                    scenerecognitionEntity.PNGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 270:
                                case "PNGUS-Scene Recognition":
                                    scenerecognitionEntity.PNGUS_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 271:
                                case "PNGUSEPISODIC":
                                    scenerecognitionEntity.PNGUSEPISODIC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 272:
                                case "PNGUSEPISODIC-Scene Recognition":
                                    scenerecognitionEntity.PNGUSEPISODIC_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 273:
                                case "RBUS":
                                    scenerecognitionEntity.RBUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 274:
                                case "RBUS-Scene Recognition":
                                    scenerecognitionEntity.RBUS_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 275:
                                case "RE-XSUITE-DEMO":
                                    scenerecognitionEntity.RE_XSUITE_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 276:
                                case "RE-XSUITE-DEMO-Scene Recognition":
                                    scenerecognitionEntity.RE_XSUITE_DEMO_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 277:
                                case "REPNGCN-DEMO":
                                    scenerecognitionEntity.REPNGCN_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 278:
                                case "REPNGCN-DEMO-Scene Recognition":
                                    scenerecognitionEntity.REPNGCN_DEMO_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 279:
                                case "RI-DEMO":
                                    scenerecognitionEntity.RI_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 280:
                                case "RI-DEMO-Scene Recognition":
                                    scenerecognitionEntity.RI_DEMO_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 281:
                                case "RI-DIAGEOAU":
                                    scenerecognitionEntity.RI_DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 282:
                                case "RI-DIAGEOAU-Scene Recognition":
                                    scenerecognitionEntity.RI_DIAGEOAU_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 283:
                                case "RIALCBEVUK-PROD":
                                    scenerecognitionEntity.RIALCBEVUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 284:
                                case "RIALCBEVUK-PROD-Scene Recognition":
                                    scenerecognitionEntity.RIALCBEVUK_PROD_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 285:
                                case "RICOFFEEUS":
                                    scenerecognitionEntity.RICOFFEEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 286:
                                case "RICOFFEEUS-Scene Recognition":
                                    scenerecognitionEntity.RICOFFEEUS_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 287:
                                case "RINIELSENUS":
                                    scenerecognitionEntity.RINIELSENUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 288:
                                case "RINIELSENUS-Scene Recognition":
                                    scenerecognitionEntity.RINIELSENUS_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 289:
                                case "RIPETCAREUK-PROD":
                                    scenerecognitionEntity.RIPETCAREUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 290:
                                case "RIPETCAREUK-PROD-Scene Recognition":
                                    scenerecognitionEntity.RIPETCAREUK_PROD_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 291:
                                case "RIUS":
                                    scenerecognitionEntity.RIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 292:
                                case "RIUS-Scene Recognition":
                                    scenerecognitionEntity.RIUS_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 293:
                                case "RIUS-DEV":
                                    scenerecognitionEntity.RIUS_DEV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 294:
                                case "RIUS-DEV-Scene Recognition":
                                    scenerecognitionEntity.RIUS_DEV_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 295:
                                case "RNBDE":
                                    scenerecognitionEntity.RNBDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 296:
                                case "RNBDE-Scene Recognition":
                                    scenerecognitionEntity.RNBDE_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 297:
                                case "SMARTCOOLER-POC2":
                                    scenerecognitionEntity.SMARTCOOLER_POC2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 298:
                                case "SMARTCOOLER-POC2-Scene Recognition":
                                    scenerecognitionEntity.SMARTCOOLER_POC2_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 299:
                                case "SMARTCOOLER-TRN":
                                    scenerecognitionEntity.SMARTCOOLER_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 300:
                                case "SMARTCOOLER-TRN-Scene Recognition":
                                    scenerecognitionEntity.SMARTCOOLER_TRN_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 301:
                                case "SMARTCOOLER2-TRN":
                                    scenerecognitionEntity.SMARTCOOLER2_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 302:
                                case "SMARTCOOLER2-TRN-Scene Recognition":
                                    scenerecognitionEntity.SMARTCOOLER2_TRN_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 303:
                                case "SOLARBR":
                                    scenerecognitionEntity.SOLARBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 304:
                                case "SOLARBR-Scene Recognition":
                                    scenerecognitionEntity.SOLARBR_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 305:
                                case "STATIC-CAMERA-DEMO":
                                    scenerecognitionEntity.STATIC_CAMERA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 306:
                                case "STATIC-CAMERA-DEMO-Scene Recognition":
                                    scenerecognitionEntity.STATIC_CAMERA_DEMO_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 307:
                                case "SWIRECN":
                                    scenerecognitionEntity.SWIRECN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 308:
                                case "SWIRECN-Scene Recognition":
                                    scenerecognitionEntity.SWIRECN_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 309:
                                case "SWIREREDCN":
                                    scenerecognitionEntity.SWIREREDCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 310:
                                case "SWIREREDCN-Scene Recognition":
                                    scenerecognitionEntity.SWIREREDCN_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 311:
                                case "TNUVAIL":
                                    scenerecognitionEntity.TNUVAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 312:
                                case "TNUVAIL-Scene Recognition":
                                    scenerecognitionEntity.TNUVAIL_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 313:
                                case "TRAXDEMO-TS-PROD":
                                    scenerecognitionEntity.TRAXDEMO_TS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 314:
                                case "TRAXDEMO-TS-PROD-Scene Recognition":
                                    scenerecognitionEntity.TRAXDEMO_TS_PROD_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 315:
                                case "TWEAU":
                                    scenerecognitionEntity.TWEAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 316:
                                case "TWEAU-Scene Recognition":
                                    scenerecognitionEntity.TWEAU_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 317:
                                case "RI-DEMO2":
                                    scenerecognitionEntity.RI_DEMO2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 318:
                                case "RI-DEMO2-Scene Recognition":
                                    scenerecognitionEntity.RI_DEMO2_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 319:
                                case "COMPASSCCH-SAND":
                                    scenerecognitionEntity.COMPASSCCH_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 320:
                                case "COMPASSCCH-SAND-Scene Recognition":
                                    scenerecognitionEntity.COMPASSCCH_SAND_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 321:
                                case "LAVAZZAIT-SAND":
                                    scenerecognitionEntity.LAVAZZAIT_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 322:
                                case "LAVAZZAIT-SAND-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAIT_SAND_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                //case 323:
                                case "INBEVUS-STG":
                                    scenerecognitionEntity.INBEVUS_STG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 324:
                                case "INBEVUS-STG-Scene Recognition":
                                    scenerecognitionEntity.INBEVUS_STG_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 325:
                                case "LAVAZZAFR-SAND":
                                    scenerecognitionEntity.LAVAZZAFR_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 326:
                                case "LAVAZZAFR-SAND-Scene Recognition":
                                    scenerecognitionEntity.LAVAZZAFR_SAND_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 327:
                                case "INBEVBE-SAND":
                                    scenerecognitionEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 328:
                                case "INBEVBE-SAND-Scene Recognition":
                                    scenerecognitionEntity.INBEVBE_SAND_SceneRecognition = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //NEW Columns Addition
                                //case 333:
                                case "B2BRU":
                                    scenerecognitionEntity.B2BRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 334:
                                case "BRMUS":
                                    scenerecognitionEntity.BRMUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 335:
                                case "CBCIL":
                                    scenerecognitionEntity.CBCIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 336:
                                case "CCCOOLERMX":
                                    scenerecognitionEntity.CCCOOLERMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 337:
                                case "DIAGEOAR":
                                    scenerecognitionEntity.DIAGEOAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 338:
                                case "DIAGEOBENELUX":
                                    scenerecognitionEntity.DIAGEOBENELUX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 339:
                                case "DIAGEOCH":
                                    scenerecognitionEntity.DIAGEOCH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 340:
                                case "DIAGEOGA":
                                    scenerecognitionEntity.DIAGEOGA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 341:
                                case "DIAGEOGTR":
                                    scenerecognitionEntity.DIAGEOGTR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 342:
                                case "DIAGEONORDICS":
                                    scenerecognitionEntity.DIAGEONORDICS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 343:
                                case "DIAGEOUS":
                                    scenerecognitionEntity.DIAGEOUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 344:
                                case "FERREROEXTIT":
                                    scenerecognitionEntity.FERREROEXTIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 345:
                                case "GOOGLEHK":
                                    scenerecognitionEntity.GOOGLEHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 346:
                                case "HEINEKENPILOTCN":
                                    scenerecognitionEntity.HEINEKENPILOTCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 347:
                                case "IMBO":
                                    scenerecognitionEntity.IMBO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 348:
                                case "INBEVCI":
                                    scenerecognitionEntity.INBEVCI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 349:
                                case "INBEVCNTT":
                                    scenerecognitionEntity.INBEVCNTT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 350:
                                case "INBEVCO":
                                    scenerecognitionEntity.INBEVCO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 351:
                                case "INBEVZA":
                                    scenerecognitionEntity.INBEVZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 352:
                                case "INORU":
                                    scenerecognitionEntity.INORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 353:
                                case "JJSP":
                                    scenerecognitionEntity.JJSP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 354:
                                case "JNJES":
                                    scenerecognitionEntity.JNJES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 355:
                                case "JNJUK":
                                    scenerecognitionEntity.JNJUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 356:
                                case "JRIJP":
                                    scenerecognitionEntity.JRIJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 357:
                                case "KELLOGSUSPOC":
                                    scenerecognitionEntity.KELLOGSUSPOC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 358:
                                case "KRAFTUS":
                                    scenerecognitionEntity.KRAFTUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 359:
                                case "MARS-CHOCO-RU":
                                    scenerecognitionEntity.MARS_CHOCO_RU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 360:
                                case "MHUK":
                                    scenerecognitionEntity.MHUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 361:
                                case "MILLERCOORS":
                                    scenerecognitionEntity.MILLERCOORS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 362:
                                case "MOLSONONTRADEUK":
                                    scenerecognitionEntity.MOLSONONTRADEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 363:
                                case "MYCHEMISTAU":
                                    scenerecognitionEntity.MYCHEMISTAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 364:
                                case "NESTLEROAMLERUK":
                                    scenerecognitionEntity.NESTLEROAMLERUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 365:
                                case "NRF2018":
                                    scenerecognitionEntity.NRF2018 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 366:
                                case "PENAFLORAR":
                                    scenerecognitionEntity.PENAFLORAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 367:
                                case "PMIUA":
                                    scenerecognitionEntity.PMIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 368:
                                case "PNGAMERICA":
                                    scenerecognitionEntity.PNGAMERICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 369:
                                case "PNGRO":
                                    scenerecognitionEntity.PNGRO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 370:
                                case "RBAU":
                                    scenerecognitionEntity.RBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 371:
                                case "RBCA":
                                    scenerecognitionEntity.RBCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 372:
                                case "RBDK":
                                    scenerecognitionEntity.RBDK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 373:
                                case "RBMANUAL":
                                    scenerecognitionEntity.RBMANUAL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 374:
                                case "RINIELSENRU-MARS":
                                    scenerecognitionEntity.RINIELSENRU_MARS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 375:
                                case "RINIELSENUSQI":
                                    scenerecognitionEntity.RINIELSENUSQI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 376:
                                case "RIPANELCN":
                                    scenerecognitionEntity.RIPANELCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 377:
                                case "RISPARKWINEDE":
                                    scenerecognitionEntity.RISPARKWINEDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 378:
                                case "SANOFIAE":
                                    scenerecognitionEntity.SANOFIAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 379:
                                case "SANOFIAU":
                                    scenerecognitionEntity.SANOFIAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 380:
                                case "SANOFIHK":
                                    scenerecognitionEntity.SANOFIHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 381:
                                case "SANOFIKH":
                                    scenerecognitionEntity.SANOFIKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 382:
                                case "SANOFINZ":
                                    scenerecognitionEntity.SANOFINZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 383:
                                case "SANOFIRU":
                                    scenerecognitionEntity.SANOFIRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 384:
                                case "SANOFITR":
                                    scenerecognitionEntity.SANOFITR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 385:
                                case "SANOFIUA":
                                    scenerecognitionEntity.SANOFIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 386:
                                case "SHUFERSALIL":
                                    scenerecognitionEntity.SHUFERSALIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 387:
                                case "SUNTORYJP":
                                    scenerecognitionEntity.SUNTORYJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 388:
                                case "TESCOTH":
                                    scenerecognitionEntity.TESCOTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 389:
                                case "TESCOUK":
                                    scenerecognitionEntity.TESCOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 390:
                                case "TRAXROBOT":
                                    scenerecognitionEntity.TRAXROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                //case 391:
                                case "XSUITE-SHOWCASE":
                                    scenerecognitionEntity.XSUITE_SHOWCASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 392:
                                case "ABIUS":
                                    scenerecognitionEntity.ABIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 393:
                                case "BADGERROBOT":
                                    scenerecognitionEntity.BADGERROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 394:
                                case "CUBAU":
                                    scenerecognitionEntity.CUBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 395:
                                case "DIAGEORU":
                                    scenerecognitionEntity.DIAGEORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 396:
                                case "GFKFR":
                                    scenerecognitionEntity.GFKFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 397:
                                case "JNJIT":
                                    scenerecognitionEntity.JNJIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 398:
                                case "LIGHTTRAX":
                                    scenerecognitionEntity.LIGHTTRAX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 399:
                                case "LIGHTTRAXOFFLINE":
                                    scenerecognitionEntity.LIGHTTRAXOFFLINE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 400:
                                case "RINIELSENFR":
                                    scenerecognitionEntity.RINIELSENFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 401:
                                case "SANOFIKZ":
                                    scenerecognitionEntity.SANOFIKZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 402:
                                case "SANOFILB":
                                    scenerecognitionEntity.SANOFILB = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 403:
                                case "SANOFISA":
                                    scenerecognitionEntity.SANOFISA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 404:
                                case "SANOFIZA":
                                    scenerecognitionEntity.SANOFIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 405:
                                case "WATSONSHK":
                                    scenerecognitionEntity.WATSONSHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 406:
                                case "KELLOGGUS":
                                    scenerecognitionEntity.KELLOGGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                //case 407:
                                case "TSINGTAOBEERCN":
                                    scenerecognitionEntity.TSINGTAOBEERCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;

                                default: break;


                                #endregion
                            }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        Response.Redirect("error.aspx");
                        throw ex;
                    }
                }

                if (globalCenterName == center && rowNumber > 1)
                {
                    scenerecognitionEntity.ImportedDate = GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim());//GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    scenerecognitionEntity.ImportedYear = scenerecognitionEntity.ImportedDate.Substring(0, 6);
                    //pricingprobesEntity.ImportTime = GeneralUtility.ConvertSystemTimeFormat(System.DateTime.Now);
                    scenerecognitionEntity.CreatedDate = GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    scenerecognitionEntity.CreatedBy = userEntity.ID;

                    scenerecognitionlist.Add(scenerecognitionEntity);
                }

                #endregion
            }
        }

        private void CategoryExpert_BindBusiness(List<CategoryExpertEntity> categoryexpertlist, ExcelWorksheet ws, string center)
        {
            var userEntity = (UserEntity)Session["ID"];
            for (var rowNumber = 1; rowNumber <= ws.Dimension.End.Row; rowNumber++)
            {
                var categoryexpertEntity = new CategoryExpertEntity();

                categoryexpertEntity.ID = GeneralUtility.GeneratedKey;

                #region Populate Excel data

                for (var colNumber = 1; colNumber <= ws.Dimension.End.Column; colNumber++)
                {
                    var columnName1 = ws.Cells[1, colNumber].Value.ToString().Trim();
                    var columnName2 = string.Empty;
                    string columnName3 = string.Empty;
                    if (columnName1 == "Category Expert")
                    {
                        columnName2 = ws.Cells[1, colNumber - 1].Value.ToString();
                        columnName3 = columnName2 + "-" + columnName1;
                    }
                    else
                    {
                        columnName3 = columnName1;
                    }
                    try
                    {
                        if (true && rowNumber > 1)
                        {
                             //globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            if (Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != "" && Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != null)
                            {
                                globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            }
                            else
                            {
                                globalCenterName = "";
                            }
                             if (globalCenterName == center)
                             {
                                 switch (columnName3)
                                 {
                                     #region
                                     //case 1:
                                     case "QAT":
                                         categoryexpertEntity.QAT = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 2:
                                     case "Center":
                                         categoryexpertEntity.Center = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 3:
                                     case "Total Category Expert":
                                         categoryexpertEntity.TotalCategoryExpert = Convert.ToInt32(ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     case "Avg seconds per Category Expert":
                                         //case 4:
                                         categoryexpertEntity.AvgsecondsperCategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 5:
                                     case "ABICA":
                                         categoryexpertEntity.ABICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 6:

                                     case "ABICA-Category Expert":
                                         categoryexpertEntity.ABICA_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 7:
                                     case "ABITAMSUS-PROD":
                                         categoryexpertEntity.ABITAMSUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 8:
                                     case "ABITAMSUS-PROD-Category Expert":
                                         categoryexpertEntity.ABITAMSUS_PROD_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 9:
                                     case "AMERICAS-DEMO":
                                         categoryexpertEntity.AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 10:
                                     case "AMERICAS-DEMO-Category Expert":
                                         categoryexpertEntity.AMERICAS_DEMO_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 11:
                                     case "BATRU":
                                         categoryexpertEntity.BATRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 12:
                                     case "BATRU-Category Expert":
                                         categoryexpertEntity.BATRU_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 13:
                                     case "BIKR":
                                         categoryexpertEntity.BIKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 14:
                                     case "BIKR-Category Expert":
                                         categoryexpertEntity.BIKR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 15:
                                     case "BIMY":
                                         categoryexpertEntity.BIMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 16:
                                     case "BIMY-Category Expert":
                                         categoryexpertEntity.BIMY_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 17:
                                     case "BIPH":
                                         categoryexpertEntity.BIPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 18:
                                     case "BIPH-Category Expert":
                                         categoryexpertEntity.BIPH_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 19:
                                     case "BISEASK":
                                         categoryexpertEntity.BISEASK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 20:
                                     case "BISEASK-Category Expert":
                                         categoryexpertEntity.BISEASK_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 21:
                                     case "BITH":
                                         categoryexpertEntity.BITH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 22:
                                     case "BITH-Category Expert":
                                         categoryexpertEntity.BITH_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 23:
                                     case "BIVN":
                                         categoryexpertEntity.BIVN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 24:
                                     case "BIVN-Category Expert":
                                         categoryexpertEntity.BIVN_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 25:
                                     case "BPAU":
                                         categoryexpertEntity.BPAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 26:
                                     case "BPAU-Category Expert":
                                         categoryexpertEntity.BPAU_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 27:
                                     case "BRODMANN":
                                         categoryexpertEntity.BRODMANN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 28:
                                     case "BRODMANN-Category Expert":
                                         categoryexpertEntity.BRODMANN_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 29:
                                     case "CARREFOURAR":
                                         categoryexpertEntity.CARREFOURAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 30:
                                     case "CARREFOURAR-Category Expert":
                                         categoryexpertEntity.CARREFOURAR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 31:
                                     case "CCAAU":
                                         categoryexpertEntity.CCAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 32:
                                     case "CCAAU-Category Expert":
                                         categoryexpertEntity.CCAAU_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 33:
                                     case "CCABIZA":
                                         categoryexpertEntity.CCABIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 34:
                                     case "CCABIZA-Category Expert":
                                         categoryexpertEntity.CCABIZA_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 35:
                                     case "CCANZ":
                                         categoryexpertEntity.CCANZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 36:
                                     case "CCANZ-Category Expert":
                                         categoryexpertEntity.CCANZ_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 37:
                                     case "CCBOTTLERSUS":
                                         categoryexpertEntity.CCBOTTLERSUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 38:
                                     case "CCBOTTLERSUS-Category Expert":
                                         categoryexpertEntity.CCBOTTLERSUS_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 39:
                                     case "CCBR-PROD":
                                         categoryexpertEntity.CCBR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 40:
                                     case "CCBR-PROD-Category Expert":
                                         categoryexpertEntity.CCBR_PROD_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 41:
                                     case "CCJP":
                                         categoryexpertEntity.CCJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 42:
                                     case "CCJP-Category Expert":
                                         categoryexpertEntity.CCJP_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 43:
                                     case "CCKH":
                                         categoryexpertEntity.CCKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 44:
                                     case "CCKH-Category Expert":
                                         categoryexpertEntity.CCKH_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 45:
                                     case "CCKR":
                                         categoryexpertEntity.CCKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 46:
                                     case "CCKR-Category Expert":
                                         categoryexpertEntity.CCKR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 47:
                                     case "CCMY":
                                         categoryexpertEntity.CCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 48:
                                     case "CCMY-Category Expert":
                                         categoryexpertEntity.CCMY_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 49:
                                     case "CCPH":
                                         categoryexpertEntity.CCPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 50:
                                     case "CCPH-Category Expert":
                                         categoryexpertEntity.CCPH_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 51:
                                     case "CCRPR-PROD":
                                         categoryexpertEntity.CCRPR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 52:
                                     case "CCRPR-PROD-Category Expert":
                                         categoryexpertEntity.CCRPR_PROD_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 53:
                                     case "CCRU":
                                         categoryexpertEntity.CCRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 54:
                                     case "CCRU-Category Expert":
                                         categoryexpertEntity.CCRU_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 55:
                                     case "CCTH":
                                         categoryexpertEntity.CCTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 56:
                                     case "CCTH-Category Expert":
                                         categoryexpertEntity.CCTH_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 57:
                                     case "CCTH-UAT":
                                         categoryexpertEntity.CCTH_UAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 58:
                                     case "CCTH-UAT-Category Expert":
                                         categoryexpertEntity.CCTH_UAT_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 59:
                                     case "CCTRADMX":
                                         categoryexpertEntity.CCTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 60:
                                     case "CCTRADMX-Category Expert":
                                         categoryexpertEntity.CCTRADMX_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 61:
                                     case "CCUS":
                                         categoryexpertEntity.CCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 62:
                                     case "CCUS-Category Expert":
                                         categoryexpertEntity.CCUS_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 63:
                                     case "CCZA":
                                         categoryexpertEntity.CCZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 64:
                                     case "CCZA-Category Expert":
                                         categoryexpertEntity.CCZA_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 65:
                                     case "CEREBOSTH":
                                         categoryexpertEntity.CEREBOSTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 66:
                                     case "CEREBOSTH-Category Expert":
                                         categoryexpertEntity.CEREBOSTH_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 67:
                                     case "CROWDSOURCE":
                                         categoryexpertEntity.CROWDSOURCE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 68:
                                     case "CROWDSOURCE-Category Expert":
                                         categoryexpertEntity.CROWDSOURCE_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 69:
                                     case "DIAGEOAU":
                                         categoryexpertEntity.DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 70:
                                     case "DIAGEOAU-Category Expert":
                                         categoryexpertEntity.DIAGEOAU_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 71:
                                     case "DIAGEOBR":
                                         categoryexpertEntity.DIAGEOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 72:
                                     case "DIAGEOBR-Category Expert":
                                         categoryexpertEntity.DIAGEOBR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 73:
                                     case "DIAGEOGR":
                                         categoryexpertEntity.DIAGEOGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 74:
                                     case "DIAGEOGR-Category Expert":
                                         categoryexpertEntity.DIAGEOGR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 75:
                                     case "DIAGEOIE":
                                         categoryexpertEntity.DIAGEOIE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 76:
                                     case "DIAGEOIE-Category Expert":
                                         categoryexpertEntity.DIAGEOIE_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 77:
                                     case "DIAGEOKE":
                                         categoryexpertEntity.DIAGEOKE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 78:
                                     case "DIAGEOKE-Category Expert":
                                         categoryexpertEntity.DIAGEOKE_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 79:
                                     case "DIAGEOMX":
                                         categoryexpertEntity.DIAGEOMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 80:
                                     case "DIAGEOMX-Category Expert":
                                         categoryexpertEntity.DIAGEOMX_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 81:
                                     case "DIAGEOPT":
                                         categoryexpertEntity.DIAGEOPT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 82:
                                     case "DIAGEOPT-Category Expert":
                                         categoryexpertEntity.DIAGEOPT_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 83:
                                     case "DIAGEOTW":
                                         categoryexpertEntity.DIAGEOTW = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 84:
                                     case "DIAGEOTW-Category Expert":
                                         categoryexpertEntity.DIAGEOTW_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 85:
                                     case "DIAGEOUK":
                                         categoryexpertEntity.DIAGEOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 86:
                                     case "DIAGEOUK-Category Expert":
                                         categoryexpertEntity.DIAGEOUK_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 87:
                                     case "DIAGEOZA":
                                         categoryexpertEntity.DIAGEOZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 88:
                                     case "DIAGEOZA-Category Expert":
                                         categoryexpertEntity.DIAGEOZA_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 89:
                                     case "EMEA-DEMO":
                                         categoryexpertEntity.EMEA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 90:
                                     case "EMEA-DEMO-Category Expert":
                                         categoryexpertEntity.EMEA_DEMO_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 91:
                                     case "FERREROIT":
                                         categoryexpertEntity.FERREROIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 92:
                                     case "FERREROIT-Category Expert":
                                         categoryexpertEntity.FERREROIT_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 93:
                                     case "GILLETTEUS":
                                         categoryexpertEntity.GILLETTEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 94:
                                     case "GILLETTEUS-Category Expert":
                                         categoryexpertEntity.GILLETTEUS_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 95:
                                     case "GOOGLEUS":
                                         categoryexpertEntity.GOOGLEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 96:
                                     case "GOOGLEUS-Category Expert":
                                         categoryexpertEntity.GOOGLEUS_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 97:
                                     case "HBCDE":
                                         categoryexpertEntity.HBCDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 98:
                                     case "HBCDE-Category Expert":
                                         categoryexpertEntity.HBCDE_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 99:
                                     case "HEINEKENCN":
                                         categoryexpertEntity.HEINEKENCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 100:
                                     case "HEINEKENCN-Category Expert":
                                         categoryexpertEntity.HEINEKENCN_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 101:
                                     case "HEINEKENUS-PROD":
                                         categoryexpertEntity.HEINEKENUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 102:
                                     case "HEINEKENUS-PROD-Category Expert":
                                         categoryexpertEntity.HEINEKENUS_PROD_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 103:
                                     case "HEINZCR":
                                         categoryexpertEntity.HEINZCR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 104:
                                     case "HEINZCR-Category Expert":
                                         categoryexpertEntity.HEINZCR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 105:
                                     case "INBEVAR":
                                         categoryexpertEntity.INBEVAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 106:
                                     case "INBEVAR-Category Expert":
                                         categoryexpertEntity.INBEVAR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 107:
                                     case "INBEVBE":
                                         categoryexpertEntity.INBEVBE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 108:
                                     case "INBEVBE-Category Expert":
                                         categoryexpertEntity.INBEVBE_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 109:
                                     //case "INBEVBE-SAND":
                                     //    categoryexpertEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     ////case 110:
                                     //case "INBEVBE-SAND-Category Expert":
                                     //    categoryexpertEntity.INBEVBE_SAND_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                     //    break;
                                     //case 111:
                                     case "INBEVBR":
                                         categoryexpertEntity.INBEVBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 112:
                                     case "INBEVBR-Category Expert":
                                         categoryexpertEntity.INBEVBR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 113:
                                     case "INBEVBR_ONTRADE":
                                         categoryexpertEntity.INBEVBR_ONTRADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 114:
                                     case "INBEVBR_ONTRADE-Category Expert":
                                         categoryexpertEntity.INBEVBR_ONTRADE_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 115:
                                     case "INBEVCL":
                                         categoryexpertEntity.INBEVCL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 116:
                                     case "INBEVCL-Category Expert":
                                         categoryexpertEntity.INBEVCL_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 117:
                                     case "INBEVCN":
                                         categoryexpertEntity.INBEVCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 118:
                                     case "INBEVCN-Category Expert":
                                         categoryexpertEntity.INBEVCN_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 119:
                                     case "INBEVCOOLERAR":
                                         categoryexpertEntity.INBEVCOOLERAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 120:
                                     case "INBEVCOOLERAR-Category Expert":
                                         categoryexpertEntity.INBEVCOOLERAR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 121:
                                     case "INBEVCOOLERBR":
                                         categoryexpertEntity.INBEVCOOLERBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 122:
                                     case "INBEVCOOLERBR-Category Expert":
                                         categoryexpertEntity.INBEVCOOLERBR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 123:
                                     case "INBEVCOOLERUS":
                                         categoryexpertEntity.INBEVCOOLERUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 124:
                                     case "INBEVCOOLERUS-Category Expert":
                                         categoryexpertEntity.INBEVCOOLERUS_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 125:
                                     case "INBEVFR":
                                         categoryexpertEntity.INBEVFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 126:
                                     case "INBEVFR-Category Expert":
                                         categoryexpertEntity.INBEVFR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 127:
                                     case "INBEVLU":
                                         categoryexpertEntity.INBEVLU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 128:
                                     case "INBEVLU-Category Expert":
                                         categoryexpertEntity.INBEVLU_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 129:
                                     case "INBEVLU-SAND":
                                         categoryexpertEntity.INBEVLU_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 130:
                                     case "INBEVLU-SAND-Category Expert":
                                         categoryexpertEntity.INBEVLU_SAND_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 131:
                                     case "INBEVMX":
                                         categoryexpertEntity.INBEVMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 132:
                                     case "INBEVMX-Category Expert":
                                         categoryexpertEntity.INBEVMX_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 133:
                                     case "INBEVNL":
                                         categoryexpertEntity.INBEVNL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 134:
                                     case "INBEVNL-Category Expert":
                                         categoryexpertEntity.INBEVNL_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 135:
                                     case "INBEVNL-SAND":
                                         categoryexpertEntity.INBEVNL_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 136:
                                     case "INBEVNL-SAND-Category Expert":
                                         categoryexpertEntity.INBEVNL_SAND_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 137:
                                     case "INBEVPY":
                                         categoryexpertEntity.INBEVPY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 138:
                                     case "INBEVPY-Category Expert":
                                         categoryexpertEntity.INBEVPY_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 139:
                                     case "INBEVTRADMX":
                                         categoryexpertEntity.INBEVTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 140:
                                     case "INBEVTRADMX-Category Expert":
                                         categoryexpertEntity.INBEVTRADMX_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 141:
                                     case "INBEVUS":
                                         categoryexpertEntity.INBEVUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 142:
                                     case "INBEVUS-Category Expert":
                                         categoryexpertEntity.INBEVUS_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 143:
                                     case "JTIUA":
                                         categoryexpertEntity.JTIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 144:
                                     case "JTIUA-Category Expert":
                                         categoryexpertEntity.JTIUA_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 145:
                                     case "KCMY":
                                         categoryexpertEntity.KCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 146:
                                     case "KCMY-Category Expert":
                                         categoryexpertEntity.KCMY_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 147:
                                     case "KCUS":
                                         categoryexpertEntity.KCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 148:
                                     case "KCUS-Category Expert":
                                         categoryexpertEntity.KCUS_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 149:
                                     case "KEURIGCA":
                                         categoryexpertEntity.KEURIGCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 150:
                                     case "KEURIGCA-Category Expert":
                                         categoryexpertEntity.KEURIGCA_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////// just only finished 150 //////////////
                                     //case 151:
                                     case "LABATTPLNOPTCA":
                                         categoryexpertEntity.LABATTPLNOPTCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 152:
                                     case "LABATTPLNOPTCA-Category Expert":
                                         categoryexpertEntity.LABATTPLNOPTCA_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 153:
                                     case "LAVAZZAAT":
                                         categoryexpertEntity.LAVAZZAAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 154:
                                     case "LAVAZZAAT-Category Expert":
                                         categoryexpertEntity.LAVAZZAAT_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 155:
                                     case "LAVAZZAAU":
                                         categoryexpertEntity.LAVAZZAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 156:
                                     case "LAVAZZAAU-Category Expert":
                                         categoryexpertEntity.LAVAZZAAU_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 157:
                                     case "LAVAZZABE":
                                         categoryexpertEntity.LAVAZZABE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 158:
                                     case "LAVAZZABE-Category Expert":
                                         categoryexpertEntity.LAVAZZABE_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 159:
                                     case "LAVAZZABG":
                                         categoryexpertEntity.LAVAZZABG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 160:
                                     case "LAVAZZABG-Category Expert":
                                         categoryexpertEntity.LAVAZZABG_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 161:
                                     case "LAVAZZACA":
                                         categoryexpertEntity.LAVAZZACA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 162:
                                     case "LAVAZZACA-Category Expert":
                                         categoryexpertEntity.LAVAZZACA_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 163:
                                     case "LAVAZZACH":
                                         categoryexpertEntity.LAVAZZACH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 164:
                                     case "LAVAZZACH-Category Expert":
                                         categoryexpertEntity.LAVAZZACH_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 165:
                                     case "LAVAZZACL":
                                         categoryexpertEntity.LAVAZZACL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 166:
                                     case "LAVAZZACL-Category Expert":
                                         categoryexpertEntity.LAVAZZACL_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 167:
                                     case "LAVAZZACN":
                                         categoryexpertEntity.LAVAZZACN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 168:
                                     case "LAVAZZACN-Category Expert":
                                         categoryexpertEntity.LAVAZZACN_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 169:
                                     case "LAVAZZACZ":
                                         categoryexpertEntity.LAVAZZACZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 170:
                                     case "LAVAZZACZ-Category Expert":
                                         categoryexpertEntity.LAVAZZACZ_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 171:
                                     case "LAVAZZADE":
                                         categoryexpertEntity.LAVAZZADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 172:
                                     case "LAVAZZADE-Category Expert":
                                         categoryexpertEntity.LAVAZZADE_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 173:
                                     case "LAVAZZADK":
                                         categoryexpertEntity.LAVAZZADK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 174:
                                     case "LAVAZZADK-Category Expert":
                                         categoryexpertEntity.LAVAZZADK_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 175:
                                     case "LAVAZZAEE":
                                         categoryexpertEntity.LAVAZZAEE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 176:
                                     case "LAVAZZAEE-Category Expert":
                                         categoryexpertEntity.LAVAZZAEE_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 177:
                                     case "LAVAZZAES":
                                         categoryexpertEntity.LAVAZZAES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 178:
                                     case "LAVAZZAES-Category Expert":
                                         categoryexpertEntity.LAVAZZAES_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 179:
                                     case "LAVAZZAFR":
                                         categoryexpertEntity.LAVAZZAFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 180:
                                     case "LAVAZZAFR-Category Expert":
                                         categoryexpertEntity.LAVAZZAFR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 181:
                                     case "LAVAZZAGR":
                                         categoryexpertEntity.LAVAZZAGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 182:
                                     case "LAVAZZAGR-Category Expert":
                                         categoryexpertEntity.LAVAZZAGR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 183:
                                     case "LAVAZZAHK":
                                         categoryexpertEntity.LAVAZZAHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 184:
                                     case "LAVAZZAHK-Category Expert":
                                         categoryexpertEntity.LAVAZZAHK_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 185:
                                     case "LAVAZZAHR":
                                         categoryexpertEntity.LAVAZZAHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 186:
                                     case "LAVAZZAHR-Category Expert":
                                         categoryexpertEntity.LAVAZZAHR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 187:
                                     case "LAVAZZAIL":
                                         categoryexpertEntity.LAVAZZAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 188:
                                     case "LAVAZZAIL-Category Expert":
                                         categoryexpertEntity.LAVAZZAIL_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 189:
                                     case "LAVAZZAIT":
                                         categoryexpertEntity.LAVAZZAIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 190:
                                     case "LAVAZZAIT-Category Expert":
                                         categoryexpertEntity.LAVAZZAIT_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 191:
                                     case "LAVAZZAJP":
                                         categoryexpertEntity.LAVAZZAJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 192:
                                     case "LAVAZZAJP-Category Expert":
                                         categoryexpertEntity.LAVAZZAJP_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 193:
                                     case "LAVAZZAKR":
                                         categoryexpertEntity.LAVAZZAKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 194:
                                     case "LAVAZZAKR-Category Expert":
                                         categoryexpertEntity.LAVAZZAKR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 195:
                                     case "LAVAZZALT":
                                         categoryexpertEntity.LAVAZZALT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 196:
                                     case "LAVAZZALT-Category Expert":
                                         categoryexpertEntity.LAVAZZALT_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 197:
                                     case "LAVAZZALU":
                                         categoryexpertEntity.LAVAZZALU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 198:
                                     case "LAVAZZALU-Category Expert":
                                         categoryexpertEntity.LAVAZZALU_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 199:
                                     case "LAVAZZALV":
                                         categoryexpertEntity.LAVAZZALV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 200:
                                     case "LAVAZZALV-Category Expert":
                                         categoryexpertEntity.LAVAZZALV_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 201:
                                     case "LAVAZZAMA":
                                         categoryexpertEntity.LAVAZZAMA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 202:
                                     case "LAVAZZAMA-Category Expert":
                                         categoryexpertEntity.LAVAZZAMA_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 203:
                                     case "LAVAZZANL":
                                         categoryexpertEntity.LAVAZZANL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 204:
                                     case "LAVAZZANL-Category Expert":
                                         categoryexpertEntity.LAVAZZANL_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 205:
                                     case "LAVAZZAPL":
                                         categoryexpertEntity.LAVAZZAPL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 206:
                                     case "LAVAZZAPL-Category Expert":
                                         categoryexpertEntity.LAVAZZAPL_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 207:
                                     case "LAVAZZARO":
                                         categoryexpertEntity.LAVAZZARO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 208:
                                     case "LAVAZZARO-Category Expert":
                                         categoryexpertEntity.LAVAZZARO_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 209:
                                     case "LAVAZZARU":
                                         categoryexpertEntity.LAVAZZARU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 210:
                                     case "LAVAZZARU-Category Expert":
                                         categoryexpertEntity.LAVAZZARU_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 211:
                                     case "LAVAZZASA":
                                         categoryexpertEntity.LAVAZZASA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 212:
                                     case "LAVAZZASA-Category Expert":
                                         categoryexpertEntity.LAVAZZASA_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 213:
                                     case "LAVAZZASE":
                                         categoryexpertEntity.LAVAZZASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 214:
                                     case "LAVAZZASE-Category Expert":
                                         categoryexpertEntity.LAVAZZASE_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 215:
                                     case "LAVAZZASG":
                                         categoryexpertEntity.LAVAZZASG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 216:
                                     case "LAVAZZASG-Category Expert":
                                         categoryexpertEntity.LAVAZZASG_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 217:
                                     case "LAVAZZAUAE":
                                         categoryexpertEntity.LAVAZZAUAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 218:
                                     case "LAVAZZAUAE-Category Expert":
                                         categoryexpertEntity.LAVAZZAUAE_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 219:
                                     case "LAVAZZAUK":
                                         categoryexpertEntity.LAVAZZAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 220:
                                     case "LAVAZZAUK-Category Expert":
                                         categoryexpertEntity.LAVAZZAUK_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 221:
                                     case "LAVAZZAUS":
                                         categoryexpertEntity.LAVAZZAUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 222:
                                     case "LAVAZZAUS-Category Expert":
                                         categoryexpertEntity.LAVAZZAUS_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 223:

                                     case "LAVAZZAZA":
                                         categoryexpertEntity.LAVAZZAZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     case "LAVAZZAZA-Category Expert":
                                         categoryexpertEntity.LAVAZZAZA_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 225:
                                     case "LRSUK":
                                         categoryexpertEntity.LRSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 226:
                                     case "LRSUK-Category Expert":
                                         categoryexpertEntity.LRSUK_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 227:
                                     case "MARSBR":
                                         categoryexpertEntity.MARSBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 228:
                                     case "MARSBR-Category Expert":
                                         categoryexpertEntity.MARSBR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 229:
                                     case "MARSIN":
                                         categoryexpertEntity.MARSIN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 230:
                                     case "MARSIN-Category Expert":
                                         categoryexpertEntity.MARSIN_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 231:
                                     case "MARSIN-OLD":
                                         categoryexpertEntity.MARSIN_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 232:
                                     case "MARSIN-OLD-Category Expert":
                                         categoryexpertEntity.MARSIN_OLD_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 233:
                                     case "MARSRU-PROD":
                                         categoryexpertEntity.MARSRU_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 234:
                                     case "MARSRU-PROD-Category Expert":
                                         categoryexpertEntity.MARSRU_PROD_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 235:
                                     case "MAYORAID":
                                         categoryexpertEntity.MAYORAID = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 236:
                                     case "MAYORAID-Category Expert":
                                         categoryexpertEntity.MAYORAID_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 237:
                                     case "MJNCN":
                                         categoryexpertEntity.MJNCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 238:
                                     case "MJNCN-Category Expert":
                                         categoryexpertEntity.MJNCN_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 239:
                                     case "MOLSONCOOLERHN":
                                         categoryexpertEntity.MOLSONCOOLERHN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 240:
                                     case "MOLSONCOOLERHN-Category Expert":
                                         categoryexpertEntity.MOLSONCOOLERHN_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 241:
                                     case "MOLSONCOOLERHR":
                                         categoryexpertEntity.MOLSONCOOLERHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 242:
                                     case "MOLSONCOOLERHR-Category Expert":
                                         categoryexpertEntity.MOLSONCOOLERHR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 243:
                                     case "MOLSONCOORSUK":
                                         categoryexpertEntity.MOLSONCOORSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 244:
                                     case "MOLSONCOORSUK-Category Expert":
                                         categoryexpertEntity.MOLSONCOORSUK_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 245:
                                     case "NESTLEUK":
                                         categoryexpertEntity.NESTLEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 246:
                                     case "NESTLEUK-Category Expert":
                                         categoryexpertEntity.NESTLEUK_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 247:
                                     case "NIVEAUK":
                                         categoryexpertEntity.NIVEAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 248:
                                     case "NIVEAUK-Category Expert":
                                         categoryexpertEntity.NIVEAUK_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 249:
                                     case "NRF2017-DEMO":
                                         categoryexpertEntity.NRF2017_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 250:
                                     case "NRF2017-DEMO-Category Expert":
                                         categoryexpertEntity.NRF2017_DEMO_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 251:
                                     case "ONE-AMERICAS-DEMO":
                                         categoryexpertEntity.ONE_AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 252:                                  
                                     case "ONE-AMERICAS-DEMO-Category Expert":
                                         categoryexpertEntity.ONE_AMERICAS_DEMO_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 253:
                                     case "ONE-APAC-DEMO":
                                         categoryexpertEntity.ONE_APAC_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 254:
                                     case "ONE-APAC-DEMO-Category Expert":
                                         categoryexpertEntity.ONE_APAC_DEMO_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 255:
                                     case "PEPSICOBR":
                                         categoryexpertEntity.PEPSICOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 256:
                                     case "PEPSICOBR-Category Expert":
                                         categoryexpertEntity.PEPSICOBR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 257:
                                     case "PNGAU":
                                         categoryexpertEntity.PNGAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 258:
                                     case "PNGAU-Category Expert":
                                         categoryexpertEntity.PNGAU_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 259:
                                     case "PNGAU-OLD":
                                         categoryexpertEntity.PNGAU_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 260:
                                     case "PNGAU-OLD-Category Expert":
                                         categoryexpertEntity.PNGAU_OLD_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 261:
                                     case "PNGCAREUS":
                                         categoryexpertEntity.PNGCAREUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 262:
                                     case "PNGCAREUS-Category Expert":
                                         categoryexpertEntity.PNGCAREUS_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 263:
                                     case "PNGCN-PROD":
                                         categoryexpertEntity.PNGCN_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 264:
                                     case "PNGCN-PROD-Category Expert":
                                         categoryexpertEntity.PNGCN_PROD_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 265:
                                     case "PNGJP":
                                         categoryexpertEntity.PNGJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 266:
                                     case "PNGJP-Category Expert":
                                         categoryexpertEntity.PNGJP_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 267:
                                     case "PNGJP-OLD":
                                         categoryexpertEntity.PNGJP_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 268:
                                     case "PNGJP-OLD-Category Expert":
                                         categoryexpertEntity.PNGJP_OLD_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 269:
                                     case "PNGUS":
                                         categoryexpertEntity.PNGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 270:
                                     case "PNGUS-Category Expert":
                                         categoryexpertEntity.PNGUS_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 271:
                                     case "PNGUSEPISODIC":
                                         categoryexpertEntity.PNGUSEPISODIC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 272:
                                     case "PNGUSEPISODIC-Category Expert":
                                         categoryexpertEntity.PNGUSEPISODIC_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 273:
                                     case "RBUS":
                                         categoryexpertEntity.RBUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 274:
                                     case "RBUS-Category Expert":
                                         categoryexpertEntity.RBUS_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 275:
                                     case "RE-XSUITE-DEMO":
                                         categoryexpertEntity.RE_XSUITE_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 276:
                                     case "RE-XSUITE-DEMO-Category Expert":
                                         categoryexpertEntity.RE_XSUITE_DEMO_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 277:
                                     case "REPNGCN-DEMO":
                                         categoryexpertEntity.REPNGCN_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 278:
                                     case "REPNGCN-DEMO-Category Expert":
                                         categoryexpertEntity.REPNGCN_DEMO_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 279:
                                     case "RI-DEMO":
                                         categoryexpertEntity.RI_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 280:
                                     case "RI-DEMO-Category Expert":
                                         categoryexpertEntity.RI_DEMO_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 281:
                                     case "RI-DIAGEOAU":
                                         categoryexpertEntity.RI_DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 282:
                                     case "RI-DIAGEOAU-Category Expert":
                                         categoryexpertEntity.RI_DIAGEOAU_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 283:
                                     case "RIALCBEVUK-PROD":
                                         categoryexpertEntity.RIALCBEVUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 284:
                                     case "RIALCBEVUK-PROD-Category Expert":
                                         categoryexpertEntity.RIALCBEVUK_PROD_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 285:
                                     case "RICOFFEEUS":
                                         categoryexpertEntity.RICOFFEEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 286:
                                     case "RICOFFEEUS-Category Expert":
                                         categoryexpertEntity.RICOFFEEUS_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 287:
                                     case "RINIELSENUS":
                                         categoryexpertEntity.RINIELSENUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 288:
                                     case "RINIELSENUS-Category Expert":
                                         categoryexpertEntity.RINIELSENUS_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 289:
                                     case "RIPETCAREUK-PROD":
                                         categoryexpertEntity.RIPETCAREUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 290:
                                     case "RIPETCAREUK-PROD-Category Expert":
                                         categoryexpertEntity.RIPETCAREUK_PROD_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 291:
                                     case "RIUS":
                                         categoryexpertEntity.RIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 292:
                                     case "RIUS-Category Expert":
                                         categoryexpertEntity.RIUS_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 293:
                                     case "RIUS-DEV":
                                         categoryexpertEntity.RIUS_DEV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 294:
                                     case "RIUS-DEV-Category Expert":
                                         categoryexpertEntity.RIUS_DEV_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 295:
                                     case "RNBDE":
                                         categoryexpertEntity.RNBDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 296:
                                     case "RNBDE-Category Expert":
                                         categoryexpertEntity.RNBDE_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 297:
                                     case "SMARTCOOLER-POC2":
                                         categoryexpertEntity.SMARTCOOLER_POC2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 298:
                                     case "SMARTCOOLER-POC2-Category Expert":
                                         categoryexpertEntity.SMARTCOOLER_POC2_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 299:
                                     case "SMARTCOOLER-TRN":
                                         categoryexpertEntity.SMARTCOOLER_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 300:
                                     case "SMARTCOOLER-TRN-Category Expert":
                                         categoryexpertEntity.SMARTCOOLER_TRN_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 301:
                                     case "SMARTCOOLER2-TRN":
                                         categoryexpertEntity.SMARTCOOLER2_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 302:
                                     case "SMARTCOOLER2-TRN-Category Expert":
                                         categoryexpertEntity.SMARTCOOLER2_TRN_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 303:
                                     case "SOLARBR":
                                         categoryexpertEntity.SOLARBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 304:
                                     case "SOLARBR-Category Expert":
                                         categoryexpertEntity.SOLARBR_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 305:
                                     case "STATIC-CAMERA-DEMO":
                                         categoryexpertEntity.STATIC_CAMERA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 306:
                                     case "STATIC-CAMERA-DEMO-Category Expert":
                                         categoryexpertEntity.STATIC_CAMERA_DEMO_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 307:
                                     case "SWIRECN":
                                         categoryexpertEntity.SWIRECN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 308:
                                     case "SWIRECN-Category Expert":
                                         categoryexpertEntity.SWIRECN_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 309:
                                     case "SWIREREDCN":
                                         categoryexpertEntity.SWIREREDCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 310:
                                     case "SWIREREDCN-Category Expert":
                                         categoryexpertEntity.SWIREREDCN_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 311:
                                     case "TNUVAIL":
                                         categoryexpertEntity.TNUVAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 312:
                                     case "TNUVAIL-Category Expert":
                                         categoryexpertEntity.TNUVAIL_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 313:
                                     case "TRAXDEMO-TS-PROD":
                                         categoryexpertEntity.TRAXDEMO_TS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 314:
                                     case "TRAXDEMO-TS-PROD-Category Expert":
                                         categoryexpertEntity.TRAXDEMO_TS_PROD_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 315:
                                     case "TWEAU":
                                         categoryexpertEntity.TWEAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 316:
                                     case "TWEAU-Category Expert":
                                         categoryexpertEntity.TWEAU_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 317:
                                     case "RI-DEMO2":
                                         categoryexpertEntity.RI_DEMO2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 318:
                                     case "RI-DEMO2-Category Expert":
                                         categoryexpertEntity.RI_DEMO2_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 319:
                                     case "COMPASSCCH-SAND":
                                         categoryexpertEntity.COMPASSCCH_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 320:
                                     case "COMPASSCCH-SAND-Category Expert":
                                         categoryexpertEntity.COMPASSCCH_SAND_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 321:
                                     case "LAVAZZAIT-SAND":
                                         categoryexpertEntity.LAVAZZAIT_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 322:
                                     case "LAVAZZAIT-SAND-Category Expert":
                                         categoryexpertEntity.LAVAZZAIT_SAND_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     ////////////////////////
                                     //case 323:
                                     case "INBEVUS-STG":
                                         categoryexpertEntity.INBEVUS_STG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 324:
                                     case "INBEVUS-STG-Category Expert":
                                         categoryexpertEntity.INBEVUS_STG_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 325:
                                     case "LAVAZZAFR-SAND":
                                         categoryexpertEntity.LAVAZZAFR_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 326:
                                     case "LAVAZZAFR-SAND-Category Expert":
                                         categoryexpertEntity.LAVAZZAFR_SAND_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 327:
                                     case "INBEVBE-SAND":
                                         categoryexpertEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 328:
                                     case "INBEVBE-SAND-Category Expert":
                                         categoryexpertEntity.INBEVBE_SAND_CategoryExpert = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //NEW Columns Addition
                                     //case 333:
                                     case "B2BRU":
                                         categoryexpertEntity.B2BRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 334:
                                     case "BRMUS":
                                         categoryexpertEntity.BRMUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 335:
                                     case "CBCIL":
                                         categoryexpertEntity.CBCIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 336:
                                     case "CCCOOLERMX":
                                         categoryexpertEntity.CCCOOLERMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 337:
                                     case "DIAGEOAR":
                                         categoryexpertEntity.DIAGEOAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 338:
                                     case "DIAGEOBENELUX":
                                         categoryexpertEntity.DIAGEOBENELUX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 339:
                                     case "DIAGEOCH":
                                         categoryexpertEntity.DIAGEOCH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 340:
                                     case "DIAGEOGA":
                                         categoryexpertEntity.DIAGEOGA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 341:
                                     case "DIAGEOGTR":
                                         categoryexpertEntity.DIAGEOGTR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 342:
                                     case "DIAGEONORDICS":
                                         categoryexpertEntity.DIAGEONORDICS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 343:
                                     case "DIAGEOUS":
                                         categoryexpertEntity.DIAGEOUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 344:
                                     case "FERREROEXTIT":
                                         categoryexpertEntity.FERREROEXTIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 345:
                                     case "GOOGLEHK":
                                         categoryexpertEntity.GOOGLEHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 346:
                                     case "HEINEKENPILOTCN":
                                         categoryexpertEntity.HEINEKENPILOTCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 347:
                                     case "IMBO":
                                         categoryexpertEntity.IMBO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 348:
                                     case "INBEVCI":
                                         categoryexpertEntity.INBEVCI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 349:
                                     case "INBEVCNTT":
                                         categoryexpertEntity.INBEVCNTT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 350:
                                     case "INBEVCO":
                                         categoryexpertEntity.INBEVCO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 351:
                                     case "INBEVZA":
                                         categoryexpertEntity.INBEVZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 352:
                                     case "INORU":
                                         categoryexpertEntity.INORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 353:
                                     case "JJSP":
                                         categoryexpertEntity.JJSP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 354:
                                     case "JNJES":
                                         categoryexpertEntity.JNJES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 355:
                                     case "JNJUK":
                                         categoryexpertEntity.JNJUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 356:
                                     case "JRIJP":
                                         categoryexpertEntity.JRIJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 357:
                                     case "KELLOGSUSPOC":
                                         categoryexpertEntity.KELLOGSUSPOC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 358:
                                     case "KRAFTUS":
                                         categoryexpertEntity.KRAFTUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 359:
                                     case "MARS-CHOCO-RU":
                                         categoryexpertEntity.MARS_CHOCO_RU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 360:
                                     case "MHUK":
                                         categoryexpertEntity.MHUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 361:
                                     case "MILLERCOORS":
                                         categoryexpertEntity.MILLERCOORS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 362:
                                     case "MOLSONONTRADEUK":
                                         categoryexpertEntity.MOLSONONTRADEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 363:
                                     case "MYCHEMISTAU":
                                         categoryexpertEntity.MYCHEMISTAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 364:
                                     case "NESTLEROAMLERUK":
                                         categoryexpertEntity.NESTLEROAMLERUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 365:
                                     case "NRF2018":
                                         categoryexpertEntity.NRF2018 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 366:
                                     case "PENAFLORAR":
                                         categoryexpertEntity.PENAFLORAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 367:
                                     case "PMIUA":
                                         categoryexpertEntity.PMIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 368:
                                     case "PNGAMERICA":
                                         categoryexpertEntity.PNGAMERICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 369:
                                     case "PNGRO":
                                         categoryexpertEntity.PNGRO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 370:
                                     case "RBAU":
                                         categoryexpertEntity.RBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 371:
                                     case "RBCA":
                                         categoryexpertEntity.RBCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 372:
                                     case "RBDK":
                                         categoryexpertEntity.RBDK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 373:
                                     case "RBMANUAL":
                                         categoryexpertEntity.RBMANUAL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 374:
                                     case "RINIELSENRU-MARS":
                                         categoryexpertEntity.RINIELSENRU_MARS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 375:
                                     case "RINIELSENUSQI":
                                         categoryexpertEntity.RINIELSENUSQI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 376:
                                     case "RIPANELCN":
                                         categoryexpertEntity.RIPANELCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 377:
                                     case "RISPARKWINEDE":
                                         categoryexpertEntity.RISPARKWINEDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 378:
                                     case "SANOFIAE":
                                         categoryexpertEntity.SANOFIAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 379:
                                     case "SANOFIAU":
                                         categoryexpertEntity.SANOFIAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 380:
                                     case "SANOFIHK":
                                         categoryexpertEntity.SANOFIHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 381:
                                     case "SANOFIKH":
                                         categoryexpertEntity.SANOFIKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 382:
                                     case "SANOFINZ":
                                         categoryexpertEntity.SANOFINZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 383:
                                     case "SANOFIRU":
                                         categoryexpertEntity.SANOFIRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 384:
                                     case "SANOFITR":
                                         categoryexpertEntity.SANOFITR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 385:
                                     case "SANOFIUA":
                                         categoryexpertEntity.SANOFIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 386:
                                     case "SHUFERSALIL":
                                         categoryexpertEntity.SHUFERSALIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 387:
                                     case "SUNTORYJP":
                                         categoryexpertEntity.SUNTORYJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 388:
                                     case "TESCOTH":
                                         categoryexpertEntity.TESCOTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 389:
                                     case "TESCOUK":
                                         categoryexpertEntity.TESCOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 390:
                                     case "TRAXROBOT":
                                         categoryexpertEntity.TRAXROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;
                                     //case 391:
                                     case "XSUITE-SHOWCASE":
                                         categoryexpertEntity.XSUITE_SHOWCASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 392:
                                     case "ABIUS":
                                         categoryexpertEntity.ABIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 393:
                                     case "BADGERROBOT":
                                         categoryexpertEntity.BADGERROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 394:
                                     case "CUBAU":
                                         categoryexpertEntity.CUBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 395:
                                     case "DIAGEORU":
                                         categoryexpertEntity.DIAGEORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 396:
                                     case "GFKFR":
                                         categoryexpertEntity.GFKFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 397:
                                     case "JNJIT":
                                         categoryexpertEntity.JNJIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 398:
                                     case "LIGHTTRAX":
                                         categoryexpertEntity.LIGHTTRAX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 399:
                                     case "LIGHTTRAXOFFLINE":
                                         categoryexpertEntity.LIGHTTRAXOFFLINE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 400:
                                     case "RINIELSENFR":
                                         categoryexpertEntity.RINIELSENFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 401:
                                     case "SANOFIKZ":
                                         categoryexpertEntity.SANOFIKZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 402:
                                     case "SANOFILB":
                                         categoryexpertEntity.SANOFILB = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 403:
                                     case "SANOFISA":
                                         categoryexpertEntity.SANOFISA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 404:
                                     case "SANOFIZA":
                                         categoryexpertEntity.SANOFIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 405:
                                     case "WATSONSHK":
                                         categoryexpertEntity.WATSONSHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 406:
                                     case "KELLOGGUS":
                                         categoryexpertEntity.KELLOGGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     //case 407:
                                     case "TSINGTAOBEERCN":
                                         categoryexpertEntity.TSINGTAOBEERCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                         break;

                                     #region "No need region"

                                     #endregion

                                     default: break;


                                     #endregion
                                 }
                             }
                        }

                    }
                    catch (Exception ex)
                    {
                        Response.Redirect("error.aspx");
                        throw ex;
                    }
                }
                if (globalCenterName == center && rowNumber > 1)
                {
                    categoryexpertEntity.ImportedDate = GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim());//GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    categoryexpertEntity.ImportedYear = categoryexpertEntity.ImportedDate.Substring(0, 6);
                    //pricingprobesEntity.ImportTime = GeneralUtility.ConvertSystemTimeFormat(System.DateTime.Now);
                    categoryexpertEntity.CreatedDate = GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    categoryexpertEntity.CreatedBy = userEntity.ID;


                    categoryexpertlist.Add(categoryexpertEntity);
                }

                #endregion
            }
        }

        private void SmartStitching_BindBusiness(List<SmartStitchingEntity> smartstitchinglist, ExcelWorksheet ws)
        {
            var userEntity = (UserEntity)Session["ID"];
            for (var rowNumber = 1; rowNumber <= ws.Dimension.End.Row; rowNumber++)
            {
                var smartstitchingEntity = new SmartStitchingEntity();

                smartstitchingEntity.ID = GeneralUtility.GeneratedKey;

                #region Populate Excel data

                for (var colNumber = 1; colNumber <= ws.Dimension.End.Column; colNumber++)
                {

                    try
                    {
                        if (true)
                        {
                            switch (colNumber)
                            {
                                #region
                                case 1:
                                    smartstitchingEntity.QAT = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 2:
                                    smartstitchingEntity.Center = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 3:
                                    smartstitchingEntity.TotalSmartStitching = Convert.ToInt32(ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 4:
                                    smartstitchingEntity.AvgsecondsperSmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 5:
                                    smartstitchingEntity.ABICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 6:
                                    smartstitchingEntity.ABICA_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 7:
                                    smartstitchingEntity.ABITAMSUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 8:
                                    smartstitchingEntity.ABITAMSUS_PROD_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 9:
                                    smartstitchingEntity.AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 10:
                                    smartstitchingEntity.AMERICAS_DEMO_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 11:
                                    smartstitchingEntity.BATRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 12:
                                    smartstitchingEntity.BATRU_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 13:
                                    smartstitchingEntity.BIKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 14:
                                    smartstitchingEntity.BIKR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 15:
                                    smartstitchingEntity.BIMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 16:
                                    smartstitchingEntity.BIMY_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 17:
                                    smartstitchingEntity.BIPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 18:
                                    smartstitchingEntity.BIPH_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 19:
                                    smartstitchingEntity.BISEASK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 20:
                                    smartstitchingEntity.BISEASK_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 21:
                                    smartstitchingEntity.BITH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 22:
                                    smartstitchingEntity.BITH_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 23:
                                    smartstitchingEntity.BIVN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 24:
                                    smartstitchingEntity.BIVN_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 25:
                                    smartstitchingEntity.BPAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 26:
                                    smartstitchingEntity.BPAU_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 27:
                                    smartstitchingEntity.BRODMANN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 28:
                                    smartstitchingEntity.BRODMANN_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 29:
                                    smartstitchingEntity.CARREFOURAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 30:
                                    smartstitchingEntity.CARREFOURAR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 31:
                                    smartstitchingEntity.CCAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 32:
                                    smartstitchingEntity.CCAAU_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 33:
                                    smartstitchingEntity.CCABIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 34:
                                    smartstitchingEntity.CCABIZA_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 35:
                                    smartstitchingEntity.CCANZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 36:
                                    smartstitchingEntity.CCANZ_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 37:
                                    smartstitchingEntity.CCBOTTLERSUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 38:
                                    smartstitchingEntity.CCBOTTLERSUS_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 39:
                                    smartstitchingEntity.CCBR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 40:
                                    smartstitchingEntity.CCBR_PROD_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 41:
                                    smartstitchingEntity.CCJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 42:
                                    smartstitchingEntity.CCJP_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 43:
                                    smartstitchingEntity.CCKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 44:
                                    smartstitchingEntity.CCKH_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 45:
                                    smartstitchingEntity.CCKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 46:
                                    smartstitchingEntity.CCKR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 47:
                                    smartstitchingEntity.CCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 48:
                                    smartstitchingEntity.CCMY_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 49:
                                    smartstitchingEntity.CCPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 50:
                                    smartstitchingEntity.CCPH_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 51:
                                    smartstitchingEntity.CCRPR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 52:
                                    smartstitchingEntity.CCRPR_PROD_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 53:
                                    smartstitchingEntity.CCRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 54:
                                    smartstitchingEntity.CCRU_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 55:
                                    smartstitchingEntity.CCTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 56:
                                    smartstitchingEntity.CCTH_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 57:
                                    smartstitchingEntity.CCTH_UAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 58:
                                    smartstitchingEntity.CCTH_UAT_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 59:
                                    smartstitchingEntity.CCTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 60:
                                    smartstitchingEntity.CCTRADMX_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 61:
                                    smartstitchingEntity.CCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 62:
                                    smartstitchingEntity.CCUS_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 63:
                                    smartstitchingEntity.CCZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 64:
                                    smartstitchingEntity.CCZA_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 65:
                                    smartstitchingEntity.CEREBOSTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 66:
                                    smartstitchingEntity.CEREBOSTH_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 67:
                                    smartstitchingEntity.CROWDSOURCE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 68:
                                    smartstitchingEntity.CROWDSOURCE_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 69:
                                    smartstitchingEntity.DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 70:
                                    smartstitchingEntity.DIAGEOAU_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 71:
                                    smartstitchingEntity.DIAGEOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 72:
                                    smartstitchingEntity.DIAGEOBR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 73:
                                    smartstitchingEntity.DIAGEOGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 74:
                                    smartstitchingEntity.DIAGEOGR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 75:
                                    smartstitchingEntity.DIAGEOIE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 76:
                                    smartstitchingEntity.DIAGEOIE_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 77:
                                    smartstitchingEntity.DIAGEOKE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 78:
                                    smartstitchingEntity.DIAGEOKE_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 79:
                                    smartstitchingEntity.DIAGEOMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 80:
                                    smartstitchingEntity.DIAGEOMX_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 81:
                                    smartstitchingEntity.DIAGEOPT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 82:
                                    smartstitchingEntity.DIAGEOPT_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 83:
                                    smartstitchingEntity.DIAGEOTW = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 84:
                                    smartstitchingEntity.DIAGEOTW_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 85:
                                    smartstitchingEntity.DIAGEOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 86:
                                    smartstitchingEntity.DIAGEOUK_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 87:
                                    smartstitchingEntity.DIAGEOZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 88:
                                    smartstitchingEntity.DIAGEOZA_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 89:
                                    smartstitchingEntity.EMEA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 90:
                                    smartstitchingEntity.EMEA_DEMO_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 91:
                                    smartstitchingEntity.FERREROIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 92:
                                    smartstitchingEntity.FERREROIT_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 93:
                                    smartstitchingEntity.GILLETTEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 94:
                                    smartstitchingEntity.GILLETTEUS_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 95:
                                    smartstitchingEntity.GOOGLEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 96:
                                    smartstitchingEntity.GOOGLEUS_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 97:
                                    smartstitchingEntity.HBCDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 98:
                                    smartstitchingEntity.HBCDE_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 99:
                                    smartstitchingEntity.HEINEKENCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 100:
                                    smartstitchingEntity.HEINEKENCN_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 101:
                                    smartstitchingEntity.HEINEKENUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 102:
                                    smartstitchingEntity.HEINEKENUS_PROD_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 103:
                                    smartstitchingEntity.HEINZCR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 104:
                                    smartstitchingEntity.HEINZCR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 105:
                                    smartstitchingEntity.INBEVAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 106:
                                    smartstitchingEntity.INBEVAR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 107:
                                    smartstitchingEntity.INBEVBE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 108:
                                    smartstitchingEntity.INBEVBE_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 109:
                                    smartstitchingEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 110:
                                    smartstitchingEntity.INBEVBE_SAND_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 111:
                                    smartstitchingEntity.INBEVBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 112:
                                    smartstitchingEntity.INBEVBR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 113:
                                    smartstitchingEntity.INBEVBR_ONTRADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 114:
                                    smartstitchingEntity.INBEVBR_ONTRADE_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 115:
                                    smartstitchingEntity.INBEVCL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 116:
                                    smartstitchingEntity.INBEVCL_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 117:
                                    smartstitchingEntity.INBEVCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 118:
                                    smartstitchingEntity.INBEVCN_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 119:
                                    smartstitchingEntity.INBEVCOOLERAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 120:
                                    smartstitchingEntity.INBEVCOOLERAR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 121:
                                    smartstitchingEntity.INBEVCOOLERBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 122:
                                    smartstitchingEntity.INBEVCOOLERBR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 123:
                                    smartstitchingEntity.INBEVCOOLERUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 124:
                                    smartstitchingEntity.INBEVCOOLERUS_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 125:
                                    smartstitchingEntity.INBEVFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 126:
                                    smartstitchingEntity.INBEVFR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 127:
                                    smartstitchingEntity.INBEVLU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 128:
                                    smartstitchingEntity.INBEVLU_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 129:
                                    smartstitchingEntity.INBEVLU_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 130:
                                    smartstitchingEntity.INBEVLU_SAND_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 131:
                                    smartstitchingEntity.INBEVMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 132:
                                    smartstitchingEntity.INBEVMX_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 133:
                                    smartstitchingEntity.INBEVNL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 134:
                                    smartstitchingEntity.INBEVNL_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 135:
                                    smartstitchingEntity.INBEVNL_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 136:
                                    smartstitchingEntity.INBEVNL_SAND_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 137:
                                    smartstitchingEntity.INBEVPY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 138:
                                    smartstitchingEntity.INBEVPY_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 139:
                                    smartstitchingEntity.INBEVTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 140:
                                    smartstitchingEntity.INBEVTRADMX_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 141:
                                    smartstitchingEntity.INBEVUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 142:
                                    smartstitchingEntity.INBEVUS_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 143:
                                    smartstitchingEntity.JTIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 144:
                                    smartstitchingEntity.JTIUA_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 145:
                                    smartstitchingEntity.KCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 146:
                                    smartstitchingEntity.KCMY_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 147:
                                    smartstitchingEntity.KCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 148:
                                    smartstitchingEntity.KCUS_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 149:
                                    smartstitchingEntity.KEURIGCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 150:
                                    smartstitchingEntity.KEURIGCA_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////// just only finished 150 //////////////
                                case 151:
                                    smartstitchingEntity.LABATTPLNOPTCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 152:
                                    smartstitchingEntity.LABATTPLNOPTCA_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 153:
                                    smartstitchingEntity.LAVAZZAAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 154:
                                    smartstitchingEntity.LAVAZZAAT_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 155:
                                    smartstitchingEntity.LAVAZZAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 156:
                                    smartstitchingEntity.LAVAZZAAU_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 157:
                                    smartstitchingEntity.LAVAZZABE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 158:
                                    smartstitchingEntity.LAVAZZABE_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 159:
                                    smartstitchingEntity.LAVAZZABG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 160:
                                    smartstitchingEntity.LAVAZZABG_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 161:
                                    smartstitchingEntity.LAVAZZACA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 162:
                                    smartstitchingEntity.LAVAZZACA_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 163:
                                    smartstitchingEntity.LAVAZZACH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 164:
                                    smartstitchingEntity.LAVAZZACH_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 165:
                                    smartstitchingEntity.LAVAZZACL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 166:
                                    smartstitchingEntity.LAVAZZACL_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 167:
                                    smartstitchingEntity.LAVAZZACN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 168:
                                    smartstitchingEntity.LAVAZZACN_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 169:
                                    smartstitchingEntity.LAVAZZACZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 170:
                                    smartstitchingEntity.LAVAZZACZ_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 171:
                                    smartstitchingEntity.LAVAZZADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 172:
                                    smartstitchingEntity.LAVAZZADE_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 173:
                                    smartstitchingEntity.LAVAZZADK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 174:
                                    smartstitchingEntity.LAVAZZADK_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 175:
                                    smartstitchingEntity.LAVAZZAEE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 176:
                                    smartstitchingEntity.LAVAZZAEE_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 177:
                                    smartstitchingEntity.LAVAZZAES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 178:
                                    smartstitchingEntity.LAVAZZAES_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 179:
                                    smartstitchingEntity.LAVAZZAFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 180:
                                    smartstitchingEntity.LAVAZZAFR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 181:
                                    smartstitchingEntity.LAVAZZAGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 182:
                                    smartstitchingEntity.LAVAZZAGR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 183:
                                    smartstitchingEntity.LAVAZZAHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 184:
                                    smartstitchingEntity.LAVAZZAHK_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 185:
                                    smartstitchingEntity.LAVAZZAHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 186:
                                    smartstitchingEntity.LAVAZZAHR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 187:
                                    smartstitchingEntity.LAVAZZAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 188:
                                    smartstitchingEntity.LAVAZZAIL_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 189:
                                    smartstitchingEntity.LAVAZZAIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 190:
                                    smartstitchingEntity.LAVAZZAIT_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 191:
                                    smartstitchingEntity.LAVAZZAJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 192:
                                    smartstitchingEntity.LAVAZZAJP_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 193:
                                    smartstitchingEntity.LAVAZZAKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 194:
                                    smartstitchingEntity.LAVAZZAKR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 195:
                                    smartstitchingEntity.LAVAZZALT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 196:
                                    smartstitchingEntity.LAVAZZALT_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 197:
                                    smartstitchingEntity.LAVAZZALU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 198:
                                    smartstitchingEntity.LAVAZZALU_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 199:
                                    smartstitchingEntity.LAVAZZALV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 200:
                                    smartstitchingEntity.LAVAZZALV_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 201:
                                    smartstitchingEntity.LAVAZZAMA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 202:
                                    smartstitchingEntity.LAVAZZAMA_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 203:
                                    smartstitchingEntity.LAVAZZANL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 204:
                                    smartstitchingEntity.LAVAZZANL_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 205:
                                    smartstitchingEntity.LAVAZZAPL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 206:
                                    smartstitchingEntity.LAVAZZAPL_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 207:
                                    smartstitchingEntity.LAVAZZARO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 208:
                                    smartstitchingEntity.LAVAZZARO_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 209:
                                    smartstitchingEntity.LAVAZZARU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 210:
                                    smartstitchingEntity.LAVAZZARU_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 211:
                                    smartstitchingEntity.LAVAZZASA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 212:
                                    smartstitchingEntity.LAVAZZASA_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 213:
                                    smartstitchingEntity.LAVAZZASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 214:
                                    smartstitchingEntity.LAVAZZASE_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 215:
                                    smartstitchingEntity.LAVAZZASG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 216:
                                    smartstitchingEntity.LAVAZZASG_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 217:
                                    smartstitchingEntity.LAVAZZAUAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 218:
                                    smartstitchingEntity.LAVAZZAUAE_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 219:
                                    smartstitchingEntity.LAVAZZAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 220:
                                    smartstitchingEntity.LAVAZZAUK_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 221:
                                    smartstitchingEntity.LAVAZZAUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 222:
                                    smartstitchingEntity.LAVAZZAUS_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 223:
                                    smartstitchingEntity.LAVAZZAZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 224:
                                    smartstitchingEntity.LAVAZZAZA_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 225:
                                    smartstitchingEntity.LRSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 226:
                                    smartstitchingEntity.LRSUK_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 227:
                                    smartstitchingEntity.MARSBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 228:
                                    smartstitchingEntity.MARSBR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 229:
                                    smartstitchingEntity.MARSIN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 230:
                                    smartstitchingEntity.MARSIN_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 231:
                                    smartstitchingEntity.MARSIN_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 232:
                                    smartstitchingEntity.MARSIN_OLD_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 233:
                                    smartstitchingEntity.MARSRU_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 234:
                                    smartstitchingEntity.MARSRU_PROD_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 235:
                                    smartstitchingEntity.MAYORAID = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 236:
                                    smartstitchingEntity.MAYORAID_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 237:
                                    smartstitchingEntity.MJNCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 238:
                                    smartstitchingEntity.MJNCN_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 239:
                                    smartstitchingEntity.MOLSONCOOLERHN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 240:
                                    smartstitchingEntity.MOLSONCOOLERHN_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 241:
                                    smartstitchingEntity.MOLSONCOOLERHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 242:
                                    smartstitchingEntity.MOLSONCOOLERHR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 243:
                                    smartstitchingEntity.MOLSONCOORSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 244:
                                    smartstitchingEntity.MOLSONCOORSUK_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 245:
                                    smartstitchingEntity.NESTLEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 246:
                                    smartstitchingEntity.NESTLEUK_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 247:
                                    smartstitchingEntity.NIVEAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 248:
                                    smartstitchingEntity.NIVEAUK_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 249:
                                    smartstitchingEntity.NRF2017_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 250:
                                    smartstitchingEntity.NRF2017_DEMO_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 251:
                                    smartstitchingEntity.ONE_AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 252:
                                    smartstitchingEntity.ONE_AMERICAS_DEMO_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 253:
                                    smartstitchingEntity.ONE_APAC_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 254:
                                    smartstitchingEntity.ONE_APAC_DEMO_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 255:
                                    smartstitchingEntity.PEPSICOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 256:
                                    smartstitchingEntity.PEPSICOBR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 257:
                                    smartstitchingEntity.PNGAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 258:
                                    smartstitchingEntity.PNGAU_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 259:
                                    smartstitchingEntity.PNGAU_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 260:
                                    smartstitchingEntity.PNGAU_OLD_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 261:
                                    smartstitchingEntity.PNGCAREUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 262:
                                    smartstitchingEntity.PNGCAREUS_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 263:
                                    smartstitchingEntity.PNGCN_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 264:
                                    smartstitchingEntity.PNGCN_PROD_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 265:
                                    smartstitchingEntity.PNGJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 266:
                                    smartstitchingEntity.PNGJP_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 267:
                                    smartstitchingEntity.PNGJP_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 268:
                                    smartstitchingEntity.PNGJP_OLD_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 269:
                                    smartstitchingEntity.PNGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 270:
                                    smartstitchingEntity.PNGUS_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 271:
                                    smartstitchingEntity.PNGUSEPISODIC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 272:
                                    smartstitchingEntity.PNGUSEPISODIC_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 273:
                                    smartstitchingEntity.RBUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 274:
                                    smartstitchingEntity.RBUS_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 275:
                                    smartstitchingEntity.RE_XSUITE_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 276:
                                    smartstitchingEntity.RE_XSUITE_DEMO_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 277:
                                    smartstitchingEntity.REPNGCN_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 278:
                                    smartstitchingEntity.REPNGCN_DEMO_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 279:
                                    smartstitchingEntity.RI_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 280:
                                    smartstitchingEntity.RI_DEMO_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 281:
                                    smartstitchingEntity.RI_DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 282:
                                    smartstitchingEntity.RI_DIAGEOAU_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 283:
                                    smartstitchingEntity.RIALCBEVUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 284:
                                    smartstitchingEntity.RIALCBEVUK_PROD_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 285:
                                    smartstitchingEntity.RICOFFEEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 286:
                                    smartstitchingEntity.RICOFFEEUS_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 287:
                                    smartstitchingEntity.RINIELSENUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 288:
                                    smartstitchingEntity.RINIELSENUS_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 289:
                                    smartstitchingEntity.RIPETCAREUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 290:
                                    smartstitchingEntity.RIPETCAREUK_PROD_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 291:
                                    smartstitchingEntity.RIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 292:
                                    smartstitchingEntity.RIUS_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 293:
                                    smartstitchingEntity.RIUS_DEV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 294:
                                    smartstitchingEntity.RIUS_DEV_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 295:
                                    smartstitchingEntity.RNBDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 296:
                                    smartstitchingEntity.RNBDE_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 297:
                                    smartstitchingEntity.SMARTCOOLER_POC2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 298:
                                    smartstitchingEntity.SMARTCOOLER_POC2_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 299:
                                    smartstitchingEntity.SMARTCOOLER_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 300:
                                    smartstitchingEntity.SMARTCOOLER_TRN_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 301:
                                    smartstitchingEntity.SMARTCOOLER2_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 302:
                                    smartstitchingEntity.SMARTCOOLER2_TRN_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 303:
                                    smartstitchingEntity.SOLARBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 304:
                                    smartstitchingEntity.SOLARBR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 305:
                                    smartstitchingEntity.STATIC_CAMERA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 306:
                                    smartstitchingEntity.STATIC_CAMERA_DEMO_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 307:
                                    smartstitchingEntity.SWIRECN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 308:
                                    smartstitchingEntity.SWIRECN_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 309:
                                    smartstitchingEntity.SWIREREDCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 310:
                                    smartstitchingEntity.SWIREREDCN_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 311:
                                    smartstitchingEntity.TNUVAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 312:
                                    smartstitchingEntity.TNUVAIL_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 313:
                                    smartstitchingEntity.TRAXDEMO_TS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 314:
                                    smartstitchingEntity.TRAXDEMO_TS_PROD_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 315:
                                    smartstitchingEntity.TWEAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 316:
                                    smartstitchingEntity.TWEAU_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 317:
                                    smartstitchingEntity.RI_DEMO2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 318:
                                    smartstitchingEntity.RI_DEMO2_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 319:
                                    smartstitchingEntity.COMPASSCCH_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 320:
                                    smartstitchingEntity.COMPASSCCH_SAND_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 321:
                                    smartstitchingEntity.LAVAZZAIT_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 322:
                                    smartstitchingEntity.LAVAZZAIT_SAND_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                ////////////////////////
                                case 323:
                                    smartstitchingEntity.INBEVUS_STG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 324:
                                    smartstitchingEntity.INBEVUS_STG_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 325:
                                    smartstitchingEntity.LAVAZZAFR_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 326:
                                    smartstitchingEntity.LAVAZZAFR_SAND_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 327:
                                    smartstitchingEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 328:
                                    smartstitchingEntity.INBEVBE_SAND_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 329:
                                    smartstitchingEntity.INBEVLU_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 330:
                                    smartstitchingEntity.INBEVLU_SAND_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 331:
                                    smartstitchingEntity.INBEVNL_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;
                                case 332:
                                    smartstitchingEntity.INBEVNL_SAND_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    break;




                                #region "No need region"
                                //case 333:
                                //    pricingprobesEntity.SOLARBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 334:
                                //    pricingprobesEntity.SOLARBR_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 335:
                                //    pricingprobesEntity.STATIC_CAMERA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 336:
                                //    pricingprobesEntity.STATIC_CAMERA_DEMO_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 337:
                                //    pricingprobesEntity.SWIRECN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 338:
                                //    pricingprobesEntity.SWIRECN_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 339:
                                //    pricingprobesEntity.SWIREREDCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 340:
                                //    pricingprobesEntity.SWIREREDCN_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 341:
                                //    pricingprobesEntity.TNUVAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 342:
                                //    pricingprobesEntity.TNUVAIL_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 343:
                                //    pricingprobesEntity.TRAXDEMO_TS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 344:
                                //    pricingprobesEntity.TRAXDEMO_TS_PROD_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 345:
                                //    pricingprobesEntity.RI_DEMO2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 346:
                                //    pricingprobesEntity.RI_DEMO2_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 347:
                                //    pricingprobesEntity.COMPASSCCH_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 348:
                                //    pricingprobesEntity.COMPASSCCH_SAND_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 349:
                                //    pricingprobesEntity.LAVAZZAIT_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 350:
                                //    pricingprobesEntity.LAVAZZAIT_SAND_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 351:
                                //    pricingprobesEntity.INBEVUS_STG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 352:
                                //    pricingprobesEntity.INBEVUS_STG_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 353:
                                //    pricingprobesEntity.LAVAZZAFR_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                //case 354:
                                //    pricingprobesEntity.LAVAZZAFR_SAND_SmartStitching = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                //    break;
                                #endregion

                                default: break;

                                #endregion
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        Response.Redirect("error.aspx");
                        throw ex;
                    }
                }

                smartstitchingEntity.ImportedDate = GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim());//GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                smartstitchingEntity.ImportedYear = smartstitchingEntity.ImportedDate.Substring(0, 6);
                //pricingprobesEntity.ImportTime = GeneralUtility.ConvertSystemTimeFormat(System.DateTime.Now);
                smartstitchingEntity.CreatedBy = userEntity.ID;


                smartstitchinglist.Add(smartstitchingEntity);

                #endregion
            }
        }

        private void CategoryExpertVoting_BindBusiness(List<CategoryExpertVotingEntity> categoryexpertvotinglist, ExcelWorksheet ws, string center)
        {
            var userEntity = (UserEntity)Session["ID"];
            for (var rowNumber = 1; rowNumber <= ws.Dimension.End.Row; rowNumber++)
            {
                var categoryexpertvotingEntity = new CategoryExpertVotingEntity();

                categoryexpertvotingEntity.ID = GeneralUtility.GeneratedKey;

                #region Populate Excel data

                for (var colNumber = 1; colNumber <= ws.Dimension.End.Column; colNumber++)
                {
                    var columnName1 = ws.Cells[1, colNumber].Value.ToString().Trim();
                    var columnName2 = string.Empty;
                    string columnName3 = string.Empty;
                    if (columnName1 == "Category Expert Voting")
                    {
                        columnName2 = ws.Cells[1, colNumber - 1].Value.ToString();
                        columnName3 = columnName2 + "-" + columnName1;
                    }
                    else
                    {
                        columnName3 = columnName1;
                    }
                    try
                    {
                        if (true && rowNumber > 1)
                        {   
                            //globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            if (Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != "" && Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != null)
                            {
                                globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            }
                            else
                            {
                                globalCenterName = "";
                            }
                            if (globalCenterName == center)
                            {
                                switch (columnName3)
                                {
                                    #region
                                    //case 1:
                                    case "QAT":
                                        categoryexpertvotingEntity.QAT = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 2:
                                    case "Center":
                                        categoryexpertvotingEntity.Center = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 3:
                                    case "Total Category Expert Voting":
                                        categoryexpertvotingEntity.TotalCategoryExpertVoting = Convert.ToInt32(ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    case "Avg seconds per Category Expert Voting":
                                        //case 4:
                                        categoryexpertvotingEntity.AvgsecondsperCategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 5:
                                    case "ABICA":
                                        categoryexpertvotingEntity.ABICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 6:

                                    case "ABICA-Category Expert Voting":
                                        categoryexpertvotingEntity.ABICA_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 7:
                                    case "ABITAMSUS-PROD":
                                        categoryexpertvotingEntity.ABITAMSUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 8:
                                    case "ABITAMSUS-PROD-Category Expert Voting":
                                        categoryexpertvotingEntity.ABITAMSUS_PROD_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 9:
                                    case "AMERICAS-DEMO":
                                        categoryexpertvotingEntity.AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 10:
                                    case "AMERICAS-DEMO-Category Expert Voting":
                                        categoryexpertvotingEntity.AMERICAS_DEMO_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 11:
                                    case "BATRU":
                                        categoryexpertvotingEntity.BATRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 12:
                                    case "BATRU-Category Expert Voting":
                                        categoryexpertvotingEntity.BATRU_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 13:
                                    case "BIKR":
                                        categoryexpertvotingEntity.BIKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 14:
                                    case "BIKR-Category Expert Voting":
                                        categoryexpertvotingEntity.BIKR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 15:
                                    case "BIMY":
                                        categoryexpertvotingEntity.BIMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 16:
                                    case "BIMY-Category Expert Voting":
                                        categoryexpertvotingEntity.BIMY_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 17:
                                    case "BIPH":
                                        categoryexpertvotingEntity.BIPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 18:
                                    case "BIPH-Category Expert Voting":
                                        categoryexpertvotingEntity.BIPH_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 19:
                                    case "BISEASK":
                                        categoryexpertvotingEntity.BISEASK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 20:
                                    case "BISEASK-Category Expert Voting":
                                        categoryexpertvotingEntity.BISEASK_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 21:
                                    case "BITH":
                                        categoryexpertvotingEntity.BITH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 22:
                                    case "BITH-Category Expert Voting":
                                        categoryexpertvotingEntity.BITH_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 23:
                                    case "BIVN":
                                        categoryexpertvotingEntity.BIVN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 24:
                                    case "BIVN-Category Expert Voting":
                                        categoryexpertvotingEntity.BIVN_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 25:
                                    case "BPAU":
                                        categoryexpertvotingEntity.BPAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 26:
                                    case "BPAU-Category Expert Voting":
                                        categoryexpertvotingEntity.BPAU_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 27:
                                    case "BRODMANN":
                                        categoryexpertvotingEntity.BRODMANN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 28:
                                    case "BRODMANN-Category Expert Voting":
                                        categoryexpertvotingEntity.BRODMANN_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 29:
                                    case "CARREFOURAR":
                                        categoryexpertvotingEntity.CARREFOURAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 30:
                                    case "CARREFOURAR-Category Expert Voting":
                                        categoryexpertvotingEntity.CARREFOURAR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 31:
                                    case "CCAAU":
                                        categoryexpertvotingEntity.CCAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 32:
                                    case "CCAAU-Category Expert Voting":
                                        categoryexpertvotingEntity.CCAAU_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 33:
                                    case "CCABIZA":
                                        categoryexpertvotingEntity.CCABIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 34:
                                    case "CCABIZA-Category Expert Voting":
                                        categoryexpertvotingEntity.CCABIZA_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 35:
                                    case "CCANZ":
                                        categoryexpertvotingEntity.CCANZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 36:
                                    case "CCANZ-Category Expert Voting":
                                        categoryexpertvotingEntity.CCANZ_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 37:
                                    case "CCBOTTLERSUS":
                                        categoryexpertvotingEntity.CCBOTTLERSUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 38:
                                    case "CCBOTTLERSUS-Category Expert Voting":
                                        categoryexpertvotingEntity.CCBOTTLERSUS_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 39:
                                    case "CCBR-PROD":
                                        categoryexpertvotingEntity.CCBR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 40:
                                    case "CCBR-PROD-Category Expert Voting":
                                        categoryexpertvotingEntity.CCBR_PROD_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 41:
                                    case "CCJP":
                                        categoryexpertvotingEntity.CCJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 42:
                                    case "CCJP-Category Expert Voting":
                                        categoryexpertvotingEntity.CCJP_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 43:
                                    case "CCKH":
                                        categoryexpertvotingEntity.CCKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 44:
                                    case "CCKH-Category Expert Voting":
                                        categoryexpertvotingEntity.CCKH_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 45:
                                    case "CCKR":
                                        categoryexpertvotingEntity.CCKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 46:
                                    case "CCKR-Category Expert Voting":
                                        categoryexpertvotingEntity.CCKR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 47:
                                    case "CCMY":
                                        categoryexpertvotingEntity.CCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 48:
                                    case "CCMY-Category Expert Voting":
                                        categoryexpertvotingEntity.CCMY_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 49:
                                    case "CCPH":
                                        categoryexpertvotingEntity.CCPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 50:
                                    case "CCPH-Category Expert Voting":
                                        categoryexpertvotingEntity.CCPH_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 51:
                                    case "CCRPR-PROD":
                                        categoryexpertvotingEntity.CCRPR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 52:
                                    case "CCRPR-PROD-Category Expert Voting":
                                        categoryexpertvotingEntity.CCRPR_PROD_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 53:
                                    case "CCRU":
                                        categoryexpertvotingEntity.CCRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 54:
                                    case "CCRU-Category Expert Voting":
                                        categoryexpertvotingEntity.CCRU_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 55:
                                    case "CCTH":
                                        categoryexpertvotingEntity.CCTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 56:
                                    case "CCTH-Category Expert Voting":
                                        categoryexpertvotingEntity.CCTH_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 57:
                                    case "CCTH-UAT":
                                        categoryexpertvotingEntity.CCTH_UAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 58:
                                    case "CCTH-UAT-Category Expert Voting":
                                        categoryexpertvotingEntity.CCTH_UAT_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 59:
                                    case "CCTRADMX":
                                        categoryexpertvotingEntity.CCTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 60:
                                    case "CCTRADMX-Category Expert Voting":
                                        categoryexpertvotingEntity.CCTRADMX_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 61:
                                    case "CCUS":
                                        categoryexpertvotingEntity.CCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 62:
                                    case "CCUS-Category Expert Voting":
                                        categoryexpertvotingEntity.CCUS_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 63:
                                    case "CCZA":
                                        categoryexpertvotingEntity.CCZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 64:
                                    case "CCZA-Category Expert Voting":
                                        categoryexpertvotingEntity.CCZA_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 65:
                                    case "CEREBOSTH":
                                        categoryexpertvotingEntity.CEREBOSTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 66:
                                    case "CEREBOSTH-Category Expert Voting":
                                        categoryexpertvotingEntity.CEREBOSTH_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 67:
                                    case "CROWDSOURCE":
                                        categoryexpertvotingEntity.CROWDSOURCE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 68:
                                    case "CROWDSOURCE-Category Expert Voting":
                                        categoryexpertvotingEntity.CROWDSOURCE_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 69:
                                    case "DIAGEOAU":
                                        categoryexpertvotingEntity.DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 70:
                                    case "DIAGEOAU-Category Expert Voting":
                                        categoryexpertvotingEntity.DIAGEOAU_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 71:
                                    case "DIAGEOBR":
                                        categoryexpertvotingEntity.DIAGEOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 72:
                                    case "DIAGEOBR-Category Expert Voting":
                                        categoryexpertvotingEntity.DIAGEOBR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 73:
                                    case "DIAGEOGR":
                                        categoryexpertvotingEntity.DIAGEOGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 74:
                                    case "DIAGEOGR-Category Expert Voting":
                                        categoryexpertvotingEntity.DIAGEOGR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 75:
                                    case "DIAGEOIE":
                                        categoryexpertvotingEntity.DIAGEOIE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 76:
                                    case "DIAGEOIE-Category Expert Voting":
                                        categoryexpertvotingEntity.DIAGEOIE_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 77:
                                    case "DIAGEOKE":
                                        categoryexpertvotingEntity.DIAGEOKE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 78:
                                    case "DIAGEOKE-Category Expert Voting":
                                        categoryexpertvotingEntity.DIAGEOKE_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 79:
                                    case "DIAGEOMX":
                                        categoryexpertvotingEntity.DIAGEOMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 80:
                                    case "DIAGEOMX-Category Expert Voting":
                                        categoryexpertvotingEntity.DIAGEOMX_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 81:
                                    case "DIAGEOPT":
                                        categoryexpertvotingEntity.DIAGEOPT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 82:
                                    case "DIAGEOPT-Category Expert Voting":
                                        categoryexpertvotingEntity.DIAGEOPT_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 83:
                                    case "DIAGEOTW":
                                        categoryexpertvotingEntity.DIAGEOTW = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 84:
                                    case "DIAGEOTW-Category Expert Voting":
                                        categoryexpertvotingEntity.DIAGEOTW_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 85:
                                    case "DIAGEOUK":
                                        categoryexpertvotingEntity.DIAGEOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 86:
                                    case "DIAGEOUK-Category Expert Voting":
                                        categoryexpertvotingEntity.DIAGEOUK_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 87:
                                    case "DIAGEOZA":
                                        categoryexpertvotingEntity.DIAGEOZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 88:
                                    case "DIAGEOZA-Category Expert Voting":
                                        categoryexpertvotingEntity.DIAGEOZA_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 89:
                                    case "EMEA-DEMO":
                                        categoryexpertvotingEntity.EMEA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 90:
                                    case "EMEA-DEMO-Category Expert Voting":
                                        categoryexpertvotingEntity.EMEA_DEMO_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 91:
                                    case "FERREROIT":
                                        categoryexpertvotingEntity.FERREROIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 92:
                                    case "FERREROIT-Category Expert Voting":
                                        categoryexpertvotingEntity.FERREROIT_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 93:
                                    case "GILLETTEUS":
                                        categoryexpertvotingEntity.GILLETTEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 94:
                                    case "GILLETTEUS-Category Expert Voting":
                                        categoryexpertvotingEntity.GILLETTEUS_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 95:
                                    case "GOOGLEUS":
                                        categoryexpertvotingEntity.GOOGLEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 96:
                                    case "GOOGLEUS-Category Expert Voting":
                                        categoryexpertvotingEntity.GOOGLEUS_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 97:
                                    case "HBCDE":
                                        categoryexpertvotingEntity.HBCDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 98:
                                    case "HBCDE-Category Expert Voting":
                                        categoryexpertvotingEntity.HBCDE_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 99:
                                    case "HEINEKENCN":
                                        categoryexpertvotingEntity.HEINEKENCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 100:
                                    case "HEINEKENCN-Category Expert Voting":
                                        categoryexpertvotingEntity.HEINEKENCN_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 101:
                                    case "HEINEKENUS-PROD":
                                        categoryexpertvotingEntity.HEINEKENUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 102:
                                    case "HEINEKENUS-PROD-Category Expert Voting":
                                        categoryexpertvotingEntity.HEINEKENUS_PROD_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 103:
                                    case "HEINZCR":
                                        categoryexpertvotingEntity.HEINZCR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 104:
                                    case "HEINZCR-Category Expert Voting":
                                        categoryexpertvotingEntity.HEINZCR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 105:
                                    case "INBEVAR":
                                        categoryexpertvotingEntity.INBEVAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 106:
                                    case "INBEVAR-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVAR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 107:
                                    case "INBEVBE":
                                        categoryexpertvotingEntity.INBEVBE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 108:
                                    case "INBEVBE-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVBE_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 109:
                                    //case "INBEVBE-SAND":
                                    //    categoryexpertvotingEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    //    break;
                                    ////case 110:
                                    //case "INBEVBE-SAND-Category Expert Voting":
                                    //    categoryexpertvotingEntity.INBEVBE_SAND_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    //    break;
                                    //case 111:
                                    case "INBEVBR":
                                        categoryexpertvotingEntity.INBEVBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 112:
                                    case "INBEVBR-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVBR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 113:
                                    case "INBEVBR_ONTRADE":
                                        categoryexpertvotingEntity.INBEVBR_ONTRADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 114:
                                    case "INBEVBR_ONTRADE-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVBR_ONTRADE_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 115:
                                    case "INBEVCL":
                                        categoryexpertvotingEntity.INBEVCL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 116:
                                    case "INBEVCL-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVCL_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 117:
                                    case "INBEVCN":
                                        categoryexpertvotingEntity.INBEVCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 118:
                                    case "INBEVCN-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVCN_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 119:
                                    case "INBEVCOOLERAR":
                                        categoryexpertvotingEntity.INBEVCOOLERAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 120:
                                    case "INBEVCOOLERAR-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVCOOLERAR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 121:
                                    case "INBEVCOOLERBR":
                                        categoryexpertvotingEntity.INBEVCOOLERBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 122:
                                    case "INBEVCOOLERBR-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVCOOLERBR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 123:
                                    case "INBEVCOOLERUS":
                                        categoryexpertvotingEntity.INBEVCOOLERUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 124:
                                    case "INBEVCOOLERUS-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVCOOLERUS_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 125:
                                    case "INBEVFR":
                                        categoryexpertvotingEntity.INBEVFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 126:
                                    case "INBEVFR-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVFR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 127:
                                    case "INBEVLU":
                                        categoryexpertvotingEntity.INBEVLU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 128:
                                    case "INBEVLU-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVLU_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 129:
                                    case "INBEVLU-SAND":
                                        categoryexpertvotingEntity.INBEVLU_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 130:
                                    case "INBEVLU-SAND-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVLU_SAND_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 131:
                                    case "INBEVMX":
                                        categoryexpertvotingEntity.INBEVMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 132:
                                    case "INBEVMX-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVMX_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 133:
                                    case "INBEVNL":
                                        categoryexpertvotingEntity.INBEVNL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 134:
                                    case "INBEVNL-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVNL_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 135:
                                    case "INBEVNL-SAND":
                                        categoryexpertvotingEntity.INBEVNL_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 136:
                                    case "INBEVNL-SAND-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVNL_SAND_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 137:
                                    case "INBEVPY":
                                        categoryexpertvotingEntity.INBEVPY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 138:
                                    case "INBEVPY-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVPY_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 139:
                                    case "INBEVTRADMX":
                                        categoryexpertvotingEntity.INBEVTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 140:
                                    case "INBEVTRADMX-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVTRADMX_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 141:
                                    case "INBEVUS":
                                        categoryexpertvotingEntity.INBEVUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 142:
                                    case "INBEVUS-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVUS_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 143:
                                    case "JTIUA":
                                        categoryexpertvotingEntity.JTIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 144:
                                    case "JTIUA-Category Expert Voting":
                                        categoryexpertvotingEntity.JTIUA_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 145:
                                    case "KCMY":
                                        categoryexpertvotingEntity.KCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 146:
                                    case "KCMY-Category Expert Voting":
                                        categoryexpertvotingEntity.KCMY_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 147:
                                    case "KCUS":
                                        categoryexpertvotingEntity.KCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 148:
                                    case "KCUS-Category Expert Voting":
                                        categoryexpertvotingEntity.KCUS_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 149:
                                    case "KEURIGCA":
                                        categoryexpertvotingEntity.KEURIGCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 150:
                                    case "KEURIGCA-Category Expert Voting":
                                        categoryexpertvotingEntity.KEURIGCA_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////// just only finished 150 //////////////
                                    //case 151:
                                    case "LABATTPLNOPTCA":
                                        categoryexpertvotingEntity.LABATTPLNOPTCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 152:
                                    case "LABATTPLNOPTCA-Category Expert Voting":
                                        categoryexpertvotingEntity.LABATTPLNOPTCA_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 153:
                                    case "LAVAZZAAT":
                                        categoryexpertvotingEntity.LAVAZZAAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 154:
                                    case "LAVAZZAAT-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAAT_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 155:
                                    case "LAVAZZAAU":
                                        categoryexpertvotingEntity.LAVAZZAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 156:
                                    case "LAVAZZAAU-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAAU_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 157:
                                    case "LAVAZZABE":
                                        categoryexpertvotingEntity.LAVAZZABE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 158:
                                    case "LAVAZZABE-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZABE_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 159:
                                    case "LAVAZZABG":
                                        categoryexpertvotingEntity.LAVAZZABG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 160:
                                    case "LAVAZZABG-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZABG_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 161:
                                    case "LAVAZZACA":
                                        categoryexpertvotingEntity.LAVAZZACA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 162:
                                    case "LAVAZZACA-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZACA_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 163:
                                    case "LAVAZZACH":
                                        categoryexpertvotingEntity.LAVAZZACH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 164:
                                    case "LAVAZZACH-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZACH_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 165:
                                    case "LAVAZZACL":
                                        categoryexpertvotingEntity.LAVAZZACL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 166:
                                    case "LAVAZZACL-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZACL_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 167:
                                    case "LAVAZZACN":
                                        categoryexpertvotingEntity.LAVAZZACN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 168:
                                    case "LAVAZZACN-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZACN_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 169:
                                    case "LAVAZZACZ":
                                        categoryexpertvotingEntity.LAVAZZACZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 170:
                                    case "LAVAZZACZ-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZACZ_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 171:
                                    case "LAVAZZADE":
                                        categoryexpertvotingEntity.LAVAZZADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 172:
                                    case "LAVAZZADE-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZADE_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 173:
                                    case "LAVAZZADK":
                                        categoryexpertvotingEntity.LAVAZZADK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 174:
                                    case "LAVAZZADK-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZADK_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 175:
                                    case "LAVAZZAEE":
                                        categoryexpertvotingEntity.LAVAZZAEE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 176:
                                    case "LAVAZZAEE-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAEE_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 177:
                                    case "LAVAZZAES":
                                        categoryexpertvotingEntity.LAVAZZAES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 178:
                                    case "LAVAZZAES-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAES_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 179:
                                    case "LAVAZZAFR":
                                        categoryexpertvotingEntity.LAVAZZAFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 180:
                                    case "LAVAZZAFR-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAFR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 181:
                                    case "LAVAZZAGR":
                                        categoryexpertvotingEntity.LAVAZZAGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 182:
                                    case "LAVAZZAGR-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAGR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 183:
                                    case "LAVAZZAHK":
                                        categoryexpertvotingEntity.LAVAZZAHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 184:
                                    case "LAVAZZAHK-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAHK_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 185:
                                    case "LAVAZZAHR":
                                        categoryexpertvotingEntity.LAVAZZAHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 186:
                                    case "LAVAZZAHR-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAHR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 187:
                                    case "LAVAZZAIL":
                                        categoryexpertvotingEntity.LAVAZZAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 188:
                                    case "LAVAZZAIL-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAIL_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 189:
                                    case "LAVAZZAIT":
                                        categoryexpertvotingEntity.LAVAZZAIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 190:
                                    case "LAVAZZAIT-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAIT_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 191:
                                    case "LAVAZZAJP":
                                        categoryexpertvotingEntity.LAVAZZAJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 192:
                                    case "LAVAZZAJP-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAJP_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 193:
                                    case "LAVAZZAKR":
                                        categoryexpertvotingEntity.LAVAZZAKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 194:
                                    case "LAVAZZAKR-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAKR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 195:
                                    case "LAVAZZALT":
                                        categoryexpertvotingEntity.LAVAZZALT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 196:
                                    case "LAVAZZALT-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZALT_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 197:
                                    case "LAVAZZALU":
                                        categoryexpertvotingEntity.LAVAZZALU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 198:
                                    case "LAVAZZALU-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZALU_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 199:
                                    case "LAVAZZALV":
                                        categoryexpertvotingEntity.LAVAZZALV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 200:
                                    case "LAVAZZALV-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZALV_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 201:
                                    case "LAVAZZAMA":
                                        categoryexpertvotingEntity.LAVAZZAMA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 202:
                                    case "LAVAZZAMA-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAMA_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 203:
                                    case "LAVAZZANL":
                                        categoryexpertvotingEntity.LAVAZZANL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 204:
                                    case "LAVAZZANL-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZANL_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 205:
                                    case "LAVAZZAPL":
                                        categoryexpertvotingEntity.LAVAZZAPL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 206:
                                    case "LAVAZZAPL-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAPL_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 207:
                                    case "LAVAZZARO":
                                        categoryexpertvotingEntity.LAVAZZARO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 208:
                                    case "LAVAZZARO-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZARO_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 209:
                                    case "LAVAZZARU":
                                        categoryexpertvotingEntity.LAVAZZARU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 210:
                                    case "LAVAZZARU-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZARU_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 211:
                                    case "LAVAZZASA":
                                        categoryexpertvotingEntity.LAVAZZASA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 212:
                                    case "LAVAZZASA-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZASA_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 213:
                                    case "LAVAZZASE":
                                        categoryexpertvotingEntity.LAVAZZASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 214:
                                    case "LAVAZZASE-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZASE_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 215:
                                    case "LAVAZZASG":
                                        categoryexpertvotingEntity.LAVAZZASG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 216:
                                    case "LAVAZZASG-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZASG_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 217:
                                    case "LAVAZZAUAE":
                                        categoryexpertvotingEntity.LAVAZZAUAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 218:
                                    case "LAVAZZAUAE-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAUAE_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 219:
                                    case "LAVAZZAUK":
                                        categoryexpertvotingEntity.LAVAZZAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 220:
                                    case "LAVAZZAUK-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAUK_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 221:
                                    case "LAVAZZAUS":
                                        categoryexpertvotingEntity.LAVAZZAUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 222:
                                    case "LAVAZZAUS-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAUS_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 223:

                                    case "LAVAZZAZA":
                                        categoryexpertvotingEntity.LAVAZZAZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    case "LAVAZZAZA-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAZA_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 225:
                                    case "LRSUK":
                                        categoryexpertvotingEntity.LRSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 226:
                                    case "LRSUK-Category Expert Voting":
                                        categoryexpertvotingEntity.LRSUK_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 227:
                                    case "MARSBR":
                                        categoryexpertvotingEntity.MARSBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 228:
                                    case "MARSBR-Category Expert Voting":
                                        categoryexpertvotingEntity.MARSBR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 229:
                                    case "MARSIN":
                                        categoryexpertvotingEntity.MARSIN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 230:
                                    case "MARSIN-Category Expert Voting":
                                        categoryexpertvotingEntity.MARSIN_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 231:
                                    case "MARSIN-OLD":
                                        categoryexpertvotingEntity.MARSIN_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 232:
                                    case "MARSIN-OLD-Category Expert Voting":
                                        categoryexpertvotingEntity.MARSIN_OLD_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 233:
                                    case "MARSRU-PROD":
                                        categoryexpertvotingEntity.MARSRU_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 234:
                                    case "MARSRU-PROD-Category Expert Voting":
                                        categoryexpertvotingEntity.MARSRU_PROD_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 235:
                                    case "MAYORAID":
                                        categoryexpertvotingEntity.MAYORAID = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 236:
                                    case "MAYORAID-Category Expert Voting":
                                        categoryexpertvotingEntity.MAYORAID_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 237:
                                    case "MJNCN":
                                        categoryexpertvotingEntity.MJNCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 238:
                                    case "MJNCN-Category Expert Voting":
                                        categoryexpertvotingEntity.MJNCN_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 239:
                                    case "MOLSONCOOLERHN":
                                        categoryexpertvotingEntity.MOLSONCOOLERHN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 240:
                                    case "MOLSONCOOLERHN-Category Expert Voting":
                                        categoryexpertvotingEntity.MOLSONCOOLERHN_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 241:
                                    case "MOLSONCOOLERHR":
                                        categoryexpertvotingEntity.MOLSONCOOLERHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 242:
                                    case "MOLSONCOOLERHR-Category Expert Voting":
                                        categoryexpertvotingEntity.MOLSONCOOLERHR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 243:
                                    case "MOLSONCOORSUK":
                                        categoryexpertvotingEntity.MOLSONCOORSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 244:
                                    case "MOLSONCOORSUK-Category Expert Voting":
                                        categoryexpertvotingEntity.MOLSONCOORSUK_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 245:
                                    case "NESTLEUK":
                                        categoryexpertvotingEntity.NESTLEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 246:
                                    case "NESTLEUK-Category Expert Voting":
                                        categoryexpertvotingEntity.NESTLEUK_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 247:
                                    case "NIVEAUK":
                                        categoryexpertvotingEntity.NIVEAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 248:
                                    case "NIVEAUK-Category Expert Voting":
                                        categoryexpertvotingEntity.NIVEAUK_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 249:
                                    case "NRF2017-DEMO":
                                        categoryexpertvotingEntity.NRF2017_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 250:
                                    case "NRF2017-DEMO-Category Expert Voting":
                                        categoryexpertvotingEntity.NRF2017_DEMO_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 251:
                                    case "ONE-AMERICAS-DEMO":
                                        categoryexpertvotingEntity.ONE_AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 252:                                  
                                    case "ONE-AMERICAS-DEMO-Category Expert Voting":
                                        categoryexpertvotingEntity.ONE_AMERICAS_DEMO_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 253:
                                    case "ONE-APAC-DEMO":
                                        categoryexpertvotingEntity.ONE_APAC_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 254:
                                    case "ONE-APAC-DEMO-Category Expert Voting":
                                        categoryexpertvotingEntity.ONE_APAC_DEMO_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 255:
                                    case "PEPSICOBR":
                                        categoryexpertvotingEntity.PEPSICOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 256:
                                    case "PEPSICOBR-Category Expert Voting":
                                        categoryexpertvotingEntity.PEPSICOBR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 257:
                                    case "PNGAU":
                                        categoryexpertvotingEntity.PNGAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 258:
                                    case "PNGAU-Category Expert Voting":
                                        categoryexpertvotingEntity.PNGAU_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 259:
                                    case "PNGAU-OLD":
                                        categoryexpertvotingEntity.PNGAU_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 260:
                                    case "PNGAU-OLD-Category Expert Voting":
                                        categoryexpertvotingEntity.PNGAU_OLD_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 261:
                                    case "PNGCAREUS":
                                        categoryexpertvotingEntity.PNGCAREUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 262:
                                    case "PNGCAREUS-Category Expert Voting":
                                        categoryexpertvotingEntity.PNGCAREUS_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 263:
                                    case "PNGCN-PROD":
                                        categoryexpertvotingEntity.PNGCN_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 264:
                                    case "PNGCN-PROD-Category Expert Voting":
                                        categoryexpertvotingEntity.PNGCN_PROD_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 265:
                                    case "PNGJP":
                                        categoryexpertvotingEntity.PNGJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 266:
                                    case "PNGJP-Category Expert Voting":
                                        categoryexpertvotingEntity.PNGJP_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 267:
                                    case "PNGJP-OLD":
                                        categoryexpertvotingEntity.PNGJP_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 268:
                                    case "PNGJP-OLD-Category Expert Voting":
                                        categoryexpertvotingEntity.PNGJP_OLD_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 269:
                                    case "PNGUS":
                                        categoryexpertvotingEntity.PNGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 270:
                                    case "PNGUS-Category Expert Voting":
                                        categoryexpertvotingEntity.PNGUS_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 271:
                                    case "PNGUSEPISODIC":
                                        categoryexpertvotingEntity.PNGUSEPISODIC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 272:
                                    case "PNGUSEPISODIC-Category Expert Voting":
                                        categoryexpertvotingEntity.PNGUSEPISODIC_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 273:
                                    case "RBUS":
                                        categoryexpertvotingEntity.RBUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 274:
                                    case "RBUS-Category Expert Voting":
                                        categoryexpertvotingEntity.RBUS_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 275:
                                    case "RE-XSUITE-DEMO":
                                        categoryexpertvotingEntity.RE_XSUITE_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 276:
                                    case "RE-XSUITE-DEMO-Category Expert Voting":
                                        categoryexpertvotingEntity.RE_XSUITE_DEMO_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 277:
                                    case "REPNGCN-DEMO":
                                        categoryexpertvotingEntity.REPNGCN_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 278:
                                    case "REPNGCN-DEMO-Category Expert Voting":
                                        categoryexpertvotingEntity.REPNGCN_DEMO_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 279:
                                    case "RI-DEMO":
                                        categoryexpertvotingEntity.RI_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 280:
                                    case "RI-DEMO-Category Expert Voting":
                                        categoryexpertvotingEntity.RI_DEMO_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 281:
                                    case "RI-DIAGEOAU":
                                        categoryexpertvotingEntity.RI_DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 282:
                                    case "RI-DIAGEOAU-Category Expert Voting":
                                        categoryexpertvotingEntity.RI_DIAGEOAU_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 283:
                                    case "RIALCBEVUK-PROD":
                                        categoryexpertvotingEntity.RIALCBEVUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 284:
                                    case "RIALCBEVUK-PROD-Category Expert Voting":
                                        categoryexpertvotingEntity.RIALCBEVUK_PROD_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 285:
                                    case "RICOFFEEUS":
                                        categoryexpertvotingEntity.RICOFFEEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 286:
                                    case "RICOFFEEUS-Category Expert Voting":
                                        categoryexpertvotingEntity.RICOFFEEUS_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 287:
                                    case "RINIELSENUS":
                                        categoryexpertvotingEntity.RINIELSENUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 288:
                                    case "RINIELSENUS-Category Expert Voting":
                                        categoryexpertvotingEntity.RINIELSENUS_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 289:
                                    case "RIPETCAREUK-PROD":
                                        categoryexpertvotingEntity.RIPETCAREUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 290:
                                    case "RIPETCAREUK-PROD-Category Expert Voting":
                                        categoryexpertvotingEntity.RIPETCAREUK_PROD_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 291:
                                    case "RIUS":
                                        categoryexpertvotingEntity.RIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 292:
                                    case "RIUS-Category Expert Voting":
                                        categoryexpertvotingEntity.RIUS_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 293:
                                    case "RIUS-DEV":
                                        categoryexpertvotingEntity.RIUS_DEV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 294:
                                    case "RIUS-DEV-Category Expert Voting":
                                        categoryexpertvotingEntity.RIUS_DEV_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 295:
                                    case "RNBDE":
                                        categoryexpertvotingEntity.RNBDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 296:
                                    case "RNBDE-Category Expert Voting":
                                        categoryexpertvotingEntity.RNBDE_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 297:
                                    case "SMARTCOOLER-POC2":
                                        categoryexpertvotingEntity.SMARTCOOLER_POC2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 298:
                                    case "SMARTCOOLER-POC2-Category Expert Voting":
                                        categoryexpertvotingEntity.SMARTCOOLER_POC2_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 299:
                                    case "SMARTCOOLER-TRN":
                                        categoryexpertvotingEntity.SMARTCOOLER_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 300:
                                    case "SMARTCOOLER-TRN-Category Expert Voting":
                                        categoryexpertvotingEntity.SMARTCOOLER_TRN_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 301:
                                    case "SMARTCOOLER2-TRN":
                                        categoryexpertvotingEntity.SMARTCOOLER2_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 302:
                                    case "SMARTCOOLER2-TRN-Category Expert Voting":
                                        categoryexpertvotingEntity.SMARTCOOLER2_TRN_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 303:
                                    case "SOLARBR":
                                        categoryexpertvotingEntity.SOLARBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 304:
                                    case "SOLARBR-Category Expert Voting":
                                        categoryexpertvotingEntity.SOLARBR_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 305:
                                    case "STATIC-CAMERA-DEMO":
                                        categoryexpertvotingEntity.STATIC_CAMERA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 306:
                                    case "STATIC-CAMERA-DEMO-Category Expert Voting":
                                        categoryexpertvotingEntity.STATIC_CAMERA_DEMO_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 307:
                                    case "SWIRECN":
                                        categoryexpertvotingEntity.SWIRECN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 308:
                                    case "SWIRECN-Category Expert Voting":
                                        categoryexpertvotingEntity.SWIRECN_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 309:
                                    case "SWIREREDCN":
                                        categoryexpertvotingEntity.SWIREREDCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 310:
                                    case "SWIREREDCN-Category Expert Voting":
                                        categoryexpertvotingEntity.SWIREREDCN_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 311:
                                    case "TNUVAIL":
                                        categoryexpertvotingEntity.TNUVAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 312:
                                    case "TNUVAIL-Category Expert Voting":
                                        categoryexpertvotingEntity.TNUVAIL_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 313:
                                    case "TRAXDEMO-TS-PROD":
                                        categoryexpertvotingEntity.TRAXDEMO_TS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 314:
                                    case "TRAXDEMO-TS-PROD-Category Expert Voting":
                                        categoryexpertvotingEntity.TRAXDEMO_TS_PROD_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 315:
                                    case "TWEAU":
                                        categoryexpertvotingEntity.TWEAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 316:
                                    case "TWEAU-Category Expert Voting":
                                        categoryexpertvotingEntity.TWEAU_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 317:
                                    case "RI-DEMO2":
                                        categoryexpertvotingEntity.RI_DEMO2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 318:
                                    case "RI-DEMO2-Category Expert Voting":
                                        categoryexpertvotingEntity.RI_DEMO2_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 319:
                                    case "COMPASSCCH-SAND":
                                        categoryexpertvotingEntity.COMPASSCCH_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 320:
                                    case "COMPASSCCH-SAND-Category Expert Voting":
                                        categoryexpertvotingEntity.COMPASSCCH_SAND_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 321:
                                    case "LAVAZZAIT-SAND":
                                        categoryexpertvotingEntity.LAVAZZAIT_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 322:
                                    case "LAVAZZAIT-SAND-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAIT_SAND_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 323:
                                    case "INBEVUS-STG":
                                        categoryexpertvotingEntity.INBEVUS_STG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 324:
                                    case "INBEVUS-STG-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVUS_STG_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 325:
                                    case "LAVAZZAFR-SAND":
                                        categoryexpertvotingEntity.LAVAZZAFR_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 326:
                                    case "LAVAZZAFR-SAND-Category Expert Voting":
                                        categoryexpertvotingEntity.LAVAZZAFR_SAND_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 327:
                                    case "INBEVBE-SAND":
                                        categoryexpertvotingEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 328:
                                    case "INBEVBE-SAND-Category Expert Voting":
                                        categoryexpertvotingEntity.INBEVBE_SAND_CategoryExpertVoting = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;


                                    //NEW Columns Addition
                                    //case 333:
                                    case "B2BRU":
                                        categoryexpertvotingEntity.B2BRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 334:
                                    case "BRMUS":
                                        categoryexpertvotingEntity.BRMUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 335:
                                    case "CBCIL":
                                        categoryexpertvotingEntity.CBCIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 336:
                                    case "CCCOOLERMX":
                                        categoryexpertvotingEntity.CCCOOLERMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 337:
                                    case "DIAGEOAR":
                                        categoryexpertvotingEntity.DIAGEOAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 338:
                                    case "DIAGEOBENELUX":
                                        categoryexpertvotingEntity.DIAGEOBENELUX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 339:
                                    case "DIAGEOCH":
                                        categoryexpertvotingEntity.DIAGEOCH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 340:
                                    case "DIAGEOGA":
                                        categoryexpertvotingEntity.DIAGEOGA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 341:
                                    case "DIAGEOGTR":
                                        categoryexpertvotingEntity.DIAGEOGTR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 342:
                                    case "DIAGEONORDICS":
                                        categoryexpertvotingEntity.DIAGEONORDICS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 343:
                                    case "DIAGEOUS":
                                        categoryexpertvotingEntity.DIAGEOUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 344:
                                    case "FERREROEXTIT":
                                        categoryexpertvotingEntity.FERREROEXTIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 345:
                                    case "GOOGLEHK":
                                        categoryexpertvotingEntity.GOOGLEHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 346:
                                    case "HEINEKENPILOTCN":
                                        categoryexpertvotingEntity.HEINEKENPILOTCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 347:
                                    case "IMBO":
                                        categoryexpertvotingEntity.IMBO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 348:
                                    case "INBEVCI":
                                        categoryexpertvotingEntity.INBEVCI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 349:
                                    case "INBEVCNTT":
                                        categoryexpertvotingEntity.INBEVCNTT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 350:
                                    case "INBEVCO":
                                        categoryexpertvotingEntity.INBEVCO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 351:
                                    case "INBEVZA":
                                        categoryexpertvotingEntity.INBEVZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 352:
                                    case "INORU":
                                        categoryexpertvotingEntity.INORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 353:
                                    case "JJSP":
                                        categoryexpertvotingEntity.JJSP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 354:
                                    case "JNJES":
                                        categoryexpertvotingEntity.JNJES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 355:
                                    case "JNJUK":
                                        categoryexpertvotingEntity.JNJUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 356:
                                    case "JRIJP":
                                        categoryexpertvotingEntity.JRIJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 357:
                                    case "KELLOGSUSPOC":
                                        categoryexpertvotingEntity.KELLOGSUSPOC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 358:
                                    case "KRAFTUS":
                                        categoryexpertvotingEntity.KRAFTUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 359:
                                    case "MARS-CHOCO-RU":
                                        categoryexpertvotingEntity.MARS_CHOCO_RU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 360:
                                    case "MHUK":
                                        categoryexpertvotingEntity.MHUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 361:
                                    case "MILLERCOORS":
                                        categoryexpertvotingEntity.MILLERCOORS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 362:
                                    case "MOLSONONTRADEUK":
                                        categoryexpertvotingEntity.MOLSONONTRADEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 363:
                                    case "MYCHEMISTAU":
                                        categoryexpertvotingEntity.MYCHEMISTAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 364:
                                    case "NESTLEROAMLERUK":
                                        categoryexpertvotingEntity.NESTLEROAMLERUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 365:
                                    case "NRF2018":
                                        categoryexpertvotingEntity.NRF2018 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 366:
                                    case "PENAFLORAR":
                                        categoryexpertvotingEntity.PENAFLORAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 367:
                                    case "PMIUA":
                                        categoryexpertvotingEntity.PMIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 368:
                                    case "PNGAMERICA":
                                        categoryexpertvotingEntity.PNGAMERICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 369:
                                    case "PNGRO":
                                        categoryexpertvotingEntity.PNGRO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 370:
                                    case "RBAU":
                                        categoryexpertvotingEntity.RBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 371:
                                    case "RBCA":
                                        categoryexpertvotingEntity.RBCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 372:
                                    case "RBDK":
                                        categoryexpertvotingEntity.RBDK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 373:
                                    case "RBMANUAL":
                                        categoryexpertvotingEntity.RBMANUAL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 374:
                                    case "RINIELSENRU-MARS":
                                        categoryexpertvotingEntity.RINIELSENRU_MARS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 375:
                                    case "RINIELSENUSQI":
                                        categoryexpertvotingEntity.RINIELSENUSQI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 376:
                                    case "RIPANELCN":
                                        categoryexpertvotingEntity.RIPANELCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 377:
                                    case "RISPARKWINEDE":
                                        categoryexpertvotingEntity.RISPARKWINEDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 378:
                                    case "SANOFIAE":
                                        categoryexpertvotingEntity.SANOFIAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 379:
                                    case "SANOFIAU":
                                        categoryexpertvotingEntity.SANOFIAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 380:
                                    case "SANOFIHK":
                                        categoryexpertvotingEntity.SANOFIHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 381:
                                    case "SANOFIKH":
                                        categoryexpertvotingEntity.SANOFIKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 382:
                                    case "SANOFINZ":
                                        categoryexpertvotingEntity.SANOFINZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 383:
                                    case "SANOFIRU":
                                        categoryexpertvotingEntity.SANOFIRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 384:
                                    case "SANOFITR":
                                        categoryexpertvotingEntity.SANOFITR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 385:
                                    case "SANOFIUA":
                                        categoryexpertvotingEntity.SANOFIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 386:
                                    case "SHUFERSALIL":
                                        categoryexpertvotingEntity.SHUFERSALIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 387:
                                    case "SUNTORYJP":
                                        categoryexpertvotingEntity.SUNTORYJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 388:
                                    case "TESCOTH":
                                        categoryexpertvotingEntity.TESCOTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 389:
                                    case "TESCOUK":
                                        categoryexpertvotingEntity.TESCOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 390:
                                    case "TRAXROBOT":
                                        categoryexpertvotingEntity.TRAXROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 391:
                                    case "XSUITE-SHOWCASE":
                                        categoryexpertvotingEntity.XSUITE_SHOWCASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 392:
                                    case "ABIUS":
                                        categoryexpertvotingEntity.ABIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 393:
                                    case "BADGERROBOT":
                                        categoryexpertvotingEntity.BADGERROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 394:
                                    case "CUBAU":
                                        categoryexpertvotingEntity.CUBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 395:
                                    case "DIAGEORU":
                                        categoryexpertvotingEntity.DIAGEORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 396:
                                    case "GFKFR":
                                        categoryexpertvotingEntity.GFKFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 397:
                                    case "JNJIT":
                                        categoryexpertvotingEntity.JNJIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 398:
                                    case "LIGHTTRAX":
                                        categoryexpertvotingEntity.LIGHTTRAX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 399:
                                    case "LIGHTTRAXOFFLINE":
                                        categoryexpertvotingEntity.LIGHTTRAXOFFLINE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 400:
                                    case "RINIELSENFR":
                                        categoryexpertvotingEntity.RINIELSENFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 401:
                                    case "SANOFIKZ":
                                        categoryexpertvotingEntity.SANOFIKZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 402:
                                    case "SANOFILB":
                                        categoryexpertvotingEntity.SANOFILB = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 403:
                                    case "SANOFISA":
                                        categoryexpertvotingEntity.SANOFISA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 404:
                                    case "SANOFIZA":
                                        categoryexpertvotingEntity.SANOFIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 405:
                                    case "WATSONSHK":
                                        categoryexpertvotingEntity.WATSONSHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 406:
                                    case "KELLOGGUS":
                                        categoryexpertvotingEntity.KELLOGGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 407:
                                    case "TSINGTAOBEERCN":
                                        categoryexpertvotingEntity.TSINGTAOBEERCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    #region "No need region"

                                    #endregion

                                    default: break;


                                    #endregion
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        Response.Redirect("error.aspx");
                        throw ex;
                    }
                }

                if (globalCenterName == center && rowNumber > 1)
                {
                    categoryexpertvotingEntity.ImportedDate = GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim());//GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    categoryexpertvotingEntity.ImportedYear = categoryexpertvotingEntity.ImportedDate.Substring(0, 6);
                    //pricingprobesEntity.ImportTime = GeneralUtility.ConvertSystemTimeFormat(System.DateTime.Now);
                    categoryexpertvotingEntity.CreatedDate = GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    categoryexpertvotingEntity.CreatedBy = userEntity.ID;


                    categoryexpertvotinglist.Add(categoryexpertvotingEntity);
                }

                #endregion
            }
        }


        private void CategoryExpertHunt_BindBusiness(List<CategoryExpertHuntEntity> categoryexperthuntlist, ExcelWorksheet ws, string center)
        {
            var userEntity = (UserEntity)Session["ID"];
            for (var rowNumber = 1; rowNumber <= ws.Dimension.End.Row; rowNumber++)
            {
                var categoryexperthuntEntity = new CategoryExpertHuntEntity();

                categoryexperthuntEntity.ID = GeneralUtility.GeneratedKey;

                #region Populate Excel data

                for (var colNumber = 1; colNumber <= ws.Dimension.End.Column; colNumber++)
                {
                    var columnName1 = ws.Cells[1, colNumber].Value.ToString().Trim();
                    var columnName2 = string.Empty;
                    string columnName3 = string.Empty;
                    if (columnName1 == "Category Expert Hunt")
                    {
                        columnName2 = ws.Cells[1, colNumber - 1].Value.ToString();
                        columnName3 = columnName2 + "-" + columnName1;
                    }
                    else
                    {
                        columnName3 = columnName1;
                    }
                    try
                    {
                        if (true && rowNumber > 1)
                        {
                            //globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            if (Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != "" && Convert.ToString(ws.Cells[rowNumber, 2].Value).Trim() != null)
                            {
                                globalCenterName = ws.Cells[rowNumber, 2].Value.ToString().Trim();
                            }
                            else
                            {
                                globalCenterName = "";
                            }
                            if (globalCenterName == center)
                            {
                                switch (columnName3)
                                {
                                    #region
                                    //case 1:
                                    case "QAT":
                                        categoryexperthuntEntity.QAT = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 2:
                                    case "Center":
                                        categoryexperthuntEntity.Center = Convert.ToString(ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 3:
                                    case "Total Category Expert Hunt":
                                        categoryexperthuntEntity.TotalCategoryExpertHunt = Convert.ToInt32(ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    case "Avg seconds per Category Expert Hunt":
                                        //case 4:
                                        categoryexperthuntEntity.AvgsecondsperCategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 5:
                                    case "ABICA":
                                        categoryexperthuntEntity.ABICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 6:

                                    case "ABICA-Category Expert Hunt":
                                        categoryexperthuntEntity.ABICA_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 7:
                                    case "ABITAMSUS-PROD":
                                        categoryexperthuntEntity.ABITAMSUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 8:
                                    case "ABITAMSUS-PROD-Category Expert Hunt":
                                        categoryexperthuntEntity.ABITAMSUS_PROD_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 9:
                                    case "AMERICAS-DEMO":
                                        categoryexperthuntEntity.AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 10:
                                    case "AMERICAS-DEMO-Category Expert Hunt":
                                        categoryexperthuntEntity.AMERICAS_DEMO_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 11:
                                    case "BATRU":
                                        categoryexperthuntEntity.BATRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 12:
                                    case "BATRU-Category Expert Hunt":
                                        categoryexperthuntEntity.BATRU_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 13:
                                    case "BIKR":
                                        categoryexperthuntEntity.BIKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 14:
                                    case "BIKR-Category Expert Hunt":
                                        categoryexperthuntEntity.BIKR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 15:
                                    case "BIMY":
                                        categoryexperthuntEntity.BIMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 16:
                                    case "BIMY-Category Expert Hunt":
                                        categoryexperthuntEntity.BIMY_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 17:
                                    case "BIPH":
                                        categoryexperthuntEntity.BIPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 18:
                                    case "BIPH-Category Expert Hunt":
                                        categoryexperthuntEntity.BIPH_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 19:
                                    case "BISEASK":
                                        categoryexperthuntEntity.BISEASK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 20:
                                    case "BISEASK-Category Expert Hunt":
                                        categoryexperthuntEntity.BISEASK_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 21:
                                    case "BITH":
                                        categoryexperthuntEntity.BITH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 22:
                                    case "BITH-Category Expert Hunt":
                                        categoryexperthuntEntity.BITH_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 23:
                                    case "BIVN":
                                        categoryexperthuntEntity.BIVN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 24:
                                    case "BIVN-Category Expert Hunt":
                                        categoryexperthuntEntity.BIVN_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 25:
                                    case "BPAU":
                                        categoryexperthuntEntity.BPAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 26:
                                    case "BPAU-Category Expert Hunt":
                                        categoryexperthuntEntity.BPAU_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 27:
                                    case "BRODMANN":
                                        categoryexperthuntEntity.BRODMANN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 28:
                                    case "BRODMANN-Category Expert Hunt":
                                        categoryexperthuntEntity.BRODMANN_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 29:
                                    case "CARREFOURAR":
                                        categoryexperthuntEntity.CARREFOURAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 30:
                                    case "CARREFOURAR-Category Expert Hunt":
                                        categoryexperthuntEntity.CARREFOURAR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 31:
                                    case "CCAAU":
                                        categoryexperthuntEntity.CCAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 32:
                                    case "CCAAU-Category Expert Hunt":
                                        categoryexperthuntEntity.CCAAU_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 33:
                                    case "CCABIZA":
                                        categoryexperthuntEntity.CCABIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 34:
                                    case "CCABIZA-Category Expert Hunt":
                                        categoryexperthuntEntity.CCABIZA_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 35:
                                    case "CCANZ":
                                        categoryexperthuntEntity.CCANZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 36:
                                    case "CCANZ-Category Expert Hunt":
                                        categoryexperthuntEntity.CCANZ_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 37:
                                    case "CCBOTTLERSUS":
                                        categoryexperthuntEntity.CCBOTTLERSUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 38:
                                    case "CCBOTTLERSUS-Category Expert Hunt":
                                        categoryexperthuntEntity.CCBOTTLERSUS_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 39:
                                    case "CCBR-PROD":
                                        categoryexperthuntEntity.CCBR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 40:
                                    case "CCBR-PROD-Category Expert Hunt":
                                        categoryexperthuntEntity.CCBR_PROD_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 41:
                                    case "CCJP":
                                        categoryexperthuntEntity.CCJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 42:
                                    case "CCJP-Category Expert Hunt":
                                        categoryexperthuntEntity.CCJP_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 43:
                                    case "CCKH":
                                        categoryexperthuntEntity.CCKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 44:
                                    case "CCKH-Category Expert Hunt":
                                        categoryexperthuntEntity.CCKH_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 45:
                                    case "CCKR":
                                        categoryexperthuntEntity.CCKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 46:
                                    case "CCKR-Category Expert Hunt":
                                        categoryexperthuntEntity.CCKR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 47:
                                    case "CCMY":
                                        categoryexperthuntEntity.CCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 48:
                                    case "CCMY-Category Expert Hunt":
                                        categoryexperthuntEntity.CCMY_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 49:
                                    case "CCPH":
                                        categoryexperthuntEntity.CCPH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 50:
                                    case "CCPH-Category Expert Hunt":
                                        categoryexperthuntEntity.CCPH_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 51:
                                    case "CCRPR-PROD":
                                        categoryexperthuntEntity.CCRPR_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 52:
                                    case "CCRPR-PROD-Category Expert Hunt":
                                        categoryexperthuntEntity.CCRPR_PROD_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 53:
                                    case "CCRU":
                                        categoryexperthuntEntity.CCRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 54:
                                    case "CCRU-Category Expert Hunt":
                                        categoryexperthuntEntity.CCRU_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 55:
                                    case "CCTH":
                                        categoryexperthuntEntity.CCTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 56:
                                    case "CCTH-Category Expert Hunt":
                                        categoryexperthuntEntity.CCTH_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 57:
                                    case "CCTH-UAT":
                                        categoryexperthuntEntity.CCTH_UAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 58:
                                    case "CCTH-UAT-Category Expert Hunt":
                                        categoryexperthuntEntity.CCTH_UAT_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 59:
                                    case "CCTRADMX":
                                        categoryexperthuntEntity.CCTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 60:
                                    case "CCTRADMX-Category Expert Hunt":
                                        categoryexperthuntEntity.CCTRADMX_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 61:
                                    case "CCUS":
                                        categoryexperthuntEntity.CCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 62:
                                    case "CCUS-Category Expert Hunt":
                                        categoryexperthuntEntity.CCUS_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 63:
                                    case "CCZA":
                                        categoryexperthuntEntity.CCZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 64:
                                    case "CCZA-Category Expert Hunt":
                                        categoryexperthuntEntity.CCZA_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 65:
                                    case "CEREBOSTH":
                                        categoryexperthuntEntity.CEREBOSTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 66:
                                    case "CEREBOSTH-Category Expert Hunt":
                                        categoryexperthuntEntity.CEREBOSTH_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 67:
                                    case "CROWDSOURCE":
                                        categoryexperthuntEntity.CROWDSOURCE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 68:
                                    case "CROWDSOURCE-Category Expert Hunt":
                                        categoryexperthuntEntity.CROWDSOURCE_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 69:
                                    case "DIAGEOAU":
                                        categoryexperthuntEntity.DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 70:
                                    case "DIAGEOAU-Category Expert Hunt":
                                        categoryexperthuntEntity.DIAGEOAU_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 71:
                                    case "DIAGEOBR":
                                        categoryexperthuntEntity.DIAGEOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 72:
                                    case "DIAGEOBR-Category Expert Hunt":
                                        categoryexperthuntEntity.DIAGEOBR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 73:
                                    case "DIAGEOGR":
                                        categoryexperthuntEntity.DIAGEOGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 74:
                                    case "DIAGEOGR-Category Expert Hunt":
                                        categoryexperthuntEntity.DIAGEOGR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 75:
                                    case "DIAGEOIE":
                                        categoryexperthuntEntity.DIAGEOIE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 76:
                                    case "DIAGEOIE-Category Expert Hunt":
                                        categoryexperthuntEntity.DIAGEOIE_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 77:
                                    case "DIAGEOKE":
                                        categoryexperthuntEntity.DIAGEOKE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 78:
                                    case "DIAGEOKE-Category Expert Hunt":
                                        categoryexperthuntEntity.DIAGEOKE_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 79:
                                    case "DIAGEOMX":
                                        categoryexperthuntEntity.DIAGEOMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 80:
                                    case "DIAGEOMX-Category Expert Hunt":
                                        categoryexperthuntEntity.DIAGEOMX_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 81:
                                    case "DIAGEOPT":
                                        categoryexperthuntEntity.DIAGEOPT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 82:
                                    case "DIAGEOPT-Category Expert Hunt":
                                        categoryexperthuntEntity.DIAGEOPT_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 83:
                                    case "DIAGEOTW":
                                        categoryexperthuntEntity.DIAGEOTW = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 84:
                                    case "DIAGEOTW-Category Expert Hunt":
                                        categoryexperthuntEntity.DIAGEOTW_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 85:
                                    case "DIAGEOUK":
                                        categoryexperthuntEntity.DIAGEOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 86:
                                    case "DIAGEOUK-Category Expert Hunt":
                                        categoryexperthuntEntity.DIAGEOUK_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 87:
                                    case "DIAGEOZA":
                                        categoryexperthuntEntity.DIAGEOZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 88:
                                    case "DIAGEOZA-Category Expert Hunt":
                                        categoryexperthuntEntity.DIAGEOZA_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 89:
                                    case "EMEA-DEMO":
                                        categoryexperthuntEntity.EMEA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 90:
                                    case "EMEA-DEMO-Category Expert Hunt":
                                        categoryexperthuntEntity.EMEA_DEMO_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 91:
                                    case "FERREROIT":
                                        categoryexperthuntEntity.FERREROIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 92:
                                    case "FERREROIT-Category Expert Hunt":
                                        categoryexperthuntEntity.FERREROIT_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 93:
                                    case "GILLETTEUS":
                                        categoryexperthuntEntity.GILLETTEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 94:
                                    case "GILLETTEUS-Category Expert Hunt":
                                        categoryexperthuntEntity.GILLETTEUS_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 95:
                                    case "GOOGLEUS":
                                        categoryexperthuntEntity.GOOGLEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 96:
                                    case "GOOGLEUS-Category Expert Hunt":
                                        categoryexperthuntEntity.GOOGLEUS_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 97:
                                    case "HBCDE":
                                        categoryexperthuntEntity.HBCDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 98:
                                    case "HBCDE-Category Expert Hunt":
                                        categoryexperthuntEntity.HBCDE_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 99:
                                    case "HEINEKENCN":
                                        categoryexperthuntEntity.HEINEKENCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 100:
                                    case "HEINEKENCN-Category Expert Hunt":
                                        categoryexperthuntEntity.HEINEKENCN_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 101:
                                    case "HEINEKENUS-PROD":
                                        categoryexperthuntEntity.HEINEKENUS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 102:
                                    case "HEINEKENUS-PROD-Category Expert Hunt":
                                        categoryexperthuntEntity.HEINEKENUS_PROD_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 103:
                                    case "HEINZCR":
                                        categoryexperthuntEntity.HEINZCR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 104:
                                    case "HEINZCR-Category Expert Hunt":
                                        categoryexperthuntEntity.HEINZCR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 105:
                                    case "INBEVAR":
                                        categoryexperthuntEntity.INBEVAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 106:
                                    case "INBEVAR-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVAR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 107:
                                    case "INBEVBE":
                                        categoryexperthuntEntity.INBEVBE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 108:
                                    case "INBEVBE-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVBE_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 109:
                                    //case "INBEVBE-SAND":
                                    //    categoryexperthuntEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    //    break;
                                    ////case 110:
                                    //case "INBEVBE-SAND-Category Expert Hunt":
                                    //    categoryexperthuntEntity.INBEVBE_SAND_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                    //    break;
                                    //case 111:
                                    case "INBEVBR":
                                        categoryexperthuntEntity.INBEVBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 112:
                                    case "INBEVBR-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVBR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 113:
                                    case "INBEVBR_ONTRADE":
                                        categoryexperthuntEntity.INBEVBR_ONTRADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 114:
                                    case "INBEVBR_ONTRADE-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVBR_ONTRADE_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 115:
                                    case "INBEVCL":
                                        categoryexperthuntEntity.INBEVCL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 116:
                                    case "INBEVCL-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVCL_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 117:
                                    case "INBEVCN":
                                        categoryexperthuntEntity.INBEVCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 118:
                                    case "INBEVCN-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVCN_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 119:
                                    case "INBEVCOOLERAR":
                                        categoryexperthuntEntity.INBEVCOOLERAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 120:
                                    case "INBEVCOOLERAR-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVCOOLERAR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 121:
                                    case "INBEVCOOLERBR":
                                        categoryexperthuntEntity.INBEVCOOLERBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 122:
                                    case "INBEVCOOLERBR-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVCOOLERBR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 123:
                                    case "INBEVCOOLERUS":
                                        categoryexperthuntEntity.INBEVCOOLERUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 124:
                                    case "INBEVCOOLERUS-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVCOOLERUS_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 125:
                                    case "INBEVFR":
                                        categoryexperthuntEntity.INBEVFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 126:
                                    case "INBEVFR-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVFR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 127:
                                    case "INBEVLU":
                                        categoryexperthuntEntity.INBEVLU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 128:
                                    case "INBEVLU-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVLU_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 129:
                                    case "INBEVLU-SAND":
                                        categoryexperthuntEntity.INBEVLU_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 130:
                                    case "INBEVLU-SAND-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVLU_SAND_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 131:
                                    case "INBEVMX":
                                        categoryexperthuntEntity.INBEVMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 132:
                                    case "INBEVMX-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVMX_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 133:
                                    case "INBEVNL":
                                        categoryexperthuntEntity.INBEVNL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 134:
                                    case "INBEVNL-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVNL_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 135:
                                    case "INBEVNL-SAND":
                                        categoryexperthuntEntity.INBEVNL_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 136:
                                    case "INBEVNL-SAND-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVNL_SAND_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 137:
                                    case "INBEVPY":
                                        categoryexperthuntEntity.INBEVPY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 138:
                                    case "INBEVPY-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVPY_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 139:
                                    case "INBEVTRADMX":
                                        categoryexperthuntEntity.INBEVTRADMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 140:
                                    case "INBEVTRADMX-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVTRADMX_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 141:
                                    case "INBEVUS":
                                        categoryexperthuntEntity.INBEVUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 142:
                                    case "INBEVUS-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVUS_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 143:
                                    case "JTIUA":
                                        categoryexperthuntEntity.JTIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 144:
                                    case "JTIUA-Category Expert Hunt":
                                        categoryexperthuntEntity.JTIUA_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 145:
                                    case "KCMY":
                                        categoryexperthuntEntity.KCMY = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 146:
                                    case "KCMY-Category Expert Hunt":
                                        categoryexperthuntEntity.KCMY_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 147:
                                    case "KCUS":
                                        categoryexperthuntEntity.KCUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 148:
                                    case "KCUS-Category Expert Hunt":
                                        categoryexperthuntEntity.KCUS_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 149:
                                    case "KEURIGCA":
                                        categoryexperthuntEntity.KEURIGCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 150:
                                    case "KEURIGCA-Category Expert Hunt":
                                        categoryexperthuntEntity.KEURIGCA_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////// just only finished 150 //////////////
                                    //case 151:
                                    case "LABATTPLNOPTCA":
                                        categoryexperthuntEntity.LABATTPLNOPTCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 152:
                                    case "LABATTPLNOPTCA-Category Expert Hunt":
                                        categoryexperthuntEntity.LABATTPLNOPTCA_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 153:
                                    case "LAVAZZAAT":
                                        categoryexperthuntEntity.LAVAZZAAT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 154:
                                    case "LAVAZZAAT-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAAT_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 155:
                                    case "LAVAZZAAU":
                                        categoryexperthuntEntity.LAVAZZAAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 156:
                                    case "LAVAZZAAU-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAAU_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 157:
                                    case "LAVAZZABE":
                                        categoryexperthuntEntity.LAVAZZABE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 158:
                                    case "LAVAZZABE-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZABE_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 159:
                                    case "LAVAZZABG":
                                        categoryexperthuntEntity.LAVAZZABG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 160:
                                    case "LAVAZZABG-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZABG_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 161:
                                    case "LAVAZZACA":
                                        categoryexperthuntEntity.LAVAZZACA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 162:
                                    case "LAVAZZACA-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZACA_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 163:
                                    case "LAVAZZACH":
                                        categoryexperthuntEntity.LAVAZZACH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 164:
                                    case "LAVAZZACH-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZACH_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 165:
                                    case "LAVAZZACL":
                                        categoryexperthuntEntity.LAVAZZACL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 166:
                                    case "LAVAZZACL-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZACL_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 167:
                                    case "LAVAZZACN":
                                        categoryexperthuntEntity.LAVAZZACN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 168:
                                    case "LAVAZZACN-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZACN_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 169:
                                    case "LAVAZZACZ":
                                        categoryexperthuntEntity.LAVAZZACZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 170:
                                    case "LAVAZZACZ-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZACZ_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 171:
                                    case "LAVAZZADE":
                                        categoryexperthuntEntity.LAVAZZADE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 172:
                                    case "LAVAZZADE-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZADE_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 173:
                                    case "LAVAZZADK":
                                        categoryexperthuntEntity.LAVAZZADK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 174:
                                    case "LAVAZZADK-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZADK_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 175:
                                    case "LAVAZZAEE":
                                        categoryexperthuntEntity.LAVAZZAEE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 176:
                                    case "LAVAZZAEE-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAEE_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 177:
                                    case "LAVAZZAES":
                                        categoryexperthuntEntity.LAVAZZAES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 178:
                                    case "LAVAZZAES-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAES_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 179:
                                    case "LAVAZZAFR":
                                        categoryexperthuntEntity.LAVAZZAFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 180:
                                    case "LAVAZZAFR-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAFR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 181:
                                    case "LAVAZZAGR":
                                        categoryexperthuntEntity.LAVAZZAGR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 182:
                                    case "LAVAZZAGR-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAGR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 183:
                                    case "LAVAZZAHK":
                                        categoryexperthuntEntity.LAVAZZAHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 184:
                                    case "LAVAZZAHK-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAHK_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 185:
                                    case "LAVAZZAHR":
                                        categoryexperthuntEntity.LAVAZZAHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 186:
                                    case "LAVAZZAHR-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAHR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 187:
                                    case "LAVAZZAIL":
                                        categoryexperthuntEntity.LAVAZZAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 188:
                                    case "LAVAZZAIL-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAIL_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 189:
                                    case "LAVAZZAIT":
                                        categoryexperthuntEntity.LAVAZZAIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 190:
                                    case "LAVAZZAIT-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAIT_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 191:
                                    case "LAVAZZAJP":
                                        categoryexperthuntEntity.LAVAZZAJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 192:
                                    case "LAVAZZAJP-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAJP_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 193:
                                    case "LAVAZZAKR":
                                        categoryexperthuntEntity.LAVAZZAKR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 194:
                                    case "LAVAZZAKR-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAKR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 195:
                                    case "LAVAZZALT":
                                        categoryexperthuntEntity.LAVAZZALT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 196:
                                    case "LAVAZZALT-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZALT_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 197:
                                    case "LAVAZZALU":
                                        categoryexperthuntEntity.LAVAZZALU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 198:
                                    case "LAVAZZALU-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZALU_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 199:
                                    case "LAVAZZALV":
                                        categoryexperthuntEntity.LAVAZZALV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 200:
                                    case "LAVAZZALV-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZALV_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 201:
                                    case "LAVAZZAMA":
                                        categoryexperthuntEntity.LAVAZZAMA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 202:
                                    case "LAVAZZAMA-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAMA_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 203:
                                    case "LAVAZZANL":
                                        categoryexperthuntEntity.LAVAZZANL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 204:
                                    case "LAVAZZANL-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZANL_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 205:
                                    case "LAVAZZAPL":
                                        categoryexperthuntEntity.LAVAZZAPL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 206:
                                    case "LAVAZZAPL-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAPL_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 207:
                                    case "LAVAZZARO":
                                        categoryexperthuntEntity.LAVAZZARO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 208:
                                    case "LAVAZZARO-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZARO_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 209:
                                    case "LAVAZZARU":
                                        categoryexperthuntEntity.LAVAZZARU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 210:
                                    case "LAVAZZARU-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZARU_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 211:
                                    case "LAVAZZASA":
                                        categoryexperthuntEntity.LAVAZZASA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 212:
                                    case "LAVAZZASA-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZASA_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 213:
                                    case "LAVAZZASE":
                                        categoryexperthuntEntity.LAVAZZASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 214:
                                    case "LAVAZZASE-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZASE_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 215:
                                    case "LAVAZZASG":
                                        categoryexperthuntEntity.LAVAZZASG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 216:
                                    case "LAVAZZASG-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZASG_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 217:
                                    case "LAVAZZAUAE":
                                        categoryexperthuntEntity.LAVAZZAUAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 218:
                                    case "LAVAZZAUAE-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAUAE_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 219:
                                    case "LAVAZZAUK":
                                        categoryexperthuntEntity.LAVAZZAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 220:
                                    case "LAVAZZAUK-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAUK_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 221:
                                    case "LAVAZZAUS":
                                        categoryexperthuntEntity.LAVAZZAUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 222:
                                    case "LAVAZZAUS-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAUS_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 223:

                                    case "LAVAZZAZA":
                                        categoryexperthuntEntity.LAVAZZAZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    case "LAVAZZAZA-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAZA_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 225:
                                    case "LRSUK":
                                        categoryexperthuntEntity.LRSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 226:
                                    case "LRSUK-Category Expert Hunt":
                                        categoryexperthuntEntity.LRSUK_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 227:
                                    case "MARSBR":
                                        categoryexperthuntEntity.MARSBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 228:
                                    case "MARSBR-Category Expert Hunt":
                                        categoryexperthuntEntity.MARSBR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 229:
                                    case "MARSIN":
                                        categoryexperthuntEntity.MARSIN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 230:
                                    case "MARSIN-Category Expert Hunt":
                                        categoryexperthuntEntity.MARSIN_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 231:
                                    case "MARSIN-OLD":
                                        categoryexperthuntEntity.MARSIN_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 232:
                                    case "MARSIN-OLD-Category Expert Hunt":
                                        categoryexperthuntEntity.MARSIN_OLD_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 233:
                                    case "MARSRU-PROD":
                                        categoryexperthuntEntity.MARSRU_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 234:
                                    case "MARSRU-PROD-Category Expert Hunt":
                                        categoryexperthuntEntity.MARSRU_PROD_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 235:
                                    case "MAYORAID":
                                        categoryexperthuntEntity.MAYORAID = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 236:
                                    case "MAYORAID-Category Expert Hunt":
                                        categoryexperthuntEntity.MAYORAID_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 237:
                                    case "MJNCN":
                                        categoryexperthuntEntity.MJNCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 238:
                                    case "MJNCN-Category Expert Hunt":
                                        categoryexperthuntEntity.MJNCN_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 239:
                                    case "MOLSONCOOLERHN":
                                        categoryexperthuntEntity.MOLSONCOOLERHN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 240:
                                    case "MOLSONCOOLERHN-Category Expert Hunt":
                                        categoryexperthuntEntity.MOLSONCOOLERHN_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 241:
                                    case "MOLSONCOOLERHR":
                                        categoryexperthuntEntity.MOLSONCOOLERHR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 242:
                                    case "MOLSONCOOLERHR-Category Expert Hunt":
                                        categoryexperthuntEntity.MOLSONCOOLERHR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 243:
                                    case "MOLSONCOORSUK":
                                        categoryexperthuntEntity.MOLSONCOORSUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 244:
                                    case "MOLSONCOORSUK-Category Expert Hunt":
                                        categoryexperthuntEntity.MOLSONCOORSUK_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 245:
                                    case "NESTLEUK":
                                        categoryexperthuntEntity.NESTLEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 246:
                                    case "NESTLEUK-Category Expert Hunt":
                                        categoryexperthuntEntity.NESTLEUK_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 247:
                                    case "NIVEAUK":
                                        categoryexperthuntEntity.NIVEAUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 248:
                                    case "NIVEAUK-Category Expert Hunt":
                                        categoryexperthuntEntity.NIVEAUK_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 249:
                                    case "NRF2017-DEMO":
                                        categoryexperthuntEntity.NRF2017_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 250:
                                    case "NRF2017-DEMO-Category Expert Hunt":
                                        categoryexperthuntEntity.NRF2017_DEMO_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 251:
                                    case "ONE-AMERICAS-DEMO":
                                        categoryexperthuntEntity.ONE_AMERICAS_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 252:                                  
                                    case "ONE-AMERICAS-DEMO-Category Expert Hunt":
                                        categoryexperthuntEntity.ONE_AMERICAS_DEMO_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 253:
                                    case "ONE-APAC-DEMO":
                                        categoryexperthuntEntity.ONE_APAC_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 254:
                                    case "ONE-APAC-DEMO-Category Expert Hunt":
                                        categoryexperthuntEntity.ONE_APAC_DEMO_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 255:
                                    case "PEPSICOBR":
                                        categoryexperthuntEntity.PEPSICOBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 256:
                                    case "PEPSICOBR-Category Expert Hunt":
                                        categoryexperthuntEntity.PEPSICOBR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 257:
                                    case "PNGAU":
                                        categoryexperthuntEntity.PNGAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 258:
                                    case "PNGAU-Category Expert Hunt":
                                        categoryexperthuntEntity.PNGAU_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 259:
                                    case "PNGAU-OLD":
                                        categoryexperthuntEntity.PNGAU_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 260:
                                    case "PNGAU-OLD-Category Expert Hunt":
                                        categoryexperthuntEntity.PNGAU_OLD_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 261:
                                    case "PNGCAREUS":
                                        categoryexperthuntEntity.PNGCAREUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 262:
                                    case "PNGCAREUS-Category Expert Hunt":
                                        categoryexperthuntEntity.PNGCAREUS_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 263:
                                    case "PNGCN-PROD":
                                        categoryexperthuntEntity.PNGCN_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 264:
                                    case "PNGCN-PROD-Category Expert Hunt":
                                        categoryexperthuntEntity.PNGCN_PROD_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 265:
                                    case "PNGJP":
                                        categoryexperthuntEntity.PNGJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 266:
                                    case "PNGJP-Category Expert Hunt":
                                        categoryexperthuntEntity.PNGJP_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 267:
                                    case "PNGJP-OLD":
                                        categoryexperthuntEntity.PNGJP_OLD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 268:
                                    case "PNGJP-OLD-Category Expert Hunt":
                                        categoryexperthuntEntity.PNGJP_OLD_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 269:
                                    case "PNGUS":
                                        categoryexperthuntEntity.PNGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 270:
                                    case "PNGUS-Category Expert Hunt":
                                        categoryexperthuntEntity.PNGUS_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 271:
                                    case "PNGUSEPISODIC":
                                        categoryexperthuntEntity.PNGUSEPISODIC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 272:
                                    case "PNGUSEPISODIC-Category Expert Hunt":
                                        categoryexperthuntEntity.PNGUSEPISODIC_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 273:
                                    case "RBUS":
                                        categoryexperthuntEntity.RBUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 274:
                                    case "RBUS-Category Expert Hunt":
                                        categoryexperthuntEntity.RBUS_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 275:
                                    case "RE-XSUITE-DEMO":
                                        categoryexperthuntEntity.RE_XSUITE_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 276:
                                    case "RE-XSUITE-DEMO-Category Expert Hunt":
                                        categoryexperthuntEntity.RE_XSUITE_DEMO_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 277:
                                    case "REPNGCN-DEMO":
                                        categoryexperthuntEntity.REPNGCN_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 278:
                                    case "REPNGCN-DEMO-Category Expert Hunt":
                                        categoryexperthuntEntity.REPNGCN_DEMO_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 279:
                                    case "RI-DEMO":
                                        categoryexperthuntEntity.RI_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 280:
                                    case "RI-DEMO-Category Expert Hunt":
                                        categoryexperthuntEntity.RI_DEMO_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 281:
                                    case "RI-DIAGEOAU":
                                        categoryexperthuntEntity.RI_DIAGEOAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 282:
                                    case "RI-DIAGEOAU-Category Expert Hunt":
                                        categoryexperthuntEntity.RI_DIAGEOAU_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 283:
                                    case "RIALCBEVUK-PROD":
                                        categoryexperthuntEntity.RIALCBEVUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 284:
                                    case "RIALCBEVUK-PROD-Category Expert Hunt":
                                        categoryexperthuntEntity.RIALCBEVUK_PROD_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 285:
                                    case "RICOFFEEUS":
                                        categoryexperthuntEntity.RICOFFEEUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 286:
                                    case "RICOFFEEUS-Category Expert Hunt":
                                        categoryexperthuntEntity.RICOFFEEUS_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 287:
                                    case "RINIELSENUS":
                                        categoryexperthuntEntity.RINIELSENUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 288:
                                    case "RINIELSENUS-Category Expert Hunt":
                                        categoryexperthuntEntity.RINIELSENUS_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 289:
                                    case "RIPETCAREUK-PROD":
                                        categoryexperthuntEntity.RIPETCAREUK_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 290:
                                    case "RIPETCAREUK-PROD-Category Expert Hunt":
                                        categoryexperthuntEntity.RIPETCAREUK_PROD_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 291:
                                    case "RIUS":
                                        categoryexperthuntEntity.RIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 292:
                                    case "RIUS-Category Expert Hunt":
                                        categoryexperthuntEntity.RIUS_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 293:
                                    case "RIUS-DEV":
                                        categoryexperthuntEntity.RIUS_DEV = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 294:
                                    case "RIUS-DEV-Category Expert Hunt":
                                        categoryexperthuntEntity.RIUS_DEV_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 295:
                                    case "RNBDE":
                                        categoryexperthuntEntity.RNBDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 296:
                                    case "RNBDE-Category Expert Hunt":
                                        categoryexperthuntEntity.RNBDE_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 297:
                                    case "SMARTCOOLER-POC2":
                                        categoryexperthuntEntity.SMARTCOOLER_POC2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 298:
                                    case "SMARTCOOLER-POC2-Category Expert Hunt":
                                        categoryexperthuntEntity.SMARTCOOLER_POC2_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 299:
                                    case "SMARTCOOLER-TRN":
                                        categoryexperthuntEntity.SMARTCOOLER_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 300:
                                    case "SMARTCOOLER-TRN-Category Expert Hunt":
                                        categoryexperthuntEntity.SMARTCOOLER_TRN_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 301:
                                    case "SMARTCOOLER2-TRN":
                                        categoryexperthuntEntity.SMARTCOOLER2_TRN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 302:
                                    case "SMARTCOOLER2-TRN-Category Expert Hunt":
                                        categoryexperthuntEntity.SMARTCOOLER2_TRN_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 303:
                                    case "SOLARBR":
                                        categoryexperthuntEntity.SOLARBR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 304:
                                    case "SOLARBR-Category Expert Hunt":
                                        categoryexperthuntEntity.SOLARBR_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 305:
                                    case "STATIC-CAMERA-DEMO":
                                        categoryexperthuntEntity.STATIC_CAMERA_DEMO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 306:
                                    case "STATIC-CAMERA-DEMO-Category Expert Hunt":
                                        categoryexperthuntEntity.STATIC_CAMERA_DEMO_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 307:
                                    case "SWIRECN":
                                        categoryexperthuntEntity.SWIRECN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 308:
                                    case "SWIRECN-Category Expert Hunt":
                                        categoryexperthuntEntity.SWIRECN_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 309:
                                    case "SWIREREDCN":
                                        categoryexperthuntEntity.SWIREREDCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 310:
                                    case "SWIREREDCN-Category Expert Hunt":
                                        categoryexperthuntEntity.SWIREREDCN_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 311:
                                    case "TNUVAIL":
                                        categoryexperthuntEntity.TNUVAIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 312:
                                    case "TNUVAIL-Category Expert Hunt":
                                        categoryexperthuntEntity.TNUVAIL_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 313:
                                    case "TRAXDEMO-TS-PROD":
                                        categoryexperthuntEntity.TRAXDEMO_TS_PROD = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 314:
                                    case "TRAXDEMO-TS-PROD-Category Expert Hunt":
                                        categoryexperthuntEntity.TRAXDEMO_TS_PROD_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 315:
                                    case "TWEAU":
                                        categoryexperthuntEntity.TWEAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 316:
                                    case "TWEAU-Category Expert Hunt":
                                        categoryexperthuntEntity.TWEAU_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 317:
                                    case "RI-DEMO2":
                                        categoryexperthuntEntity.RI_DEMO2 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 318:
                                    case "RI-DEMO2-Category Expert Hunt":
                                        categoryexperthuntEntity.RI_DEMO2_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 319:
                                    case "COMPASSCCH-SAND":
                                        categoryexperthuntEntity.COMPASSCCH_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 320:
                                    case "COMPASSCCH-SAND-Category Expert Hunt":
                                        categoryexperthuntEntity.COMPASSCCH_SAND_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 321:
                                    case "LAVAZZAIT-SAND":
                                        categoryexperthuntEntity.LAVAZZAIT_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 322:
                                    case "LAVAZZAIT-SAND-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAIT_SAND_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    ////////////////////////
                                    //case 323:
                                    case "INBEVUS-STG":
                                        categoryexperthuntEntity.INBEVUS_STG = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 324:
                                    case "INBEVUS-STG-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVUS_STG_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 325:
                                    case "LAVAZZAFR-SAND":
                                        categoryexperthuntEntity.LAVAZZAFR_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 326:
                                    case "LAVAZZAFR-SAND-Category Expert Hunt":
                                        categoryexperthuntEntity.LAVAZZAFR_SAND_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 327:
                                    case "INBEVBE-SAND":
                                        categoryexperthuntEntity.INBEVBE_SAND = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 328:
                                    case "INBEVBE-SAND-Category Expert Hunt":
                                        categoryexperthuntEntity.INBEVBE_SAND_CategoryExpertHunt = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;


                                    //NEW Columns Addition
                                    //case 333:
                                    case "B2BRU":
                                        categoryexperthuntEntity.B2BRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 334:
                                    case "BRMUS":
                                        categoryexperthuntEntity.BRMUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 335:
                                    case "CBCIL":
                                        categoryexperthuntEntity.CBCIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 336:
                                    case "CCCOOLERMX":
                                        categoryexperthuntEntity.CCCOOLERMX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 337:
                                    case "DIAGEOAR":
                                        categoryexperthuntEntity.DIAGEOAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 338:
                                    case "DIAGEOBENELUX":
                                        categoryexperthuntEntity.DIAGEOBENELUX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 339:
                                    case "DIAGEOCH":
                                        categoryexperthuntEntity.DIAGEOCH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 340:
                                    case "DIAGEOGA":
                                        categoryexperthuntEntity.DIAGEOGA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 341:
                                    case "DIAGEOGTR":
                                        categoryexperthuntEntity.DIAGEOGTR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 342:
                                    case "DIAGEONORDICS":
                                        categoryexperthuntEntity.DIAGEONORDICS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 343:
                                    case "DIAGEOUS":
                                        categoryexperthuntEntity.DIAGEOUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 344:
                                    case "FERREROEXTIT":
                                        categoryexperthuntEntity.FERREROEXTIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 345:
                                    case "GOOGLEHK":
                                        categoryexperthuntEntity.GOOGLEHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 346:
                                    case "HEINEKENPILOTCN":
                                        categoryexperthuntEntity.HEINEKENPILOTCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 347:
                                    case "IMBO":
                                        categoryexperthuntEntity.IMBO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 348:
                                    case "INBEVCI":
                                        categoryexperthuntEntity.INBEVCI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 349:
                                    case "INBEVCNTT":
                                        categoryexperthuntEntity.INBEVCNTT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 350:
                                    case "INBEVCO":
                                        categoryexperthuntEntity.INBEVCO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 351:
                                    case "INBEVZA":
                                        categoryexperthuntEntity.INBEVZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 352:
                                    case "INORU":
                                        categoryexperthuntEntity.INORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 353:
                                    case "JJSP":
                                        categoryexperthuntEntity.JJSP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 354:
                                    case "JNJES":
                                        categoryexperthuntEntity.JNJES = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 355:
                                    case "JNJUK":
                                        categoryexperthuntEntity.JNJUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 356:
                                    case "JRIJP":
                                        categoryexperthuntEntity.JRIJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 357:
                                    case "KELLOGSUSPOC":
                                        categoryexperthuntEntity.KELLOGSUSPOC = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 358:
                                    case "KRAFTUS":
                                        categoryexperthuntEntity.KRAFTUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 359:
                                    case "MARS-CHOCO-RU":
                                        categoryexperthuntEntity.MARS_CHOCO_RU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 360:
                                    case "MHUK":
                                        categoryexperthuntEntity.MHUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 361:
                                    case "MILLERCOORS":
                                        categoryexperthuntEntity.MILLERCOORS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 362:
                                    case "MOLSONONTRADEUK":
                                        categoryexperthuntEntity.MOLSONONTRADEUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 363:
                                    case "MYCHEMISTAU":
                                        categoryexperthuntEntity.MYCHEMISTAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 364:
                                    case "NESTLEROAMLERUK":
                                        categoryexperthuntEntity.NESTLEROAMLERUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 365:
                                    case "NRF2018":
                                        categoryexperthuntEntity.NRF2018 = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 366:
                                    case "PENAFLORAR":
                                        categoryexperthuntEntity.PENAFLORAR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 367:
                                    case "PMIUA":
                                        categoryexperthuntEntity.PMIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 368:
                                    case "PNGAMERICA":
                                        categoryexperthuntEntity.PNGAMERICA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 369:
                                    case "PNGRO":
                                        categoryexperthuntEntity.PNGRO = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 370:
                                    case "RBAU":
                                        categoryexperthuntEntity.RBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 371:
                                    case "RBCA":
                                        categoryexperthuntEntity.RBCA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 372:
                                    case "RBDK":
                                        categoryexperthuntEntity.RBDK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 373:
                                    case "RBMANUAL":
                                        categoryexperthuntEntity.RBMANUAL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 374:
                                    case "RINIELSENRU-MARS":
                                        categoryexperthuntEntity.RINIELSENRU_MARS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 375:
                                    case "RINIELSENUSQI":
                                        categoryexperthuntEntity.RINIELSENUSQI = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 376:
                                    case "RIPANELCN":
                                        categoryexperthuntEntity.RIPANELCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 377:
                                    case "RISPARKWINEDE":
                                        categoryexperthuntEntity.RISPARKWINEDE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 378:
                                    case "SANOFIAE":
                                        categoryexperthuntEntity.SANOFIAE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 379:
                                    case "SANOFIAU":
                                        categoryexperthuntEntity.SANOFIAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 380:
                                    case "SANOFIHK":
                                        categoryexperthuntEntity.SANOFIHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 381:
                                    case "SANOFIKH":
                                        categoryexperthuntEntity.SANOFIKH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 382:
                                    case "SANOFINZ":
                                        categoryexperthuntEntity.SANOFINZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 383:
                                    case "SANOFIRU":
                                        categoryexperthuntEntity.SANOFIRU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 384:
                                    case "SANOFITR":
                                        categoryexperthuntEntity.SANOFITR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 385:
                                    case "SANOFIUA":
                                        categoryexperthuntEntity.SANOFIUA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 386:
                                    case "SHUFERSALIL":
                                        categoryexperthuntEntity.SHUFERSALIL = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 387:
                                    case "SUNTORYJP":
                                        categoryexperthuntEntity.SUNTORYJP = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 388:
                                    case "TESCOTH":
                                        categoryexperthuntEntity.TESCOTH = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 389:
                                    case "TESCOUK":
                                        categoryexperthuntEntity.TESCOUK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 390:
                                    case "TRAXROBOT":
                                        categoryexperthuntEntity.TRAXROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;
                                    //case 391:
                                    case "XSUITE-SHOWCASE":
                                        categoryexperthuntEntity.XSUITE_SHOWCASE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 392:
                                    case "ABIUS":
                                        categoryexperthuntEntity.ABIUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 393:
                                    case "BADGERROBOT":
                                        categoryexperthuntEntity.BADGERROBOT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 394:
                                    case "CUBAU":
                                        categoryexperthuntEntity.CUBAU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 395:
                                    case "DIAGEORU":
                                        categoryexperthuntEntity.DIAGEORU = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 396:
                                    case "GFKFR":
                                        categoryexperthuntEntity.GFKFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 397:
                                    case "JNJIT":
                                        categoryexperthuntEntity.JNJIT = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 398:
                                    case "LIGHTTRAX":
                                        categoryexperthuntEntity.LIGHTTRAX = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 399:
                                    case "LIGHTTRAXOFFLINE":
                                        categoryexperthuntEntity.LIGHTTRAXOFFLINE = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 400:
                                    case "RINIELSENFR":
                                        categoryexperthuntEntity.RINIELSENFR = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 401:
                                    case "SANOFIKZ":
                                        categoryexperthuntEntity.SANOFIKZ = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 402:
                                    case "SANOFILB":
                                        categoryexperthuntEntity.SANOFILB = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 403:
                                    case "SANOFISA":
                                        categoryexperthuntEntity.SANOFISA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 404:
                                    case "SANOFIZA":
                                        categoryexperthuntEntity.SANOFIZA = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 405:
                                    case "WATSONSHK":
                                        categoryexperthuntEntity.WATSONSHK = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 406:
                                    case "KELLOGGUS":
                                        categoryexperthuntEntity.KELLOGGUS = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    //case 407:
                                    case "TSINGTAOBEERCN":
                                        categoryexperthuntEntity.TSINGTAOBEERCN = Convert.ToInt32(Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == "" || Convert.ToString(ws.Cells[rowNumber, colNumber].Value).Trim() == null ? 0 : ws.Cells[rowNumber, colNumber].Value);
                                        break;

                                    #region "No need region"

                                    #endregion

                                    default: break;


                                    #endregion
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        Response.Redirect("error.aspx");
                        throw ex;
                    }
                }

                if (globalCenterName == center && rowNumber > 1)
                {
                    categoryexperthuntEntity.ImportedDate = GeneralUtility.ConvertSystemDateStringFormat(txtImportDate.Text.Trim());//GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    categoryexperthuntEntity.ImportedYear = categoryexperthuntEntity.ImportedDate.Substring(0, 6);
                    //pricingprobesEntity.ImportTime = GeneralUtility.ConvertSystemTimeFormat(System.DateTime.Now);
                    categoryexperthuntEntity.CreatedDate = GeneralUtility.ConvertSystemDateStringFormat(System.DateTime.Now);
                    categoryexperthuntEntity.CreatedBy = userEntity.ID;


                    categoryexperthuntlist.Add(categoryexperthuntEntity);
                }

                #endregion
            }
        }



        public int BulkInsertIntoProbes(List<ProbesEntity> probes)
        {
            using (var scope = new TransactionScope())
            {
                string connectionString = ConfigurationManager.ConnectionStrings["Client"].ConnectionString;
                var sqlConnection = new SqlConnection(connectionString);
                var sqlBulkCopy = new SqlBulkCopy(sqlConnection)
                {
                    DestinationTableName = "Probes",
                    //BulkCopyTimeout = 6000
                };
                var dataTable = GetDataTableForProbe(probes);
                sqlConnection.Open();

                sqlBulkCopy.WriteToServer(dataTable);

                scope.Complete();
                sqlBulkCopy.Close();
                sqlConnection.Close();
                sqlConnection.Dispose();
            }
            return probes.Count;
        }


        private DataTable GetDataTableForProbe(List<ProbesEntity> probes)
        {
            var table = new DataTable();        
            table.Columns.Add("ID",typeof(string));
	        table.Columns.Add("QAT",typeof(string));
	        table.Columns.Add("Center",typeof(string));
	        table.Columns.Add("TotalProbes",typeof(int));
	        table.Columns.Add("AvgsecondsperProbes",typeof(int));
	        table.Columns.Add("ABICA",typeof(int));
	        table.Columns.Add("ABICA_Probes",typeof(int));
	        table.Columns.Add("ABITAMSUS_PROD",typeof(int));
	        table.Columns.Add("ABITAMSUS_PROD_Probes",typeof(int));
	        table.Columns.Add("AMERICAS_DEMO",typeof(int));
	        table.Columns.Add("AMERICAS_DEMO_Probes",typeof(int));
	        table.Columns.Add("BATRU",typeof(int));
	        table.Columns.Add("BATRU_Probes",typeof(int));
	        table.Columns.Add("BIKR",typeof(int));
	        table.Columns.Add("BIKR_Probes",typeof(int));
	        table.Columns.Add("BIMY",typeof(int));
	        table.Columns.Add("BIMY_Probes",typeof(int));
	        table.Columns.Add("BIPH",typeof(int));
	        table.Columns.Add("BIPH_Probes",typeof(int));
	        table.Columns.Add("BISEASK",typeof(int));
	        table.Columns.Add("BISEASK_Probes",typeof(int));
	        table.Columns.Add("BITH",typeof(int));
	        table.Columns.Add("BITH_Probes",typeof(int));
	        table.Columns.Add("BIVN",typeof(int));
	        table.Columns.Add("BIVN_Probes",typeof(int));
	        table.Columns.Add("BPAU",typeof(int));
	        table.Columns.Add("BPAU_Probes",typeof(int));
	        table.Columns.Add("BRODMANN",typeof(int));
	        table.Columns.Add("BRODMANN_Probes",typeof(int));
	        table.Columns.Add("CARREFOURAR",typeof(int));
	        table.Columns.Add("CARREFOURAR_Probes",typeof(int));
	        table.Columns.Add("CCAAU",typeof(int));
	        table.Columns.Add("CCAAU_Probes",typeof(int));
	        table.Columns.Add("CCABIZA",typeof(int));
	        table.Columns.Add("CCABIZA_Probes",typeof(int));
	        table.Columns.Add("CCANZ",typeof(int));
	        table.Columns.Add("CCANZ_Probes",typeof(int));
	        table.Columns.Add("CCBOTTLERSUS",typeof(int));
	        table.Columns.Add("CCBOTTLERSUS_Probes",typeof(int));
	        table.Columns.Add("CCBR_PROD",typeof(int));
	        table.Columns.Add("CCBR_PROD_Probes",typeof(int));
	        table.Columns.Add("CCJP",typeof(int));
	        table.Columns.Add("CCJP_Probes",typeof(int));
	        table.Columns.Add("CCKH",typeof(int));
	        table.Columns.Add("CCKH_Probes",typeof(int));
	        table.Columns.Add("CCKR",typeof(int));
	        table.Columns.Add("CCKR_Probes",typeof(int));
	        table.Columns.Add("CCMY",typeof(int));
	        table.Columns.Add("CCMY_Probes",typeof(int));
	        table.Columns.Add("CCPH",typeof(int));
	        table.Columns.Add("CCPH_Probes",typeof(int));
	        table.Columns.Add("CCRPR_PROD",typeof(int));
	        table.Columns.Add("CCRPR_PROD_Probes",typeof(int));
	        table.Columns.Add("CCRU",typeof(int));
	        table.Columns.Add("CCRU_Probes",typeof(int));
	        table.Columns.Add("CCTH",typeof(int));
	        table.Columns.Add("CCTH_Probes",typeof(int));
	        table.Columns.Add("CCTH_UAT",typeof(int));
	        table.Columns.Add("CCTH_UAT_Probes",typeof(int));
	        table.Columns.Add("CCTRADMX",typeof(int));
	        table.Columns.Add("CCTRADMX_Probes",typeof(int));
	        table.Columns.Add("CCUS",typeof(int));
	        table.Columns.Add("CCUS_Probes",typeof(int));
	        table.Columns.Add("CCZA",typeof(int));
	        table.Columns.Add("CCZA_Probes",typeof(int));
	        table.Columns.Add("CEREBOSTH",typeof(int));
	        table.Columns.Add("CEREBOSTH_Probes",typeof(int));
	        table.Columns.Add("CROWDSOURCE",typeof(int));
	        table.Columns.Add("CROWDSOURCE_Probes",typeof(int));
	        table.Columns.Add("DIAGEOAU",typeof(int));
	        table.Columns.Add("DIAGEOAU_Probes",typeof(int));
	        table.Columns.Add("DIAGEOBR",typeof(int));
	        table.Columns.Add("DIAGEOBR_Probes",typeof(int));
	        table.Columns.Add("DIAGEOGR",typeof(int));
	        table.Columns.Add("DIAGEOGR_Probes",typeof(int));
	        table.Columns.Add("DIAGEOIE",typeof(int));
	        table.Columns.Add("DIAGEOIE_Probes",typeof(int));
	        table.Columns.Add("DIAGEOKE",typeof(int));
	        table.Columns.Add("DIAGEOKE_Probes",typeof(int));
	        table.Columns.Add("DIAGEOMX",typeof(int));
	        table.Columns.Add("DIAGEOMX_Probes",typeof(int));
	        table.Columns.Add("DIAGEOPT",typeof(int));
	        table.Columns.Add("DIAGEOPT_Probes",typeof(int));
	        table.Columns.Add("DIAGEOTW",typeof(int));
	        table.Columns.Add("DIAGEOTW_Probes",typeof(int));
	        table.Columns.Add("DIAGEOUK",typeof(int));
	        table.Columns.Add("DIAGEOUK_Probes",typeof(int));
	        table.Columns.Add("DIAGEOZA",typeof(int));
	        table.Columns.Add("DIAGEOZA_Probes",typeof(int));
	        table.Columns.Add("EMEA_DEMO",typeof(int));
	        table.Columns.Add("EMEA_DEMO_Probes",typeof(int));
	        table.Columns.Add("FERREROIT",typeof(int));
	        table.Columns.Add("FERREROIT_Probes",typeof(int));
	        table.Columns.Add("GILLETTEUS",typeof(int));
	        table.Columns.Add("GILLETTEUS_Probes",typeof(int));
	        table.Columns.Add("GOOGLEUS",typeof(int));
	        table.Columns.Add("GOOGLEUS_Probes",typeof(int));
	        table.Columns.Add("HBCDE",typeof(int));
	        table.Columns.Add("HBCDE_Probes",typeof(int));
	        table.Columns.Add("HEINEKENCN",typeof(int));
	        table.Columns.Add("HEINEKENCN_Probes",typeof(int));
	        table.Columns.Add("HEINEKENUS_PROD",typeof(int));
	        table.Columns.Add("HEINEKENUS_PROD_Probes",typeof(int));
	        table.Columns.Add("HEINZCR",typeof(int));
	        table.Columns.Add("HEINZCR_Probes",typeof(int));
	        table.Columns.Add("INBEVAR",typeof(int));
	        table.Columns.Add("INBEVAR_Probes",typeof(int));
	        table.Columns.Add("INBEVBE",typeof(int));
	        table.Columns.Add("INBEVBE_Probes",typeof(int));
	        table.Columns.Add("INBEVBE_SAND",typeof(int));
	        table.Columns.Add("INBEVBE_SAND_Probes",typeof(int));
	        table.Columns.Add("INBEVBR",typeof(int));
	        table.Columns.Add("INBEVBR_Probes",typeof(int));
	        table.Columns.Add("INBEVBR_ONTRADE",typeof(int));
	        table.Columns.Add("INBEVBR_ONTRADE_Probes",typeof(int));
	        table.Columns.Add("INBEVCL",typeof(int));
	        table.Columns.Add("INBEVCL_Probes",typeof(int));
	        table.Columns.Add("INBEVCN",typeof(int));
	        table.Columns.Add("INBEVCN_Probes",typeof(int));
	        table.Columns.Add("INBEVCOOLERAR",typeof(int));
	        table.Columns.Add("INBEVCOOLERAR_Probes",typeof(int));
	        table.Columns.Add("INBEVCOOLERBR",typeof(int));
	        table.Columns.Add("INBEVCOOLERBR_Probes",typeof(int));
	        table.Columns.Add("INBEVCOOLERUS",typeof(int));
	        table.Columns.Add("INBEVCOOLERUS_Probes",typeof(int));
	        table.Columns.Add("INBEVFR",typeof(int));
	        table.Columns.Add("INBEVFR_Probes",typeof(int));
	        table.Columns.Add("INBEVLU",typeof(int));
	        table.Columns.Add("INBEVLU_Probes",typeof(int));
	        table.Columns.Add("INBEVLU_SAND",typeof(int));
	        table.Columns.Add("INBEVLU_SAND_Probes",typeof(int));
	        table.Columns.Add("INBEVMX",typeof(int));
	        table.Columns.Add("INBEVMX_Probes",typeof(int));
	        table.Columns.Add("INBEVNL",typeof(int));
	        table.Columns.Add("INBEVNL_Probes",typeof(int));
	        table.Columns.Add("INBEVNL_SAND",typeof(int));
	        table.Columns.Add("INBEVNL_SAND_Probes",typeof(int));
	        table.Columns.Add("INBEVPY",typeof(int));
	        table.Columns.Add("INBEVPY_Probes",typeof(int));
	        table.Columns.Add("INBEVTRADMX",typeof(int));
	        table.Columns.Add("INBEVTRADMX_Probes",typeof(int));
	        table.Columns.Add("INBEVUS",typeof(int));
	        table.Columns.Add("INBEVUS_Probes",typeof(int));
	        table.Columns.Add("JTIUA",typeof(int));
	        table.Columns.Add("JTIUA_Probes",typeof(int));
	        table.Columns.Add("KCMY",typeof(int));
	        table.Columns.Add("KCMY_Probes",typeof(int));
	        table.Columns.Add("KCUS",typeof(int));
	        table.Columns.Add("KCUS_Probes",typeof(int));
	        table.Columns.Add("KEURIGCA",typeof(int));
	        table.Columns.Add("KEURIGCA_Probes",typeof(int));
	        table.Columns.Add("LABATTPLNOPTCA",typeof(int));
	        table.Columns.Add("LABATTPLNOPTCA_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAAT",typeof(int));
	        table.Columns.Add("LAVAZZAAT_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAAU",typeof(int));
	        table.Columns.Add("LAVAZZAAU_Probes",typeof(int));
	        table.Columns.Add("LAVAZZABE",typeof(int));
	        table.Columns.Add("LAVAZZABE_Probes",typeof(int));
	        table.Columns.Add("LAVAZZABG",typeof(int));
	        table.Columns.Add("LAVAZZABG_Probes",typeof(int));
	        table.Columns.Add("LAVAZZACA",typeof(int));
	        table.Columns.Add("LAVAZZACA_Probes",typeof(int));
	        table.Columns.Add("LAVAZZACH",typeof(int));
	        table.Columns.Add("LAVAZZACH_Probes",typeof(int));
	        table.Columns.Add("LAVAZZACL",typeof(int));
	        table.Columns.Add("LAVAZZACL_Probes",typeof(int));
	        table.Columns.Add("LAVAZZACN",typeof(int));
	        table.Columns.Add("LAVAZZACN_Probes",typeof(int));
	        table.Columns.Add("LAVAZZACZ",typeof(int));
	        table.Columns.Add("LAVAZZACZ_Probes",typeof(int));
	        table.Columns.Add("LAVAZZADE",typeof(int));
	        table.Columns.Add("LAVAZZADE_Probes",typeof(int));
	        table.Columns.Add("LAVAZZADK",typeof(int));
	        table.Columns.Add("LAVAZZADK_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAEE",typeof(int));
	        table.Columns.Add("LAVAZZAEE_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAES",typeof(int));
	        table.Columns.Add("LAVAZZAES_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAFR",typeof(int));
	        table.Columns.Add("LAVAZZAFR_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAGR",typeof(int));
	        table.Columns.Add("LAVAZZAGR_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAHK",typeof(int));
	        table.Columns.Add("LAVAZZAHK_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAHR",typeof(int));
	        table.Columns.Add("LAVAZZAHR_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAIL",typeof(int));
	        table.Columns.Add("LAVAZZAIL_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAIT",typeof(int));
	        table.Columns.Add("LAVAZZAIT_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAJP",typeof(int));
	        table.Columns.Add("LAVAZZAJP_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAKR",typeof(int));
	        table.Columns.Add("LAVAZZAKR_Probes",typeof(int));
	        table.Columns.Add("LAVAZZALT",typeof(int));
	        table.Columns.Add("LAVAZZALT_Probes",typeof(int));
	        table.Columns.Add("LAVAZZALU",typeof(int));
	        table.Columns.Add("LAVAZZALU_Probes",typeof(int));
	        table.Columns.Add("LAVAZZALV",typeof(int));
	        table.Columns.Add("LAVAZZALV_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAMA",typeof(int));
	        table.Columns.Add("LAVAZZAMA_Probes",typeof(int));
	        table.Columns.Add("LAVAZZANL",typeof(int));
	        table.Columns.Add("LAVAZZANL_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAPL",typeof(int));
	        table.Columns.Add("LAVAZZAPL_Probes",typeof(int));
	        table.Columns.Add("LAVAZZARO",typeof(int));
	        table.Columns.Add("LAVAZZARO_Probes",typeof(int));
	        table.Columns.Add("LAVAZZARU",typeof(int));
	        table.Columns.Add("LAVAZZARU_Probes",typeof(int));
	        table.Columns.Add("LAVAZZASA",typeof(int));
	        table.Columns.Add("LAVAZZASA_Probes",typeof(int));
	        table.Columns.Add("LAVAZZASE",typeof(int));
	        table.Columns.Add("LAVAZZASE_Probes",typeof(int));
	        table.Columns.Add("LAVAZZASG",typeof(int));
	        table.Columns.Add("LAVAZZASG_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAUAE",typeof(int));
	        table.Columns.Add("LAVAZZAUAE_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAUK",typeof(int));
	        table.Columns.Add("LAVAZZAUK_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAUS",typeof(int));
	        table.Columns.Add("LAVAZZAUS_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAZA",typeof(int));
	        table.Columns.Add("LAVAZZAZA_Probes",typeof(int));
	        table.Columns.Add("LRSUK",typeof(int));
	        table.Columns.Add("LRSUK_Probes",typeof(int));
	        table.Columns.Add("MARSBR",typeof(int));
	        table.Columns.Add("MARSBR_Probes",typeof(int));
	        table.Columns.Add("MARSIN",typeof(int));
	        table.Columns.Add("MARSIN_Probes",typeof(int));
	        table.Columns.Add("MARSIN_OLD",typeof(int));
	        table.Columns.Add("MARSIN_OLD_Probes",typeof(int));
	        table.Columns.Add("MARSRU_PROD",typeof(int));
	        table.Columns.Add("MARSRU_PROD_Probes",typeof(int));
	        table.Columns.Add("MAYORAID",typeof(int));
	        table.Columns.Add("MAYORAID_Probes",typeof(int));
	        table.Columns.Add("MJNCN",typeof(int));
	        table.Columns.Add("MJNCN_Probes",typeof(int));
	        table.Columns.Add("MOLSONCOOLERHN",typeof(int));
	        table.Columns.Add("MOLSONCOOLERHN_Probes",typeof(int));
	        table.Columns.Add("MOLSONCOOLERHR",typeof(int));
	        table.Columns.Add("MOLSONCOOLERHR_Probes",typeof(int));
	        table.Columns.Add("MOLSONCOORSUK",typeof(int));
	        table.Columns.Add("MOLSONCOORSUK_Probes",typeof(int));
	        table.Columns.Add("NESTLEUK",typeof(int));
	        table.Columns.Add("NESTLEUK_Probes",typeof(int));
	        table.Columns.Add("NIVEAUK",typeof(int));
	        table.Columns.Add("NIVEAUK_Probes",typeof(int));
	        table.Columns.Add("NRF2017_DEMO",typeof(int));
	        table.Columns.Add("NRF2017_DEMO_Probes",typeof(int));
	        table.Columns.Add("ONE_AMERICAS_DEMO",typeof(int));
	        table.Columns.Add("ONE_AMERICAS_DEMO_Probes",typeof(int));
	        table.Columns.Add("ONE_APAC_DEMO",typeof(int));
	        table.Columns.Add("ONE_APAC_DEMO_Probes",typeof(int));
	        table.Columns.Add("PEPSICOBR",typeof(int));
	        table.Columns.Add("PEPSICOBR_Probes",typeof(int));
	        table.Columns.Add("PNGAU",typeof(int));
	        table.Columns.Add("PNGAU_Probes",typeof(int));
	        table.Columns.Add("PNGAU_OLD",typeof(int));
	        table.Columns.Add("PNGAU_OLD_Probes",typeof(int));
	        table.Columns.Add("PNGCAREUS",typeof(int));
	        table.Columns.Add("PNGCAREUS_Probes",typeof(int));
	        table.Columns.Add("PNGCN_PROD",typeof(int));
	        table.Columns.Add("PNGCN_PROD_Probes",typeof(int));
	        table.Columns.Add("PNGJP",typeof(int));
	        table.Columns.Add("PNGJP_Probes",typeof(int));
	        table.Columns.Add("PNGJP_OLD",typeof(int));
	        table.Columns.Add("PNGJP_OLD_Probes",typeof(int));
	        table.Columns.Add("PNGUS",typeof(int));
	        table.Columns.Add("PNGUS_Probes",typeof(int));
	        table.Columns.Add("PNGUSEPISODIC",typeof(int));
	        table.Columns.Add("PNGUSEPISODIC_Probes",typeof(int));
	        table.Columns.Add("RBUS",typeof(int));
	        table.Columns.Add("RBUS_Probes",typeof(int));
	        table.Columns.Add("RE_XSUITE_DEMO",typeof(int));
	        table.Columns.Add("RE_XSUITE_DEMO_Probes",typeof(int));
	        table.Columns.Add("REPNGCN_DEMO",typeof(int));
	        table.Columns.Add("REPNGCN_DEMO_Probes",typeof(int));
	        table.Columns.Add("RI_DEMO",typeof(int));
	        table.Columns.Add("RI_DEMO_Probes",typeof(int));
	        table.Columns.Add("RI_DIAGEOAU",typeof(int));
	        table.Columns.Add("RI_DIAGEOAU_Probes",typeof(int));
	        table.Columns.Add("RIALCBEVUK_PROD",typeof(int));
	        table.Columns.Add("RIALCBEVUK_PROD_Probes",typeof(int));
	        table.Columns.Add("RICOFFEEUS",typeof(int));
	        table.Columns.Add("RICOFFEEUS_Probes",typeof(int));
	        table.Columns.Add("RINIELSENUS",typeof(int));
	        table.Columns.Add("RINIELSENUS_Probes",typeof(int));
	        table.Columns.Add("RIPETCAREUK_PROD",typeof(int));
	        table.Columns.Add("RIPETCAREUK_PROD_Probes",typeof(int));
	        table.Columns.Add("RIUS",typeof(int));
	        table.Columns.Add("RIUS_Probes",typeof(int));
	        table.Columns.Add("RIUS_DEV",typeof(int));
	        table.Columns.Add("RIUS_DEV_Probes",typeof(int));
	        table.Columns.Add("RNBDE",typeof(int));
	        table.Columns.Add("RNBDE_Probes",typeof(int));
	        table.Columns.Add("SMARTCOOLER_POC2",typeof(int));
	        table.Columns.Add("SMARTCOOLER_POC2_Probes",typeof(int));
	        table.Columns.Add("SMARTCOOLER_TRN",typeof(int));
	        table.Columns.Add("SMARTCOOLER_TRN_Probes",typeof(int));
	        table.Columns.Add("SMARTCOOLER2_TRN",typeof(int));
	        table.Columns.Add("SMARTCOOLER2_TRN_Probes",typeof(int));
	        table.Columns.Add("SOLARBR",typeof(int));
	        table.Columns.Add("SOLARBR_Probes",typeof(int));
	        table.Columns.Add("STATIC_CAMERA_DEMO",typeof(int));
	        table.Columns.Add("STATIC_CAMERA_DEMO_Probes",typeof(int));
	        table.Columns.Add("SWIRECN",typeof(int));
	        table.Columns.Add("SWIRECN_Probes",typeof(int));
	        table.Columns.Add("SWIREREDCN",typeof(int));
	        table.Columns.Add("SWIREREDCN_Probes",typeof(int));
	        table.Columns.Add("TNUVAIL",typeof(int));
	        table.Columns.Add("TNUVAIL_Probes",typeof(int));
	        table.Columns.Add("TRAXDEMO_TS_PROD",typeof(int));
	        table.Columns.Add("TRAXDEMO_TS_PROD_Probes",typeof(int));
	        table.Columns.Add("TWEAU",typeof(int));
	        table.Columns.Add("TWEAU_Probes",typeof(int));
	        table.Columns.Add("RI_DEMO2",typeof(int));
	        table.Columns.Add("RI_DEMO2_Probes",typeof(int));
	        table.Columns.Add("COMPASSCCH_SAND",typeof(int));
	        table.Columns.Add("COMPASSCCH_SAND_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAIT_SAND",typeof(int));
	        table.Columns.Add("LAVAZZAIT_SAND_Probes",typeof(int));
	        table.Columns.Add("INBEVUS_STG",typeof(int));
	        table.Columns.Add("INBEVUS_STG_Probes",typeof(int));
	        table.Columns.Add("LAVAZZAFR_SAND",typeof(int));
	        table.Columns.Add("LAVAZZAFR_SAND_Probes",typeof(int));
	        table.Columns.Add("INBEVBE_SAND2",typeof(int));
	        table.Columns.Add("INBEVBE_SAND2_Probes",typeof(int));
	        table.Columns.Add("INBEVLU_SAND2",typeof(int));
	        table.Columns.Add("INBEVLU_SAND2_Probes",typeof(int));
	        table.Columns.Add("INBEVNL_SAND2",typeof(int));
	        table.Columns.Add("INBEVNL_SAND2_Probes",typeof(int));
	        table.Columns.Add("CreatedDate",typeof(string));
            table.Columns.Add("CreatedBy", typeof(string));
	        table.Columns.Add("B2BRU",typeof(int));
	        table.Columns.Add("BRMUS",typeof(int));
	        table.Columns.Add("CBCIL",typeof(int));
	        table.Columns.Add("CCCOOLERMX",typeof(int));
	        table.Columns.Add("DIAGEOAR",typeof(int));
	        table.Columns.Add("DIAGEOBENELUX",typeof(int));
	        table.Columns.Add("DIAGEOCH",typeof(int));
	        table.Columns.Add("DIAGEOGA",typeof(int));
	        table.Columns.Add("DIAGEOGTR",typeof(int));
	        table.Columns.Add("DIAGEONORDICS",typeof(int));
	        table.Columns.Add("DIAGEOUS",typeof(int));
	        table.Columns.Add("FERREROEXTIT",typeof(int));
	        table.Columns.Add("GOOGLEHK",typeof(int));
	        table.Columns.Add("HEINEKENPILOTCN",typeof(int));
	        table.Columns.Add("IMBO",typeof(int));
	        table.Columns.Add("INBEVCI",typeof(int));
	        table.Columns.Add("INBEVCNTT",typeof(int));
	        table.Columns.Add("INBEVCO",typeof(int));
	        table.Columns.Add("INBEVZA",typeof(int));
	        table.Columns.Add("INORU",typeof(int));
	        table.Columns.Add("JJSP",typeof(int));
	        table.Columns.Add("JNJES",typeof(int));
	        table.Columns.Add("JNJUK",typeof(int));
	        table.Columns.Add("JRIJP",typeof(int));
	        table.Columns.Add("KELLOGSUSPOC",typeof(int));
	        table.Columns.Add("KRAFTUS",typeof(int));
	        table.Columns.Add("MARS_CHOCO_RU",typeof(int));
	        table.Columns.Add("MHUK",typeof(int));
	        table.Columns.Add("MILLERCOORS",typeof(int));
	        table.Columns.Add("MOLSONONTRADEUK",typeof(int));
	        table.Columns.Add("MYCHEMISTAU",typeof(int));
	        table.Columns.Add("NESTLEROAMLERUK",typeof(int));
	        table.Columns.Add("NRF2018",typeof(int));
	        table.Columns.Add("PENAFLORAR",typeof(int));
	        table.Columns.Add("PMIUA",typeof(int));
	        table.Columns.Add("PNGAMERICA",typeof(int));
	        table.Columns.Add("PNGRO",typeof(int));
	        table.Columns.Add("RBAU",typeof(int));
	        table.Columns.Add("RBCA",typeof(int));
	        table.Columns.Add("RBDK",typeof(int));
	        table.Columns.Add("RBMANUAL",typeof(int));
	        table.Columns.Add("RINIELSENRU_MARS",typeof(int));
	        table.Columns.Add("RINIELSENUSQI",typeof(int));
	        table.Columns.Add("RIPANELCN",typeof(int));
	        table.Columns.Add("RISPARKWINEDE",typeof(int));
	        table.Columns.Add("SANOFIAE",typeof(int));
	        table.Columns.Add("SANOFIAU",typeof(int));
	        table.Columns.Add("SANOFIHK",typeof(int));
	        table.Columns.Add("SANOFIKH",typeof(int));
	        table.Columns.Add("SANOFINZ",typeof(int));
	        table.Columns.Add("SANOFIRU",typeof(int));
	        table.Columns.Add("SANOFITR",typeof(int));
	        table.Columns.Add("SANOFIUA",typeof(int));
	        table.Columns.Add("SHUFERSALIL",typeof(int));
	        table.Columns.Add("SUNTORYJP",typeof(int));
	        table.Columns.Add("TESCOTH",typeof(int));
	        table.Columns.Add("TESCOUK",typeof(int));
	        table.Columns.Add("TRAXROBOT",typeof(int));
	        table.Columns.Add("XSUITE_SHOWCASE",typeof(int));
	        table.Columns.Add("ABIUS",typeof(int));
	        table.Columns.Add("BADGERROBOT",typeof(int));
	        table.Columns.Add("CUBAU",typeof(int));
	        table.Columns.Add("DIAGEORU",typeof(int));
	        table.Columns.Add("GFKFR",typeof(int));
	        table.Columns.Add("JNJIT",typeof(int));
	        table.Columns.Add("LIGHTTRAX",typeof(int));
	        table.Columns.Add("LIGHTTRAXOFFLINE",typeof(int));
	        table.Columns.Add("RINIELSENFR",typeof(int));
	        table.Columns.Add("SANOFIKZ",typeof(int));
	        table.Columns.Add("SANOFILB",typeof(int));
	        table.Columns.Add("SANOFISA",typeof(int));
	        table.Columns.Add("SANOFIZA",typeof(int));
	        table.Columns.Add("WATSONSHK",typeof(int));
	        table.Columns.Add("KELLOGGUS",typeof(int));            
	        table.Columns.Add("ImportedDate",typeof(string));
	        table.Columns.Add("ImportedYear",typeof(string));
            table.Columns.Add("TSINGTAOBEERCN", typeof(int));

            // note : the order of the field is very important
            // and should be same as the defined in table structure.
            probes.ForEach(data => table.Rows.Add(
                                                data.ID
	                                            ,data.QAT
	                                            ,data.Center
	                                            ,data.TotalProbes
	                                            ,data.AvgsecondsperProbes
	                                            ,data.ABICA
	                                            ,data.ABICA_Probes
	                                            ,data.ABITAMSUS_PROD
	                                            ,data.ABITAMSUS_PROD_Probes
	                                            ,data.AMERICAS_DEMO
	                                            ,data.AMERICAS_DEMO_Probes
	                                            ,data.BATRU
	                                            ,data.BATRU_Probes
	                                            ,data.BIKR
	                                            ,data.BIKR_Probes
	                                            ,data.BIMY
	                                            ,data.BIMY_Probes
	                                            ,data.BIPH
	                                            ,data.BIPH_Probes
	                                            ,data.BISEASK
	                                            ,data.BISEASK_Probes
	                                            ,data.BITH
	                                            ,data.BITH_Probes
	                                            ,data.BIVN
	                                            ,data.BIVN_Probes
	                                            ,data.BPAU
	                                            ,data.BPAU_Probes
	                                            ,data.BRODMANN
	                                            ,data.BRODMANN_Probes
	                                            ,data.CARREFOURAR
	                                            ,data.CARREFOURAR_Probes
	                                            ,data.CCAAU
	                                            ,data.CCAAU_Probes
	                                            ,data.CCABIZA
	                                            ,data.CCABIZA_Probes
	                                            ,data.CCANZ
	                                            ,data.CCANZ_Probes
	                                            ,data.CCBOTTLERSUS
	                                            ,data.CCBOTTLERSUS_Probes
	                                            ,data.CCBR_PROD
	                                            ,data.CCBR_PROD_Probes
	                                            ,data.CCJP
	                                            ,data.CCJP_Probes
	                                            ,data.CCKH
	                                            ,data.CCKH_Probes
	                                            ,data.CCKR
	                                            ,data.CCKR_Probes
	                                            ,data.CCMY
	                                            ,data.CCMY_Probes
	                                            ,data.CCPH
	                                            ,data.CCPH_Probes
	                                            ,data.CCRPR_PROD
	                                            ,data.CCRPR_PROD_Probes
	                                            ,data.CCRU
	                                            ,data.CCRU_Probes
	                                            ,data.CCTH
	                                            ,data.CCTH_Probes
	                                            ,data.CCTH_UAT
	                                            ,data.CCTH_UAT_Probes
	                                            ,data.CCTRADMX
	                                            ,data.CCTRADMX_Probes
	                                            ,data.CCUS
	                                            ,data.CCUS_Probes
	                                            ,data.CCZA
	                                            ,data.CCZA_Probes
	                                            ,data.CEREBOSTH
	                                            ,data.CEREBOSTH_Probes
	                                            ,data.CROWDSOURCE
	                                            ,data.CROWDSOURCE_Probes
	                                            ,data.DIAGEOAU
	                                            ,data.DIAGEOAU_Probes
	                                            ,data.DIAGEOBR
	                                            ,data.DIAGEOBR_Probes
	                                            ,data.DIAGEOGR
	                                            ,data.DIAGEOGR_Probes
	                                            ,data.DIAGEOIE
	                                            ,data.DIAGEOIE_Probes
	                                            ,data.DIAGEOKE
	                                            ,data.DIAGEOKE_Probes
	                                            ,data.DIAGEOMX
	                                            ,data.DIAGEOMX_Probes
	                                            ,data.DIAGEOPT
	                                            ,data.DIAGEOPT_Probes
	                                            ,data.DIAGEOTW
	                                            ,data.DIAGEOTW_Probes
	                                            ,data.DIAGEOUK
	                                            ,data.DIAGEOUK_Probes
	                                            ,data.DIAGEOZA
	                                            ,data.DIAGEOZA_Probes
	                                            ,data.EMEA_DEMO
	                                            ,data.EMEA_DEMO_Probes
	                                            ,data.FERREROIT
	                                            ,data.FERREROIT_Probes
	                                            ,data.GILLETTEUS
	                                            ,data.GILLETTEUS_Probes
	                                            ,data.GOOGLEUS
	                                            ,data.GOOGLEUS_Probes
	                                            ,data.HBCDE
	                                            ,data.HBCDE_Probes
	                                            ,data.HEINEKENCN
	                                            ,data.HEINEKENCN_Probes
	                                            ,data.HEINEKENUS_PROD
	                                            ,data.HEINEKENUS_PROD_Probes
	                                            ,data.HEINZCR
	                                            ,data.HEINZCR_Probes
	                                            ,data.INBEVAR
	                                            ,data.INBEVAR_Probes
	                                            ,data.INBEVBE
	                                            ,data.INBEVBE_Probes
	                                            ,data.INBEVBE_SAND
	                                            ,data.INBEVBE_SAND_Probes
	                                            ,data.INBEVBR
	                                            ,data.INBEVBR_Probes
	                                            ,data.INBEVBR_ONTRADE
	                                            ,data.INBEVBR_ONTRADE_Probes
	                                            ,data.INBEVCL
	                                            ,data.INBEVCL_Probes
	                                            ,data.INBEVCN
	                                            ,data.INBEVCN_Probes
	                                            ,data.INBEVCOOLERAR
	                                            ,data.INBEVCOOLERAR_Probes
	                                            ,data.INBEVCOOLERBR
	                                            ,data.INBEVCOOLERBR_Probes
	                                            ,data.INBEVCOOLERUS
	                                            ,data.INBEVCOOLERUS_Probes
	                                            ,data.INBEVFR
	                                            ,data.INBEVFR_Probes
	                                            ,data.INBEVLU
	                                            ,data.INBEVLU_Probes
	                                            ,data.INBEVLU_SAND
	                                            ,data.INBEVLU_SAND_Probes
	                                            ,data.INBEVMX
	                                            ,data.INBEVMX_Probes
	                                            ,data.INBEVNL
	                                            ,data.INBEVNL_Probes
	                                            ,data.INBEVNL_SAND
	                                            ,data.INBEVNL_SAND_Probes
	                                            ,data.INBEVPY
	                                            ,data.INBEVPY_Probes
	                                            ,data.INBEVTRADMX
	                                            ,data.INBEVTRADMX_Probes
	                                            ,data.INBEVUS
	                                            ,data.INBEVUS_Probes
	                                            ,data.JTIUA
	                                            ,data.JTIUA_Probes
	                                            ,data.KCMY
	                                            ,data.KCMY_Probes
	                                            ,data.KCUS
	                                            ,data.KCUS_Probes
	                                            ,data.KEURIGCA
	                                            ,data.KEURIGCA_Probes
	                                            ,data.LABATTPLNOPTCA
	                                            ,data.LABATTPLNOPTCA_Probes
	                                            ,data.LAVAZZAAT
	                                            ,data.LAVAZZAAT_Probes
	                                            ,data.LAVAZZAAU
	                                            ,data.LAVAZZAAU_Probes
	                                            ,data.LAVAZZABE
	                                            ,data.LAVAZZABE_Probes
	                                            ,data.LAVAZZABG
	                                            ,data.LAVAZZABG_Probes
	                                            ,data.LAVAZZACA
	                                            ,data.LAVAZZACA_Probes
	                                            ,data.LAVAZZACH
	                                            ,data.LAVAZZACH_Probes
	                                            ,data.LAVAZZACL
	                                            ,data.LAVAZZACL_Probes
	                                            ,data.LAVAZZACN
	                                            ,data.LAVAZZACN_Probes
	                                            ,data.LAVAZZACZ
	                                            ,data.LAVAZZACZ_Probes
	                                            ,data.LAVAZZADE
	                                            ,data.LAVAZZADE_Probes
	                                            ,data.LAVAZZADK
	                                            ,data.LAVAZZADK_Probes
	                                            ,data.LAVAZZAEE
	                                            ,data.LAVAZZAEE_Probes
	                                            ,data.LAVAZZAES
	                                            ,data.LAVAZZAES_Probes
	                                            ,data.LAVAZZAFR
	                                            ,data.LAVAZZAFR_Probes
	                                            ,data.LAVAZZAGR
	                                            ,data.LAVAZZAGR_Probes
	                                            ,data.LAVAZZAHK
	                                            ,data.LAVAZZAHK_Probes
	                                            ,data.LAVAZZAHR
	                                            ,data.LAVAZZAHR_Probes
	                                            ,data.LAVAZZAIL
	                                            ,data.LAVAZZAIL_Probes
	                                            ,data.LAVAZZAIT
	                                            ,data.LAVAZZAIT_Probes
	                                            ,data.LAVAZZAJP
	                                            ,data.LAVAZZAJP_Probes
	                                            ,data.LAVAZZAKR
	                                            ,data.LAVAZZAKR_Probes
	                                            ,data.LAVAZZALT
	                                            ,data.LAVAZZALT_Probes
	                                            ,data.LAVAZZALU
	                                            ,data.LAVAZZALU_Probes
	                                            ,data.LAVAZZALV
	                                            ,data.LAVAZZALV_Probes
	                                            ,data.LAVAZZAMA
	                                            ,data.LAVAZZAMA_Probes
	                                            ,data.LAVAZZANL
	                                            ,data.LAVAZZANL_Probes
	                                            ,data.LAVAZZAPL
	                                            ,data.LAVAZZAPL_Probes
	                                            ,data.LAVAZZARO
	                                            ,data.LAVAZZARO_Probes
	                                            ,data.LAVAZZARU
	                                            ,data.LAVAZZARU_Probes
	                                            ,data.LAVAZZASA
	                                            ,data.LAVAZZASA_Probes
	                                            ,data.LAVAZZASE
	                                            ,data.LAVAZZASE_Probes
	                                            ,data.LAVAZZASG
	                                            ,data.LAVAZZASG_Probes
	                                            ,data.LAVAZZAUAE
	                                            ,data.LAVAZZAUAE_Probes
	                                            ,data.LAVAZZAUK
	                                            ,data.LAVAZZAUK_Probes
	                                            ,data.LAVAZZAUS
	                                            ,data.LAVAZZAUS_Probes
	                                            ,data.LAVAZZAZA
	                                            ,data.LAVAZZAZA_Probes
	                                            ,data.LRSUK
	                                            ,data.LRSUK_Probes
	                                            ,data.MARSBR
	                                            ,data.MARSBR_Probes
	                                            ,data.MARSIN
	                                            ,data.MARSIN_Probes
	                                            ,data.MARSIN_OLD
	                                            ,data.MARSIN_OLD_Probes
	                                            ,data.MARSRU_PROD
	                                            ,data.MARSRU_PROD_Probes
	                                            ,data.MAYORAID
	                                            ,data.MAYORAID_Probes
	                                            ,data.MJNCN
	                                            ,data.MJNCN_Probes
	                                            ,data.MOLSONCOOLERHN
	                                            ,data.MOLSONCOOLERHN_Probes
	                                            ,data.MOLSONCOOLERHR
	                                            ,data.MOLSONCOOLERHR_Probes
	                                            ,data.MOLSONCOORSUK
	                                            ,data.MOLSONCOORSUK_Probes
	                                            ,data.NESTLEUK
	                                            ,data.NESTLEUK_Probes
	                                            ,data.NIVEAUK
	                                            ,data.NIVEAUK_Probes
	                                            ,data.NRF2017_DEMO
	                                            ,data.NRF2017_DEMO_Probes
	                                            ,data.ONE_AMERICAS_DEMO
	                                            ,data.ONE_AMERICAS_DEMO_Probes
	                                            ,data.ONE_APAC_DEMO
	                                            ,data.ONE_APAC_DEMO_Probes
	                                            ,data.PEPSICOBR
	                                            ,data.PEPSICOBR_Probes
	                                            ,data.PNGAU
	                                            ,data.PNGAU_Probes
	                                            ,data.PNGAU_OLD
	                                            ,data.PNGAU_OLD_Probes
	                                            ,data.PNGCAREUS
	                                            ,data.PNGCAREUS_Probes
	                                            ,data.PNGCN_PROD
	                                            ,data.PNGCN_PROD_Probes
	                                            ,data.PNGJP
	                                            ,data.PNGJP_Probes
	                                            ,data.PNGJP_OLD
	                                            ,data.PNGJP_OLD_Probes
	                                            ,data.PNGUS
	                                            ,data.PNGUS_Probes
	                                            ,data.PNGUSEPISODIC
	                                            ,data.PNGUSEPISODIC_Probes
	                                            ,data.RBUS
	                                            ,data.RBUS_Probes
	                                            ,data.RE_XSUITE_DEMO
	                                            ,data.RE_XSUITE_DEMO_Probes
	                                            ,data.REPNGCN_DEMO
	                                            ,data.REPNGCN_DEMO_Probes
	                                            ,data.RI_DEMO
	                                            ,data.RI_DEMO_Probes
	                                            ,data.RI_DIAGEOAU
	                                            ,data.RI_DIAGEOAU_Probes
	                                            ,data.RIALCBEVUK_PROD
	                                            ,data.RIALCBEVUK_PROD_Probes
	                                            ,data.RICOFFEEUS
	                                            ,data.RICOFFEEUS_Probes
	                                            ,data.RINIELSENUS
	                                            ,data.RINIELSENUS_Probes
	                                            ,data.RIPETCAREUK_PROD
	                                            ,data.RIPETCAREUK_PROD_Probes
	                                            ,data.RIUS
	                                            ,data.RIUS_Probes
	                                            ,data.RIUS_DEV
	                                            ,data.RIUS_DEV_Probes
	                                            ,data.RNBDE
	                                            ,data.RNBDE_Probes
	                                            ,data.SMARTCOOLER_POC2
	                                            ,data.SMARTCOOLER_POC2_Probes
	                                            ,data.SMARTCOOLER_TRN
	                                            ,data.SMARTCOOLER_TRN_Probes
	                                            ,data.SMARTCOOLER2_TRN
	                                            ,data.SMARTCOOLER2_TRN_Probes
	                                            ,data.SOLARBR
	                                            ,data.SOLARBR_Probes
	                                            ,data.STATIC_CAMERA_DEMO
	                                            ,data.STATIC_CAMERA_DEMO_Probes
	                                            ,data.SWIRECN
	                                            ,data.SWIRECN_Probes
	                                            ,data.SWIREREDCN
	                                            ,data.SWIREREDCN_Probes
	                                            ,data.TNUVAIL
	                                            ,data.TNUVAIL_Probes
	                                            ,data.TRAXDEMO_TS_PROD
	                                            ,data.TRAXDEMO_TS_PROD_Probes
	                                            ,data.TWEAU
	                                            ,data.TWEAU_Probes
	                                            ,data.RI_DEMO2
	                                            ,data.RI_DEMO2_Probes
	                                            ,data.COMPASSCCH_SAND
	                                            ,data.COMPASSCCH_SAND_Probes
	                                            ,data.LAVAZZAIT_SAND
	                                            ,data.LAVAZZAIT_SAND_Probes
	                                            ,data.INBEVUS_STG
	                                            ,data.INBEVUS_STG_Probes
	                                            ,data.LAVAZZAFR_SAND
	                                            ,data.LAVAZZAFR_SAND_Probes
	                                            ,data.INBEVBE_SAND2
	                                            ,data.INBEVBE_SAND2_Probes
	                                            ,data.INBEVLU_SAND2
	                                            ,data.INBEVLU_SAND2_Probes
	                                            ,data.INBEVNL_SAND2
	                                            ,data.INBEVNL_SAND2_Probes
	                                            ,data.CreatedDate
	                                            ,data.CreatedBy
	                                            ,data.B2BRU
	                                            ,data.BRMUS
	                                            ,data.CBCIL
	                                            ,data.CCCOOLERMX
	                                            ,data.DIAGEOAR
	                                            ,data.DIAGEOBENELUX
	                                            ,data.DIAGEOCH
	                                            ,data.DIAGEOGA
	                                            ,data.DIAGEOGTR
	                                            ,data.DIAGEONORDICS
	                                            ,data.DIAGEOUS
	                                            ,data.FERREROEXTIT
	                                            ,data.GOOGLEHK
	                                            ,data.HEINEKENPILOTCN
	                                            ,data.IMBO
	                                            ,data.INBEVCI
	                                            ,data.INBEVCNTT
	                                            ,data.INBEVCO
	                                            ,data.INBEVZA
	                                            ,data.INORU
	                                            ,data.JJSP
	                                            ,data.JNJES
	                                            ,data.JNJUK
	                                            ,data.JRIJP
	                                            ,data.KELLOGSUSPOC
	                                            ,data.KRAFTUS
	                                            ,data.MARS_CHOCO_RU
	                                            ,data.MHUK
	                                            ,data.MILLERCOORS
	                                            ,data.MOLSONONTRADEUK
	                                            ,data.MYCHEMISTAU
	                                            ,data.NESTLEROAMLERUK
	                                            ,data.NRF2018
	                                            ,data.PENAFLORAR
	                                            ,data.PMIUA
	                                            ,data.PNGAMERICA
	                                            ,data.PNGRO
	                                            ,data.RBAU
	                                            ,data.RBCA
	                                            ,data.RBDK
	                                            ,data.RBMANUAL
	                                            ,data.RINIELSENRU_MARS
	                                            ,data.RINIELSENUSQI
	                                            ,data.RIPANELCN
	                                            ,data.RISPARKWINEDE
	                                            ,data.SANOFIAE
	                                            ,data.SANOFIAU
	                                            ,data.SANOFIHK
	                                            ,data.SANOFIKH
	                                            ,data.SANOFINZ
	                                            ,data.SANOFIRU
	                                            ,data.SANOFITR
	                                            ,data.SANOFIUA
	                                            ,data.SHUFERSALIL
	                                            ,data.SUNTORYJP
	                                            ,data.TESCOTH
	                                            ,data.TESCOUK
	                                            ,data.TRAXROBOT
	                                            ,data.XSUITE_SHOWCASE
	                                            ,data.ABIUS
	                                            ,data.BADGERROBOT
	                                            ,data.CUBAU
	                                            ,data.DIAGEORU
	                                            ,data.GFKFR
	                                            ,data.JNJIT
	                                            ,data.LIGHTTRAX
	                                            ,data.LIGHTTRAXOFFLINE
	                                            ,data.RINIELSENFR
	                                            ,data.SANOFIKZ
	                                            ,data.SANOFILB
	                                            ,data.SANOFISA
	                                            ,data.SANOFIZA
	                                            ,data.WATSONSHK
	                                            ,data.KELLOGGUS                                                
	                                            ,data.ImportedDate
	                                            ,data.ImportedYear
                                                , data.TSINGTAOBEERCN
                                                ));
            return table;
        }




        public int BulkInsertIntoPricingProbes(List<PricingProbesEntity> pricingProbes)
        {
            using (var scope = new TransactionScope())
            {
                string connectionString = ConfigurationManager.ConnectionStrings["Client"].ConnectionString;
                var sqlConnection = new SqlConnection(connectionString);
                var sqlBulkCopy = new SqlBulkCopy(sqlConnection)
                {
                    DestinationTableName = "PricingProbes",
                    //BulkCopyTimeout = 6000
                };
                var dataTable = GetDataTableForPricingProbes(pricingProbes);
                sqlConnection.Open();

                sqlBulkCopy.WriteToServer(dataTable);

                scope.Complete();
                sqlBulkCopy.Close();
                sqlConnection.Close();
                sqlConnection.Dispose();
            }
            return pricingProbes.Count;
        }


        private DataTable GetDataTableForPricingProbes(List<PricingProbesEntity> pricingProbes)
        {
            var table = new DataTable();
            table.Columns.Add("ID", typeof(string));
            table.Columns.Add("QAT", typeof(string));
            table.Columns.Add("Center", typeof(string));
            table.Columns.Add("TotalPricingProbes", typeof(int));
            table.Columns.Add("AvgsecondsperPricingProbes", typeof(int));
            table.Columns.Add("ABICA", typeof(int));
            table.Columns.Add("ABICA_PricingProbes", typeof(int));
            table.Columns.Add("ABITAMSUS_PROD", typeof(int));
            table.Columns.Add("ABITAMSUS_PROD_PricingProbes", typeof(int));
            table.Columns.Add("AMERICAS_DEMO", typeof(int));
            table.Columns.Add("AMERICAS_DEMO_PricingProbes", typeof(int));
            table.Columns.Add("BATRU", typeof(int));
            table.Columns.Add("BATRU_PricingProbes", typeof(int));
            table.Columns.Add("BIKR", typeof(int));
            table.Columns.Add("BIKR_PricingProbes", typeof(int));
            table.Columns.Add("BIMY", typeof(int));
            table.Columns.Add("BIMY_PricingProbes", typeof(int));
            table.Columns.Add("BIPH", typeof(int));
            table.Columns.Add("BIPH_PricingProbes", typeof(int));
            table.Columns.Add("BISEASK", typeof(int));
            table.Columns.Add("BISEASK_PricingProbes", typeof(int));
            table.Columns.Add("BITH", typeof(int));
            table.Columns.Add("BITH_PricingProbes", typeof(int));
            table.Columns.Add("BIVN", typeof(int));
            table.Columns.Add("BIVN_PricingProbes", typeof(int));
            table.Columns.Add("BPAU", typeof(int));
            table.Columns.Add("BPAU_PricingProbes", typeof(int));
            table.Columns.Add("BRODMANN", typeof(int));
            table.Columns.Add("BRODMANN_PricingProbes", typeof(int));
            table.Columns.Add("CARREFOURAR", typeof(int));
            table.Columns.Add("CARREFOURAR_PricingProbes", typeof(int));
            table.Columns.Add("CCAAU", typeof(int));
            table.Columns.Add("CCAAU_PricingProbes", typeof(int));
            table.Columns.Add("CCABIZA", typeof(int));
            table.Columns.Add("CCABIZA_PricingProbes", typeof(int));
            table.Columns.Add("CCANZ", typeof(int));
            table.Columns.Add("CCANZ_PricingProbes", typeof(int));
            table.Columns.Add("CCBOTTLERSUS", typeof(int));
            table.Columns.Add("CCBOTTLERSUS_PricingProbes", typeof(int));
            table.Columns.Add("CCBR_PROD", typeof(int));
            table.Columns.Add("CCBR_PROD_PricingProbes", typeof(int));
            table.Columns.Add("CCJP", typeof(int));
            table.Columns.Add("CCJP_PricingProbes", typeof(int));
            table.Columns.Add("CCKH", typeof(int));
            table.Columns.Add("CCKH_PricingProbes", typeof(int));
            table.Columns.Add("CCKR", typeof(int));
            table.Columns.Add("CCKR_PricingProbes", typeof(int));
            table.Columns.Add("CCMY", typeof(int));
            table.Columns.Add("CCMY_PricingProbes", typeof(int));
            table.Columns.Add("CCPH", typeof(int));
            table.Columns.Add("CCPH_PricingProbes", typeof(int));
            table.Columns.Add("CCRPR_PROD", typeof(int));
            table.Columns.Add("CCRPR_PROD_PricingProbes", typeof(int));
            table.Columns.Add("CCRU", typeof(int));
            table.Columns.Add("CCRU_PricingProbes", typeof(int));
            table.Columns.Add("CCTH", typeof(int));
            table.Columns.Add("CCTH_PricingProbes", typeof(int));
            table.Columns.Add("CCTH_UAT", typeof(int));
            table.Columns.Add("CCTH_UAT_PricingProbes", typeof(int));
            table.Columns.Add("CCTRADMX", typeof(int));
            table.Columns.Add("CCTRADMX_PricingProbes", typeof(int));
            table.Columns.Add("CCUS", typeof(int));
            table.Columns.Add("CCUS_PricingProbes", typeof(int));
            table.Columns.Add("CCZA", typeof(int));
            table.Columns.Add("CCZA_PricingProbes", typeof(int));
            table.Columns.Add("CEREBOSTH", typeof(int));
            table.Columns.Add("CEREBOSTH_PricingProbes", typeof(int));
            table.Columns.Add("CROWDSOURCE", typeof(int));
            table.Columns.Add("CROWDSOURCE_PricingProbes", typeof(int));
            table.Columns.Add("DIAGEOAU", typeof(int));
            table.Columns.Add("DIAGEOAU_PricingProbes", typeof(int));
            table.Columns.Add("DIAGEOBR", typeof(int));
            table.Columns.Add("DIAGEOBR_PricingProbes", typeof(int));
            table.Columns.Add("DIAGEOGR", typeof(int));
            table.Columns.Add("DIAGEOGR_PricingProbes", typeof(int));
            table.Columns.Add("DIAGEOIE", typeof(int));
            table.Columns.Add("DIAGEOIE_PricingProbes", typeof(int));
            table.Columns.Add("DIAGEOKE", typeof(int));
            table.Columns.Add("DIAGEOKE_PricingProbes", typeof(int));
            table.Columns.Add("DIAGEOMX", typeof(int));
            table.Columns.Add("DIAGEOMX_PricingProbes", typeof(int));
            table.Columns.Add("DIAGEOPT", typeof(int));
            table.Columns.Add("DIAGEOPT_PricingProbes", typeof(int));
            table.Columns.Add("DIAGEOTW", typeof(int));
            table.Columns.Add("DIAGEOTW_PricingProbes", typeof(int));
            table.Columns.Add("DIAGEOUK", typeof(int));
            table.Columns.Add("DIAGEOUK_PricingProbes", typeof(int));
            table.Columns.Add("DIAGEOZA", typeof(int));
            table.Columns.Add("DIAGEOZA_PricingProbes", typeof(int));
            table.Columns.Add("EMEA_DEMO", typeof(int));
            table.Columns.Add("EMEA_DEMO_PricingProbes", typeof(int));
            table.Columns.Add("FERREROIT", typeof(int));
            table.Columns.Add("FERREROIT_PricingProbes", typeof(int));
            table.Columns.Add("GILLETTEUS", typeof(int));
            table.Columns.Add("GILLETTEUS_PricingProbes", typeof(int));
            table.Columns.Add("GOOGLEUS", typeof(int));
            table.Columns.Add("GOOGLEUS_PricingProbes", typeof(int));
            table.Columns.Add("HBCDE", typeof(int));
            table.Columns.Add("HBCDE_PricingProbes", typeof(int));
            table.Columns.Add("HEINEKENCN", typeof(int));
            table.Columns.Add("HEINEKENCN_PricingProbes", typeof(int));
            table.Columns.Add("HEINEKENUS_PROD", typeof(int));
            table.Columns.Add("HEINEKENUS_PROD_PricingProbes", typeof(int));
            table.Columns.Add("HEINZCR", typeof(int));
            table.Columns.Add("HEINZCR_PricingProbes", typeof(int));
            table.Columns.Add("INBEVAR", typeof(int));
            table.Columns.Add("INBEVAR_PricingProbes", typeof(int));
            table.Columns.Add("INBEVBE", typeof(int));
            table.Columns.Add("INBEVBE_PricingProbes", typeof(int));
            table.Columns.Add("INBEVBE_SAND", typeof(int));
            table.Columns.Add("INBEVBE_SAND_PricingProbes", typeof(int));
            table.Columns.Add("INBEVBR", typeof(int));
            table.Columns.Add("INBEVBR_PricingProbes", typeof(int));
            table.Columns.Add("INBEVBR_ONTRADE", typeof(int));
            table.Columns.Add("INBEVBR_ONTRADE_PricingProbes", typeof(int));
            table.Columns.Add("INBEVCL", typeof(int));
            table.Columns.Add("INBEVCL_PricingProbes", typeof(int));
            table.Columns.Add("INBEVCN", typeof(int));
            table.Columns.Add("INBEVCN_PricingProbes", typeof(int));
            table.Columns.Add("INBEVCOOLERAR", typeof(int));
            table.Columns.Add("INBEVCOOLERAR_PricingProbes", typeof(int));
            table.Columns.Add("INBEVCOOLERBR", typeof(int));
            table.Columns.Add("INBEVCOOLERBR_PricingProbes", typeof(int));
            table.Columns.Add("INBEVCOOLERUS", typeof(int));
            table.Columns.Add("INBEVCOOLERUS_PricingProbes", typeof(int));
            table.Columns.Add("INBEVFR", typeof(int));
            table.Columns.Add("INBEVFR_PricingProbes", typeof(int));
            table.Columns.Add("INBEVLU", typeof(int));
            table.Columns.Add("INBEVLU_PricingProbes", typeof(int));
            table.Columns.Add("INBEVLU_SAND", typeof(int));
            table.Columns.Add("INBEVLU_SAND_PricingProbes", typeof(int));
            table.Columns.Add("INBEVMX", typeof(int));
            table.Columns.Add("INBEVMX_PricingProbes", typeof(int));
            table.Columns.Add("INBEVNL", typeof(int));
            table.Columns.Add("INBEVNL_PricingProbes", typeof(int));
            table.Columns.Add("INBEVNL_SAND", typeof(int));
            table.Columns.Add("INBEVNL_SAND_PricingProbes", typeof(int));
            table.Columns.Add("INBEVPY", typeof(int));
            table.Columns.Add("INBEVPY_PricingProbes", typeof(int));
            table.Columns.Add("INBEVTRADMX", typeof(int));
            table.Columns.Add("INBEVTRADMX_PricingProbes", typeof(int));
            table.Columns.Add("INBEVUS", typeof(int));
            table.Columns.Add("INBEVUS_PricingProbes", typeof(int));
            table.Columns.Add("JTIUA", typeof(int));
            table.Columns.Add("JTIUA_PricingProbes", typeof(int));
            table.Columns.Add("KCMY", typeof(int));
            table.Columns.Add("KCMY_PricingProbes", typeof(int));
            table.Columns.Add("KCUS", typeof(int));
            table.Columns.Add("KCUS_PricingProbes", typeof(int));
            table.Columns.Add("KEURIGCA", typeof(int));
            table.Columns.Add("KEURIGCA_PricingProbes", typeof(int));
            table.Columns.Add("LABATTPLNOPTCA", typeof(int));
            table.Columns.Add("LABATTPLNOPTCA_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAAT", typeof(int));
            table.Columns.Add("LAVAZZAAT_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAAU", typeof(int));
            table.Columns.Add("LAVAZZAAU_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZABE", typeof(int));
            table.Columns.Add("LAVAZZABE_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZABG", typeof(int));
            table.Columns.Add("LAVAZZABG_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZACA", typeof(int));
            table.Columns.Add("LAVAZZACA_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZACH", typeof(int));
            table.Columns.Add("LAVAZZACH_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZACL", typeof(int));
            table.Columns.Add("LAVAZZACL_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZACN", typeof(int));
            table.Columns.Add("LAVAZZACN_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZACZ", typeof(int));
            table.Columns.Add("LAVAZZACZ_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZADE", typeof(int));
            table.Columns.Add("LAVAZZADE_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZADK", typeof(int));
            table.Columns.Add("LAVAZZADK_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAEE", typeof(int));
            table.Columns.Add("LAVAZZAEE_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAES", typeof(int));
            table.Columns.Add("LAVAZZAES_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAFR", typeof(int));
            table.Columns.Add("LAVAZZAFR_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAGR", typeof(int));
            table.Columns.Add("LAVAZZAGR_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAHK", typeof(int));
            table.Columns.Add("LAVAZZAHK_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAHR", typeof(int));
            table.Columns.Add("LAVAZZAHR_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAIL", typeof(int));
            table.Columns.Add("LAVAZZAIL_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAIT", typeof(int));
            table.Columns.Add("LAVAZZAIT_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAJP", typeof(int));
            table.Columns.Add("LAVAZZAJP_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAKR", typeof(int));
            table.Columns.Add("LAVAZZAKR_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZALT", typeof(int));
            table.Columns.Add("LAVAZZALT_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZALU", typeof(int));
            table.Columns.Add("LAVAZZALU_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZALV", typeof(int));
            table.Columns.Add("LAVAZZALV_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAMA", typeof(int));
            table.Columns.Add("LAVAZZAMA_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZANL", typeof(int));
            table.Columns.Add("LAVAZZANL_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAPL", typeof(int));
            table.Columns.Add("LAVAZZAPL_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZARO", typeof(int));
            table.Columns.Add("LAVAZZARO_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZARU", typeof(int));
            table.Columns.Add("LAVAZZARU_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZASA", typeof(int));
            table.Columns.Add("LAVAZZASA_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZASE", typeof(int));
            table.Columns.Add("LAVAZZASE_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZASG", typeof(int));
            table.Columns.Add("LAVAZZASG_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAUAE", typeof(int));
            table.Columns.Add("LAVAZZAUAE_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAUK", typeof(int));
            table.Columns.Add("LAVAZZAUK_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAUS", typeof(int));
            table.Columns.Add("LAVAZZAUS_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAZA", typeof(int));
            table.Columns.Add("LAVAZZAZA_PricingProbes", typeof(int));
            table.Columns.Add("LRSUK", typeof(int));
            table.Columns.Add("LRSUK_PricingProbes", typeof(int));
            table.Columns.Add("MARSBR", typeof(int));
            table.Columns.Add("MARSBR_PricingProbes", typeof(int));
            table.Columns.Add("MARSIN", typeof(int));
            table.Columns.Add("MARSIN_PricingProbes", typeof(int));
            table.Columns.Add("MARSIN_OLD", typeof(int));
            table.Columns.Add("MARSIN_OLD_PricingProbes", typeof(int));
            table.Columns.Add("MARSRU_PROD", typeof(int));
            table.Columns.Add("MARSRU_PROD_PricingProbes", typeof(int));
            table.Columns.Add("MAYORAID", typeof(int));
            table.Columns.Add("MAYORAID_PricingProbes", typeof(int));
            table.Columns.Add("MJNCN", typeof(int));
            table.Columns.Add("MJNCN_PricingProbes", typeof(int));
            table.Columns.Add("MOLSONCOOLERHN", typeof(int));
            table.Columns.Add("MOLSONCOOLERHN_PricingProbes", typeof(int));
            table.Columns.Add("MOLSONCOOLERHR", typeof(int));
            table.Columns.Add("MOLSONCOOLERHR_PricingProbes", typeof(int));
            table.Columns.Add("MOLSONCOORSUK", typeof(int));
            table.Columns.Add("MOLSONCOORSUK_PricingProbes", typeof(int));
            table.Columns.Add("NESTLEUK", typeof(int));
            table.Columns.Add("NESTLEUK_PricingProbes", typeof(int));
            table.Columns.Add("NIVEAUK", typeof(int));
            table.Columns.Add("NIVEAUK_PricingProbes", typeof(int));
            table.Columns.Add("NRF2017_DEMO", typeof(int));
            table.Columns.Add("NRF2017_DEMO_PricingProbes", typeof(int));
            table.Columns.Add("ONE_AMERICAS_DEMO", typeof(int));
            table.Columns.Add("ONE_AMERICAS_DEMO_PricingProbes", typeof(int));
            table.Columns.Add("ONE_APAC_DEMO", typeof(int));
            table.Columns.Add("ONE_APAC_DEMO_PricingProbes", typeof(int));
            table.Columns.Add("PEPSICOBR", typeof(int));
            table.Columns.Add("PEPSICOBR_PricingProbes", typeof(int));
            table.Columns.Add("PNGAU", typeof(int));
            table.Columns.Add("PNGAU_PricingProbes", typeof(int));
            table.Columns.Add("PNGAU_OLD", typeof(int));
            table.Columns.Add("PNGAU_OLD_PricingProbes", typeof(int));
            table.Columns.Add("PNGCAREUS", typeof(int));
            table.Columns.Add("PNGCAREUS_PricingProbes", typeof(int));
            table.Columns.Add("PNGCN_PROD", typeof(int));
            table.Columns.Add("PNGCN_PROD_PricingProbes", typeof(int));
            table.Columns.Add("PNGJP", typeof(int));
            table.Columns.Add("PNGJP_PricingProbes", typeof(int));
            table.Columns.Add("PNGJP_OLD", typeof(int));
            table.Columns.Add("PNGJP_OLD_PricingProbes", typeof(int));
            table.Columns.Add("PNGUS", typeof(int));
            table.Columns.Add("PNGUS_PricingProbes", typeof(int));
            table.Columns.Add("PNGUSEPISODIC", typeof(int));
            table.Columns.Add("PNGUSEPISODIC_PricingProbes", typeof(int));
            table.Columns.Add("RBUS", typeof(int));
            table.Columns.Add("RBUS_PricingProbes", typeof(int));
            table.Columns.Add("RE_XSUITE_DEMO", typeof(int));
            table.Columns.Add("RE_XSUITE_DEMO_PricingProbes", typeof(int));
            table.Columns.Add("REPNGCN_DEMO", typeof(int));
            table.Columns.Add("REPNGCN_DEMO_PricingProbes", typeof(int));
            table.Columns.Add("RI_DEMO", typeof(int));
            table.Columns.Add("RI_DEMO_PricingProbes", typeof(int));
            table.Columns.Add("RI_DIAGEOAU", typeof(int));
            table.Columns.Add("RI_DIAGEOAU_PricingProbes", typeof(int));
            table.Columns.Add("RIALCBEVUK_PROD", typeof(int));
            table.Columns.Add("RIALCBEVUK_PROD_PricingProbes", typeof(int));
            table.Columns.Add("RICOFFEEUS", typeof(int));
            table.Columns.Add("RICOFFEEUS_PricingProbes", typeof(int));
            table.Columns.Add("RINIELSENUS", typeof(int));
            table.Columns.Add("RINIELSENUS_PricingProbes", typeof(int));
            table.Columns.Add("RIPETCAREUK_PROD", typeof(int));
            table.Columns.Add("RIPETCAREUK_PROD_PricingProbes", typeof(int));
            table.Columns.Add("RIUS", typeof(int));
            table.Columns.Add("RIUS_PricingProbes", typeof(int));
            table.Columns.Add("RIUS_DEV", typeof(int));
            table.Columns.Add("RIUS_DEV_PricingProbes", typeof(int));
            table.Columns.Add("RNBDE", typeof(int));
            table.Columns.Add("RNBDE_PricingProbes", typeof(int));
            table.Columns.Add("SMARTCOOLER_POC2", typeof(int));
            table.Columns.Add("SMARTCOOLER_POC2_PricingProbes", typeof(int));
            table.Columns.Add("SMARTCOOLER_TRN", typeof(int));
            table.Columns.Add("SMARTCOOLER_TRN_PricingProbes", typeof(int));
            table.Columns.Add("SMARTCOOLER2_TRN", typeof(int));
            table.Columns.Add("SMARTCOOLER2_TRN_PricingProbes", typeof(int));
            table.Columns.Add("SOLARBR", typeof(int));
            table.Columns.Add("SOLARBR_PricingProbes", typeof(int));
            table.Columns.Add("STATIC_CAMERA_DEMO", typeof(int));
            table.Columns.Add("STATIC_CAMERA_DEMO_PricingProbes", typeof(int));
            table.Columns.Add("SWIRECN", typeof(int));
            table.Columns.Add("SWIRECN_PricingProbes", typeof(int));
            table.Columns.Add("SWIREREDCN", typeof(int));
            table.Columns.Add("SWIREREDCN_PricingProbes", typeof(int));
            table.Columns.Add("TNUVAIL", typeof(int));
            table.Columns.Add("TNUVAIL_PricingProbes", typeof(int));
            table.Columns.Add("TRAXDEMO_TS_PROD", typeof(int));
            table.Columns.Add("TRAXDEMO_TS_PROD_PricingProbes", typeof(int));
            table.Columns.Add("TWEAU", typeof(int));
            table.Columns.Add("TWEAU_PricingProbes", typeof(int));
            table.Columns.Add("RI_DEMO2", typeof(int));
            table.Columns.Add("RI_DEMO2_PricingProbes", typeof(int));
            table.Columns.Add("COMPASSCCH_SAND", typeof(int));
            table.Columns.Add("COMPASSCCH_SAND_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAIT_SAND", typeof(int));
            table.Columns.Add("LAVAZZAIT_SAND_PricingProbes", typeof(int));
            table.Columns.Add("INBEVUS_STG", typeof(int));
            table.Columns.Add("INBEVUS_STG_PricingProbes", typeof(int));
            table.Columns.Add("LAVAZZAFR_SAND", typeof(int));
            table.Columns.Add("LAVAZZAFR_SAND_PricingProbes", typeof(int));
            table.Columns.Add("INBEVBE_SAND2", typeof(int));
            table.Columns.Add("INBEVBE_SAND2_PricingProbes", typeof(int));
            table.Columns.Add("INBEVLU_SAND2", typeof(int));
            table.Columns.Add("INBEVLU_SAND2_PricingProbes", typeof(int));
            table.Columns.Add("INBEVNL_SAND2", typeof(int));
            table.Columns.Add("INBEVNL_SAND2_PricingProbes", typeof(int));
            table.Columns.Add("CreatedDate", typeof(string));
            table.Columns.Add("CreatedBy", typeof(string));

            table.Columns.Add("ImportedDate", typeof(string));
            table.Columns.Add("ImportedYear", typeof(string));
            table.Columns.Add("B2BRU", typeof(int));
            table.Columns.Add("BRMUS", typeof(int));
            table.Columns.Add("CBCIL", typeof(int));
            table.Columns.Add("CCCOOLERMX", typeof(int));
            table.Columns.Add("DIAGEOAR", typeof(int));
            table.Columns.Add("DIAGEOBENELUX", typeof(int));
            table.Columns.Add("DIAGEOCH", typeof(int));
            table.Columns.Add("DIAGEOGA", typeof(int));
            table.Columns.Add("DIAGEOGTR", typeof(int));
            table.Columns.Add("DIAGEONORDICS", typeof(int));
            table.Columns.Add("DIAGEOUS", typeof(int));
            table.Columns.Add("FERREROEXTIT", typeof(int));
            table.Columns.Add("GOOGLEHK", typeof(int));
            table.Columns.Add("HEINEKENPILOTCN", typeof(int));
            table.Columns.Add("IMBO", typeof(int));
            table.Columns.Add("INBEVCI", typeof(int));
            table.Columns.Add("INBEVCNTT", typeof(int));
            table.Columns.Add("INBEVCO", typeof(int));
            table.Columns.Add("INBEVZA", typeof(int));
            table.Columns.Add("INORU", typeof(int));
            table.Columns.Add("JJSP", typeof(int));
            table.Columns.Add("JNJES", typeof(int));
            table.Columns.Add("JNJUK", typeof(int));
            table.Columns.Add("JRIJP", typeof(int));
            table.Columns.Add("KELLOGSUSPOC", typeof(int));
            table.Columns.Add("KRAFTUS", typeof(int));
            table.Columns.Add("MARS_CHOCO_RU", typeof(int));
            table.Columns.Add("MHUK", typeof(int));
            table.Columns.Add("MILLERCOORS", typeof(int));
            table.Columns.Add("MOLSONONTRADEUK", typeof(int));
            table.Columns.Add("MYCHEMISTAU", typeof(int));
            table.Columns.Add("NESTLEROAMLERUK", typeof(int));
            table.Columns.Add("NRF2018", typeof(int));
            table.Columns.Add("PENAFLORAR", typeof(int));
            table.Columns.Add("PMIUA", typeof(int));
            table.Columns.Add("PNGAMERICA", typeof(int));
            table.Columns.Add("PNGRO", typeof(int));
            table.Columns.Add("RBAU", typeof(int));
            table.Columns.Add("RBCA", typeof(int));
            table.Columns.Add("RBDK", typeof(int));
            table.Columns.Add("RBMANUAL", typeof(int));
            table.Columns.Add("RINIELSENRU_MARS", typeof(int));
            table.Columns.Add("RINIELSENUSQI", typeof(int));
            table.Columns.Add("RIPANELCN", typeof(int));
            table.Columns.Add("RISPARKWINEDE", typeof(int));
            table.Columns.Add("SANOFIAE", typeof(int));
            table.Columns.Add("SANOFIAU", typeof(int));
            table.Columns.Add("SANOFIHK", typeof(int));
            table.Columns.Add("SANOFIKH", typeof(int));
            table.Columns.Add("SANOFINZ", typeof(int));
            table.Columns.Add("SANOFIRU", typeof(int));
            table.Columns.Add("SANOFITR", typeof(int));
            table.Columns.Add("SANOFIUA", typeof(int));
            table.Columns.Add("SHUFERSALIL", typeof(int));
            table.Columns.Add("SUNTORYJP", typeof(int));
            table.Columns.Add("TESCOTH", typeof(int));
            table.Columns.Add("TESCOUK", typeof(int));
            table.Columns.Add("TRAXROBOT", typeof(int));
            table.Columns.Add("XSUITE_SHOWCASE", typeof(int));
            table.Columns.Add("ABIUS", typeof(int));
            table.Columns.Add("BADGERROBOT", typeof(int));
            table.Columns.Add("CUBAU", typeof(int));
            table.Columns.Add("DIAGEORU", typeof(int));
            table.Columns.Add("GFKFR", typeof(int));
            table.Columns.Add("JNJIT", typeof(int));
            table.Columns.Add("LIGHTTRAX", typeof(int));
            table.Columns.Add("LIGHTTRAXOFFLINE", typeof(int));
            table.Columns.Add("RINIELSENFR", typeof(int));
            table.Columns.Add("SANOFIKZ", typeof(int));
            table.Columns.Add("SANOFILB", typeof(int));
            table.Columns.Add("SANOFISA", typeof(int));
            table.Columns.Add("SANOFIZA", typeof(int));
            table.Columns.Add("WATSONSHK", typeof(int));
            table.Columns.Add("KELLOGGUS", typeof(int));
            table.Columns.Add("TSINGTAOBEERCN", typeof(int));

            // note : the order of the field is very important
            // and should be same as the defined in table structure.
            pricingProbes.ForEach(data => table.Rows.Add(
                                                  data.ID
                                                , data.QAT
                                                , data.Center
                                                , data.TotalPricingProbes
                                                , data.AvgsecondsperPricingProbes
                                                , data.ABICA
                                                , data.ABICA_PricingProbes
                                                , data.ABITAMSUS_PROD
                                                , data.ABITAMSUS_PROD_PricingProbes
                                                , data.AMERICAS_DEMO
                                                , data.AMERICAS_DEMO_PricingProbes
                                                , data.BATRU
                                                , data.BATRU_PricingProbes
                                                , data.BIKR
                                                , data.BIKR_PricingProbes
                                                , data.BIMY
                                                , data.BIMY_PricingProbes
                                                , data.BIPH
                                                , data.BIPH_PricingProbes
                                                , data.BISEASK
                                                , data.BISEASK_PricingProbes
                                                , data.BITH
                                                , data.BITH_PricingProbes
                                                , data.BIVN
                                                , data.BIVN_PricingProbes
                                                , data.BPAU
                                                , data.BPAU_PricingProbes
                                                , data.BRODMANN
                                                , data.BRODMANN_PricingProbes
                                                , data.CARREFOURAR
                                                , data.CARREFOURAR_PricingProbes
                                                , data.CCAAU
                                                , data.CCAAU_PricingProbes
                                                , data.CCABIZA
                                                , data.CCABIZA_PricingProbes
                                                , data.CCANZ
                                                , data.CCANZ_PricingProbes
                                                , data.CCBOTTLERSUS
                                                , data.CCBOTTLERSUS_PricingProbes
                                                , data.CCBR_PROD
                                                , data.CCBR_PROD_PricingProbes
                                                , data.CCJP
                                                , data.CCJP_PricingProbes
                                                , data.CCKH
                                                , data.CCKH_PricingProbes
                                                , data.CCKR
                                                , data.CCKR_PricingProbes
                                                , data.CCMY
                                                , data.CCMY_PricingProbes
                                                , data.CCPH
                                                , data.CCPH_PricingProbes
                                                , data.CCRPR_PROD
                                                , data.CCRPR_PROD_PricingProbes
                                                , data.CCRU
                                                , data.CCRU_PricingProbes
                                                , data.CCTH
                                                , data.CCTH_PricingProbes
                                                , data.CCTH_UAT
                                                , data.CCTH_UAT_PricingProbes
                                                , data.CCTRADMX
                                                , data.CCTRADMX_PricingProbes
                                                , data.CCUS
                                                , data.CCUS_PricingProbes
                                                , data.CCZA
                                                , data.CCZA_PricingProbes
                                                , data.CEREBOSTH
                                                , data.CEREBOSTH_PricingProbes
                                                , data.CROWDSOURCE
                                                , data.CROWDSOURCE_PricingProbes
                                                , data.DIAGEOAU
                                                , data.DIAGEOAU_PricingProbes
                                                , data.DIAGEOBR
                                                , data.DIAGEOBR_PricingProbes
                                                , data.DIAGEOGR
                                                , data.DIAGEOGR_PricingProbes
                                                , data.DIAGEOIE
                                                , data.DIAGEOIE_PricingProbes
                                                , data.DIAGEOKE
                                                , data.DIAGEOKE_PricingProbes
                                                , data.DIAGEOMX
                                                , data.DIAGEOMX_PricingProbes
                                                , data.DIAGEOPT
                                                , data.DIAGEOPT_PricingProbes
                                                , data.DIAGEOTW
                                                , data.DIAGEOTW_PricingProbes
                                                , data.DIAGEOUK
                                                , data.DIAGEOUK_PricingProbes
                                                , data.DIAGEOZA
                                                , data.DIAGEOZA_PricingProbes
                                                , data.EMEA_DEMO
                                                , data.EMEA_DEMO_PricingProbes
                                                , data.FERREROIT
                                                , data.FERREROIT_PricingProbes
                                                , data.GILLETTEUS
                                                , data.GILLETTEUS_PricingProbes
                                                , data.GOOGLEUS
                                                , data.GOOGLEUS_PricingProbes
                                                , data.HBCDE
                                                , data.HBCDE_PricingProbes
                                                , data.HEINEKENCN
                                                , data.HEINEKENCN_PricingProbes
                                                , data.HEINEKENUS_PROD
                                                , data.HEINEKENUS_PROD_PricingProbes
                                                , data.HEINZCR
                                                , data.HEINZCR_PricingProbes
                                                , data.INBEVAR
                                                , data.INBEVAR_PricingProbes
                                                , data.INBEVBE
                                                , data.INBEVBE_PricingProbes
                                                , data.INBEVBE_SAND
                                                , data.INBEVBE_SAND_PricingProbes
                                                , data.INBEVBR
                                                , data.INBEVBR_PricingProbes
                                                , data.INBEVBR_ONTRADE
                                                , data.INBEVBR_ONTRADE_PricingProbes
                                                , data.INBEVCL
                                                , data.INBEVCL_PricingProbes
                                                , data.INBEVCN
                                                , data.INBEVCN_PricingProbes
                                                , data.INBEVCOOLERAR
                                                , data.INBEVCOOLERAR_PricingProbes
                                                , data.INBEVCOOLERBR
                                                , data.INBEVCOOLERBR_PricingProbes
                                                , data.INBEVCOOLERUS
                                                , data.INBEVCOOLERUS_PricingProbes
                                                , data.INBEVFR
                                                , data.INBEVFR_PricingProbes
                                                , data.INBEVLU
                                                , data.INBEVLU_PricingProbes
                                                , data.INBEVLU_SAND
                                                , data.INBEVLU_SAND_PricingProbes
                                                , data.INBEVMX
                                                , data.INBEVMX_PricingProbes
                                                , data.INBEVNL
                                                , data.INBEVNL_PricingProbes
                                                , data.INBEVNL_SAND
                                                , data.INBEVNL_SAND_PricingProbes
                                                , data.INBEVPY
                                                , data.INBEVPY_PricingProbes
                                                , data.INBEVTRADMX
                                                , data.INBEVTRADMX_PricingProbes
                                                , data.INBEVUS
                                                , data.INBEVUS_PricingProbes
                                                , data.JTIUA
                                                , data.JTIUA_PricingProbes
                                                , data.KCMY
                                                , data.KCMY_PricingProbes
                                                , data.KCUS
                                                , data.KCUS_PricingProbes
                                                , data.KEURIGCA
                                                , data.KEURIGCA_PricingProbes
                                                , data.LABATTPLNOPTCA
                                                , data.LABATTPLNOPTCA_PricingProbes
                                                , data.LAVAZZAAT
                                                , data.LAVAZZAAT_PricingProbes
                                                , data.LAVAZZAAU
                                                , data.LAVAZZAAU_PricingProbes
                                                , data.LAVAZZABE
                                                , data.LAVAZZABE_PricingProbes
                                                , data.LAVAZZABG
                                                , data.LAVAZZABG_PricingProbes
                                                , data.LAVAZZACA
                                                , data.LAVAZZACA_PricingProbes
                                                , data.LAVAZZACH
                                                , data.LAVAZZACH_PricingProbes
                                                , data.LAVAZZACL
                                                , data.LAVAZZACL_PricingProbes
                                                , data.LAVAZZACN
                                                , data.LAVAZZACN_PricingProbes
                                                , data.LAVAZZACZ
                                                , data.LAVAZZACZ_PricingProbes
                                                , data.LAVAZZADE
                                                , data.LAVAZZADE_PricingProbes
                                                , data.LAVAZZADK
                                                , data.LAVAZZADK_PricingProbes
                                                , data.LAVAZZAEE
                                                , data.LAVAZZAEE_PricingProbes
                                                , data.LAVAZZAES
                                                , data.LAVAZZAES_PricingProbes
                                                , data.LAVAZZAFR
                                                , data.LAVAZZAFR_PricingProbes
                                                , data.LAVAZZAGR
                                                , data.LAVAZZAGR_PricingProbes
                                                , data.LAVAZZAHK
                                                , data.LAVAZZAHK_PricingProbes
                                                , data.LAVAZZAHR
                                                , data.LAVAZZAHR_PricingProbes
                                                , data.LAVAZZAIL
                                                , data.LAVAZZAIL_PricingProbes
                                                , data.LAVAZZAIT
                                                , data.LAVAZZAIT_PricingProbes
                                                , data.LAVAZZAJP
                                                , data.LAVAZZAJP_PricingProbes
                                                , data.LAVAZZAKR
                                                , data.LAVAZZAKR_PricingProbes
                                                , data.LAVAZZALT
                                                , data.LAVAZZALT_PricingProbes
                                                , data.LAVAZZALU
                                                , data.LAVAZZALU_PricingProbes
                                                , data.LAVAZZALV
                                                , data.LAVAZZALV_PricingProbes
                                                , data.LAVAZZAMA
                                                , data.LAVAZZAMA_PricingProbes
                                                , data.LAVAZZANL
                                                , data.LAVAZZANL_PricingProbes
                                                , data.LAVAZZAPL
                                                , data.LAVAZZAPL_PricingProbes
                                                , data.LAVAZZARO
                                                , data.LAVAZZARO_PricingProbes
                                                , data.LAVAZZARU
                                                , data.LAVAZZARU_PricingProbes
                                                , data.LAVAZZASA
                                                , data.LAVAZZASA_PricingProbes
                                                , data.LAVAZZASE
                                                , data.LAVAZZASE_PricingProbes
                                                , data.LAVAZZASG
                                                , data.LAVAZZASG_PricingProbes
                                                , data.LAVAZZAUAE
                                                , data.LAVAZZAUAE_PricingProbes
                                                , data.LAVAZZAUK
                                                , data.LAVAZZAUK_PricingProbes
                                                , data.LAVAZZAUS
                                                , data.LAVAZZAUS_PricingProbes
                                                , data.LAVAZZAZA
                                                , data.LAVAZZAZA_PricingProbes
                                                , data.LRSUK
                                                , data.LRSUK_PricingProbes
                                                , data.MARSBR
                                                , data.MARSBR_PricingProbes
                                                , data.MARSIN
                                                , data.MARSIN_PricingProbes
                                                , data.MARSIN_OLD
                                                , data.MARSIN_OLD_PricingProbes
                                                , data.MARSRU_PROD
                                                , data.MARSRU_PROD_PricingProbes
                                                , data.MAYORAID
                                                , data.MAYORAID_PricingProbes
                                                , data.MJNCN
                                                , data.MJNCN_PricingProbes
                                                , data.MOLSONCOOLERHN
                                                , data.MOLSONCOOLERHN_PricingProbes
                                                , data.MOLSONCOOLERHR
                                                , data.MOLSONCOOLERHR_PricingProbes
                                                , data.MOLSONCOORSUK
                                                , data.MOLSONCOORSUK_PricingProbes
                                                , data.NESTLEUK
                                                , data.NESTLEUK_PricingProbes
                                                , data.NIVEAUK
                                                , data.NIVEAUK_PricingProbes
                                                , data.NRF2017_DEMO
                                                , data.NRF2017_DEMO_PricingProbes
                                                , data.ONE_AMERICAS_DEMO
                                                , data.ONE_AMERICAS_DEMO_PricingProbes
                                                , data.ONE_APAC_DEMO
                                                , data.ONE_APAC_DEMO_PricingProbes
                                                , data.PEPSICOBR
                                                , data.PEPSICOBR_PricingProbes
                                                , data.PNGAU
                                                , data.PNGAU_PricingProbes
                                                , data.PNGAU_OLD
                                                , data.PNGAU_OLD_PricingProbes
                                                , data.PNGCAREUS
                                                , data.PNGCAREUS_PricingProbes
                                                , data.PNGCN_PROD
                                                , data.PNGCN_PROD_PricingProbes
                                                , data.PNGJP
                                                , data.PNGJP_PricingProbes
                                                , data.PNGJP_OLD
                                                , data.PNGJP_OLD_PricingProbes
                                                , data.PNGUS
                                                , data.PNGUS_PricingProbes
                                                , data.PNGUSEPISODIC
                                                , data.PNGUSEPISODIC_PricingProbes
                                                , data.RBUS
                                                , data.RBUS_PricingProbes
                                                , data.RE_XSUITE_DEMO
                                                , data.RE_XSUITE_DEMO_PricingProbes
                                                , data.REPNGCN_DEMO
                                                , data.REPNGCN_DEMO_PricingProbes
                                                , data.RI_DEMO
                                                , data.RI_DEMO_PricingProbes
                                                , data.RI_DIAGEOAU
                                                , data.RI_DIAGEOAU_PricingProbes
                                                , data.RIALCBEVUK_PROD
                                                , data.RIALCBEVUK_PROD_PricingProbes
                                                , data.RICOFFEEUS
                                                , data.RICOFFEEUS_PricingProbes
                                                , data.RINIELSENUS
                                                , data.RINIELSENUS_PricingProbes
                                                , data.RIPETCAREUK_PROD
                                                , data.RIPETCAREUK_PROD_PricingProbes
                                                , data.RIUS
                                                , data.RIUS_PricingProbes
                                                , data.RIUS_DEV
                                                , data.RIUS_DEV_PricingProbes
                                                , data.RNBDE
                                                , data.RNBDE_PricingProbes
                                                , data.SMARTCOOLER_POC2
                                                , data.SMARTCOOLER_POC2_PricingProbes
                                                , data.SMARTCOOLER_TRN
                                                , data.SMARTCOOLER_TRN_PricingProbes
                                                , data.SMARTCOOLER2_TRN
                                                , data.SMARTCOOLER2_TRN_PricingProbes
                                                , data.SOLARBR
                                                , data.SOLARBR_PricingProbes
                                                , data.STATIC_CAMERA_DEMO
                                                , data.STATIC_CAMERA_DEMO_PricingProbes
                                                , data.SWIRECN
                                                , data.SWIRECN_PricingProbes
                                                , data.SWIREREDCN
                                                , data.SWIREREDCN_PricingProbes
                                                , data.TNUVAIL
                                                , data.TNUVAIL_PricingProbes
                                                , data.TRAXDEMO_TS_PROD
                                                , data.TRAXDEMO_TS_PROD_PricingProbes
                                                , data.TWEAU
                                                , data.TWEAU_PricingProbes
                                                , data.RI_DEMO2
                                                , data.RI_DEMO2_PricingProbes
                                                , data.COMPASSCCH_SAND
                                                , data.COMPASSCCH_SAND_PricingProbes
                                                , data.LAVAZZAIT_SAND
                                                , data.LAVAZZAIT_SAND_PricingProbes
                                                , data.INBEVUS_STG
                                                , data.INBEVUS_STG_PricingProbes
                                                , data.LAVAZZAFR_SAND
                                                , data.LAVAZZAFR_SAND_PricingProbes
                                                , data.INBEVBE_SAND2
                                                , data.INBEVBE_SAND2_PricingProbes
                                                , data.INBEVLU_SAND2
                                                , data.INBEVLU_SAND2_PricingProbes
                                                , data.INBEVNL_SAND2
                                                , data.INBEVNL_SAND2_PricingProbes
                                                , data.CreatedDate
                                                , data.CreatedBy

                                                 , data.ImportedDate
                                                 , data.ImportedYear
                                                 , data.B2BRU
                                                 , data.BRMUS
                                                 , data.CBCIL
                                                 , data.CCCOOLERMX
                                                 , data.DIAGEOAR
                                                 , data.DIAGEOBENELUX
                                                 , data.DIAGEOCH
                                                 , data.DIAGEOGA
                                                 , data.DIAGEOGTR
                                                 , data.DIAGEONORDICS
                                                 , data.DIAGEOUS
                                                 , data.FERREROEXTIT
                                                 , data.GOOGLEHK
                                                 , data.HEINEKENPILOTCN
                                                 , data.IMBO
                                                 , data.INBEVCI
                                                 , data.INBEVCNTT
                                                 , data.INBEVCO
                                                 , data.INBEVZA
                                                 , data.INORU
                                                 , data.JJSP
                                                 , data.JNJES
                                                 , data.JNJUK
                                                 , data.JRIJP
                                                 , data.KELLOGSUSPOC
                                                 , data.KRAFTUS
                                                 , data.MARS_CHOCO_RU
                                                 , data.MHUK
                                                 , data.MILLERCOORS
                                                 , data.MOLSONONTRADEUK
                                                 , data.MYCHEMISTAU
                                                 , data.NESTLEROAMLERUK
                                                 , data.NRF2018
                                                 , data.PENAFLORAR
                                                 , data.PMIUA
                                                 , data.PNGAMERICA
                                                 , data.PNGRO
                                                 , data.RBAU
                                                 , data.RBCA
                                                 , data.RBDK
                                                 , data.RBMANUAL
                                                 , data.RINIELSENRU_MARS
                                                 , data.RINIELSENUSQI
                                                 , data.RIPANELCN
                                                 , data.RISPARKWINEDE
                                                 , data.SANOFIAE
                                                 , data.SANOFIAU
                                                 , data.SANOFIHK
                                                 , data.SANOFIKH
                                                 , data.SANOFINZ
                                                 , data.SANOFIRU
                                                 , data.SANOFITR
                                                 , data.SANOFIUA
                                                 , data.SHUFERSALIL
                                                 , data.SUNTORYJP
                                                 , data.TESCOTH
                                                 , data.TESCOUK
                                                 , data.TRAXROBOT
                                                 , data.XSUITE_SHOWCASE
                                                 , data.ABIUS
                                                 , data.BADGERROBOT
                                                 , data.CUBAU
                                                 , data.DIAGEORU
                                                 , data.GFKFR
                                                 , data.JNJIT
                                                 , data.LIGHTTRAX
                                                 , data.LIGHTTRAXOFFLINE
                                                 , data.RINIELSENFR
                                                 , data.SANOFIKZ
                                                 , data.SANOFILB
                                                 , data.SANOFISA
                                                 , data.SANOFIZA
                                                 , data.WATSONSHK
                                                 , data.KELLOGGUS
                                                  , data.TSINGTAOBEERCN

                                                ));
            return table;
        }




        public int BulkInsertIntoMasks(List<MasksEntity> masks)
        {
            using (var scope = new TransactionScope())
            {
                string connectionString = ConfigurationManager.ConnectionStrings["Client"].ConnectionString;
                var sqlConnection = new SqlConnection(connectionString);
                var sqlBulkCopy = new SqlBulkCopy(sqlConnection)
                {
                    DestinationTableName = "Masks",
                    //BulkCopyTimeout = 6000
                };
                var dataTable = GetDataTableForMasks(masks);
                sqlConnection.Open();

                sqlBulkCopy.WriteToServer(dataTable);

                scope.Complete();
                sqlBulkCopy.Close();
                sqlConnection.Close();
                sqlConnection.Dispose();
            }
            return masks.Count;
        }


        private DataTable GetDataTableForMasks(List<MasksEntity> masks)
        {
            var table = new DataTable();
            table.Columns.Add("ID", typeof(string));
            table.Columns.Add("QAT", typeof(string));
            table.Columns.Add("Center", typeof(string));
            table.Columns.Add("TotalMasks", typeof(int));
            table.Columns.Add("AvgsecondsperMasks", typeof(int));
            table.Columns.Add("ABICA", typeof(int));
            table.Columns.Add("ABICA_Masks", typeof(int));
            table.Columns.Add("ABITAMSUS_PROD", typeof(int));
            table.Columns.Add("ABITAMSUS_PROD_Masks", typeof(int));
            table.Columns.Add("AMERICAS_DEMO", typeof(int));
            table.Columns.Add("AMERICAS_DEMO_Masks", typeof(int));
            table.Columns.Add("BATRU", typeof(int));
            table.Columns.Add("BATRU_Masks", typeof(int));
            table.Columns.Add("BIKR", typeof(int));
            table.Columns.Add("BIKR_Masks", typeof(int));
            table.Columns.Add("BIMY", typeof(int));
            table.Columns.Add("BIMY_Masks", typeof(int));
            table.Columns.Add("BIPH", typeof(int));
            table.Columns.Add("BIPH_Masks", typeof(int));
            table.Columns.Add("BISEASK", typeof(int));
            table.Columns.Add("BISEASK_Masks", typeof(int));
            table.Columns.Add("BITH", typeof(int));
            table.Columns.Add("BITH_Masks", typeof(int));
            table.Columns.Add("BIVN", typeof(int));
            table.Columns.Add("BIVN_Masks", typeof(int));
            table.Columns.Add("BPAU", typeof(int));
            table.Columns.Add("BPAU_Masks", typeof(int));
            table.Columns.Add("BRODMANN", typeof(int));
            table.Columns.Add("BRODMANN_Masks", typeof(int));
            table.Columns.Add("CARREFOURAR", typeof(int));
            table.Columns.Add("CARREFOURAR_Masks", typeof(int));
            table.Columns.Add("CCAAU", typeof(int));
            table.Columns.Add("CCAAU_Masks", typeof(int));
            table.Columns.Add("CCABIZA", typeof(int));
            table.Columns.Add("CCABIZA_Masks", typeof(int));
            table.Columns.Add("CCANZ", typeof(int));
            table.Columns.Add("CCANZ_Masks", typeof(int));
            table.Columns.Add("CCBOTTLERSUS", typeof(int));
            table.Columns.Add("CCBOTTLERSUS_Masks", typeof(int));
            table.Columns.Add("CCBR_PROD", typeof(int));
            table.Columns.Add("CCBR_PROD_Masks", typeof(int));
            table.Columns.Add("CCJP", typeof(int));
            table.Columns.Add("CCJP_Masks", typeof(int));
            table.Columns.Add("CCKH", typeof(int));
            table.Columns.Add("CCKH_Masks", typeof(int));
            table.Columns.Add("CCKR", typeof(int));
            table.Columns.Add("CCKR_Masks", typeof(int));
            table.Columns.Add("CCMY", typeof(int));
            table.Columns.Add("CCMY_Masks", typeof(int));
            table.Columns.Add("CCPH", typeof(int));
            table.Columns.Add("CCPH_Masks", typeof(int));
            table.Columns.Add("CCRPR_PROD", typeof(int));
            table.Columns.Add("CCRPR_PROD_Masks", typeof(int));
            table.Columns.Add("CCRU", typeof(int));
            table.Columns.Add("CCRU_Masks", typeof(int));
            table.Columns.Add("CCTH", typeof(int));
            table.Columns.Add("CCTH_Masks", typeof(int));
            table.Columns.Add("CCTH_UAT", typeof(int));
            table.Columns.Add("CCTH_UAT_Masks", typeof(int));
            table.Columns.Add("CCTRADMX", typeof(int));
            table.Columns.Add("CCTRADMX_Masks", typeof(int));
            table.Columns.Add("CCUS", typeof(int));
            table.Columns.Add("CCUS_Masks", typeof(int));
            table.Columns.Add("CCZA", typeof(int));
            table.Columns.Add("CCZA_Masks", typeof(int));
            table.Columns.Add("CEREBOSTH", typeof(int));
            table.Columns.Add("CEREBOSTH_Masks", typeof(int));
            table.Columns.Add("CROWDSOURCE", typeof(int));
            table.Columns.Add("CROWDSOURCE_Masks", typeof(int));
            table.Columns.Add("DIAGEOAU", typeof(int));
            table.Columns.Add("DIAGEOAU_Masks", typeof(int));
            table.Columns.Add("DIAGEOBR", typeof(int));
            table.Columns.Add("DIAGEOBR_Masks", typeof(int));
            table.Columns.Add("DIAGEOGR", typeof(int));
            table.Columns.Add("DIAGEOGR_Masks", typeof(int));
            table.Columns.Add("DIAGEOIE", typeof(int));
            table.Columns.Add("DIAGEOIE_Masks", typeof(int));
            table.Columns.Add("DIAGEOKE", typeof(int));
            table.Columns.Add("DIAGEOKE_Masks", typeof(int));
            table.Columns.Add("DIAGEOMX", typeof(int));
            table.Columns.Add("DIAGEOMX_Masks", typeof(int));
            table.Columns.Add("DIAGEOPT", typeof(int));
            table.Columns.Add("DIAGEOPT_Masks", typeof(int));
            table.Columns.Add("DIAGEOTW", typeof(int));
            table.Columns.Add("DIAGEOTW_Masks", typeof(int));
            table.Columns.Add("DIAGEOUK", typeof(int));
            table.Columns.Add("DIAGEOUK_Masks", typeof(int));
            table.Columns.Add("DIAGEOZA", typeof(int));
            table.Columns.Add("DIAGEOZA_Masks", typeof(int));
            table.Columns.Add("EMEA_DEMO", typeof(int));
            table.Columns.Add("EMEA_DEMO_Masks", typeof(int));
            table.Columns.Add("FERREROIT", typeof(int));
            table.Columns.Add("FERREROIT_Masks", typeof(int));
            table.Columns.Add("GILLETTEUS", typeof(int));
            table.Columns.Add("GILLETTEUS_Masks", typeof(int));
            table.Columns.Add("GOOGLEUS", typeof(int));
            table.Columns.Add("GOOGLEUS_Masks", typeof(int));
            table.Columns.Add("HBCDE", typeof(int));
            table.Columns.Add("HBCDE_Masks", typeof(int));
            table.Columns.Add("HEINEKENCN", typeof(int));
            table.Columns.Add("HEINEKENCN_Masks", typeof(int));
            table.Columns.Add("HEINEKENUS_PROD", typeof(int));
            table.Columns.Add("HEINEKENUS_PROD_Masks", typeof(int));
            table.Columns.Add("HEINZCR", typeof(int));
            table.Columns.Add("HEINZCR_Masks", typeof(int));
            table.Columns.Add("INBEVAR", typeof(int));
            table.Columns.Add("INBEVAR_Masks", typeof(int));
            table.Columns.Add("INBEVBE", typeof(int));
            table.Columns.Add("INBEVBE_Masks", typeof(int));
            table.Columns.Add("INBEVBE_SAND", typeof(int));
            table.Columns.Add("INBEVBE_SAND_Masks", typeof(int));
            table.Columns.Add("INBEVBR", typeof(int));
            table.Columns.Add("INBEVBR_Masks", typeof(int));
            table.Columns.Add("INBEVBR_ONTRADE", typeof(int));
            table.Columns.Add("INBEVBR_ONTRADE_Masks", typeof(int));
            table.Columns.Add("INBEVCL", typeof(int));
            table.Columns.Add("INBEVCL_Masks", typeof(int));
            table.Columns.Add("INBEVCN", typeof(int));
            table.Columns.Add("INBEVCN_Masks", typeof(int));
            table.Columns.Add("INBEVCOOLERAR", typeof(int));
            table.Columns.Add("INBEVCOOLERAR_Masks", typeof(int));
            table.Columns.Add("INBEVCOOLERBR", typeof(int));
            table.Columns.Add("INBEVCOOLERBR_Masks", typeof(int));
            table.Columns.Add("INBEVCOOLERUS", typeof(int));
            table.Columns.Add("INBEVCOOLERUS_Masks", typeof(int));
            table.Columns.Add("INBEVFR", typeof(int));
            table.Columns.Add("INBEVFR_Masks", typeof(int));
            table.Columns.Add("INBEVLU", typeof(int));
            table.Columns.Add("INBEVLU_Masks", typeof(int));
            table.Columns.Add("INBEVLU_SAND", typeof(int));
            table.Columns.Add("INBEVLU_SAND_Masks", typeof(int));
            table.Columns.Add("INBEVMX", typeof(int));
            table.Columns.Add("INBEVMX_Masks", typeof(int));
            table.Columns.Add("INBEVNL", typeof(int));
            table.Columns.Add("INBEVNL_Masks", typeof(int));
            table.Columns.Add("INBEVNL_SAND", typeof(int));
            table.Columns.Add("INBEVNL_SAND_Masks", typeof(int));
            table.Columns.Add("INBEVPY", typeof(int));
            table.Columns.Add("INBEVPY_Masks", typeof(int));
            table.Columns.Add("INBEVTRADMX", typeof(int));
            table.Columns.Add("INBEVTRADMX_Masks", typeof(int));
            table.Columns.Add("INBEVUS", typeof(int));
            table.Columns.Add("INBEVUS_Masks", typeof(int));
            table.Columns.Add("JTIUA", typeof(int));
            table.Columns.Add("JTIUA_Masks", typeof(int));
            table.Columns.Add("KCMY", typeof(int));
            table.Columns.Add("KCMY_Masks", typeof(int));
            table.Columns.Add("KCUS", typeof(int));
            table.Columns.Add("KCUS_Masks", typeof(int));
            table.Columns.Add("KEURIGCA", typeof(int));
            table.Columns.Add("KEURIGCA_Masks", typeof(int));
            table.Columns.Add("LABATTPLNOPTCA", typeof(int));
            table.Columns.Add("LABATTPLNOPTCA_Masks", typeof(int));
            table.Columns.Add("LAVAZZAAT", typeof(int));
            table.Columns.Add("LAVAZZAAT_Masks", typeof(int));
            table.Columns.Add("LAVAZZAAU", typeof(int));
            table.Columns.Add("LAVAZZAAU_Masks", typeof(int));
            table.Columns.Add("LAVAZZABE", typeof(int));
            table.Columns.Add("LAVAZZABE_Masks", typeof(int));
            table.Columns.Add("LAVAZZABG", typeof(int));
            table.Columns.Add("LAVAZZABG_Masks", typeof(int));
            table.Columns.Add("LAVAZZACA", typeof(int));
            table.Columns.Add("LAVAZZACA_Masks", typeof(int));
            table.Columns.Add("LAVAZZACH", typeof(int));
            table.Columns.Add("LAVAZZACH_Masks", typeof(int));
            table.Columns.Add("LAVAZZACL", typeof(int));
            table.Columns.Add("LAVAZZACL_Masks", typeof(int));
            table.Columns.Add("LAVAZZACN", typeof(int));
            table.Columns.Add("LAVAZZACN_Masks", typeof(int));
            table.Columns.Add("LAVAZZACZ", typeof(int));
            table.Columns.Add("LAVAZZACZ_Masks", typeof(int));
            table.Columns.Add("LAVAZZADE", typeof(int));
            table.Columns.Add("LAVAZZADE_Masks", typeof(int));
            table.Columns.Add("LAVAZZADK", typeof(int));
            table.Columns.Add("LAVAZZADK_Masks", typeof(int));
            table.Columns.Add("LAVAZZAEE", typeof(int));
            table.Columns.Add("LAVAZZAEE_Masks", typeof(int));
            table.Columns.Add("LAVAZZAES", typeof(int));
            table.Columns.Add("LAVAZZAES_Masks", typeof(int));
            table.Columns.Add("LAVAZZAFR", typeof(int));
            table.Columns.Add("LAVAZZAFR_Masks", typeof(int));
            table.Columns.Add("LAVAZZAGR", typeof(int));
            table.Columns.Add("LAVAZZAGR_Masks", typeof(int));
            table.Columns.Add("LAVAZZAHK", typeof(int));
            table.Columns.Add("LAVAZZAHK_Masks", typeof(int));
            table.Columns.Add("LAVAZZAHR", typeof(int));
            table.Columns.Add("LAVAZZAHR_Masks", typeof(int));
            table.Columns.Add("LAVAZZAIL", typeof(int));
            table.Columns.Add("LAVAZZAIL_Masks", typeof(int));
            table.Columns.Add("LAVAZZAIT", typeof(int));
            table.Columns.Add("LAVAZZAIT_Masks", typeof(int));
            table.Columns.Add("LAVAZZAJP", typeof(int));
            table.Columns.Add("LAVAZZAJP_Masks", typeof(int));
            table.Columns.Add("LAVAZZAKR", typeof(int));
            table.Columns.Add("LAVAZZAKR_Masks", typeof(int));
            table.Columns.Add("LAVAZZALT", typeof(int));
            table.Columns.Add("LAVAZZALT_Masks", typeof(int));
            table.Columns.Add("LAVAZZALU", typeof(int));
            table.Columns.Add("LAVAZZALU_Masks", typeof(int));
            table.Columns.Add("LAVAZZALV", typeof(int));
            table.Columns.Add("LAVAZZALV_Masks", typeof(int));
            table.Columns.Add("LAVAZZAMA", typeof(int));
            table.Columns.Add("LAVAZZAMA_Masks", typeof(int));
            table.Columns.Add("LAVAZZANL", typeof(int));
            table.Columns.Add("LAVAZZANL_Masks", typeof(int));
            table.Columns.Add("LAVAZZAPL", typeof(int));
            table.Columns.Add("LAVAZZAPL_Masks", typeof(int));
            table.Columns.Add("LAVAZZARO", typeof(int));
            table.Columns.Add("LAVAZZARO_Masks", typeof(int));
            table.Columns.Add("LAVAZZARU", typeof(int));
            table.Columns.Add("LAVAZZARU_Masks", typeof(int));
            table.Columns.Add("LAVAZZASA", typeof(int));
            table.Columns.Add("LAVAZZASA_Masks", typeof(int));
            table.Columns.Add("LAVAZZASE", typeof(int));
            table.Columns.Add("LAVAZZASE_Masks", typeof(int));
            table.Columns.Add("LAVAZZASG", typeof(int));
            table.Columns.Add("LAVAZZASG_Masks", typeof(int));
            table.Columns.Add("LAVAZZAUAE", typeof(int));
            table.Columns.Add("LAVAZZAUAE_Masks", typeof(int));
            table.Columns.Add("LAVAZZAUK", typeof(int));
            table.Columns.Add("LAVAZZAUK_Masks", typeof(int));
            table.Columns.Add("LAVAZZAUS", typeof(int));
            table.Columns.Add("LAVAZZAUS_Masks", typeof(int));
            table.Columns.Add("LAVAZZAZA", typeof(int));
            table.Columns.Add("LAVAZZAZA_Masks", typeof(int));
            table.Columns.Add("LRSUK", typeof(int));
            table.Columns.Add("LRSUK_Masks", typeof(int));
            table.Columns.Add("MARSBR", typeof(int));
            table.Columns.Add("MARSBR_Masks", typeof(int));
            table.Columns.Add("MARSIN", typeof(int));
            table.Columns.Add("MARSIN_Masks", typeof(int));
            table.Columns.Add("MARSIN_OLD", typeof(int));
            table.Columns.Add("MARSIN_OLD_Masks", typeof(int));
            table.Columns.Add("MARSRU_PROD", typeof(int));
            table.Columns.Add("MARSRU_PROD_Masks", typeof(int));
            table.Columns.Add("MAYORAID", typeof(int));
            table.Columns.Add("MAYORAID_Masks", typeof(int));
            table.Columns.Add("MJNCN", typeof(int));
            table.Columns.Add("MJNCN_Masks", typeof(int));
            table.Columns.Add("MOLSONCOOLERHN", typeof(int));
            table.Columns.Add("MOLSONCOOLERHN_Masks", typeof(int));
            table.Columns.Add("MOLSONCOOLERHR", typeof(int));
            table.Columns.Add("MOLSONCOOLERHR_Masks", typeof(int));
            table.Columns.Add("MOLSONCOORSUK", typeof(int));
            table.Columns.Add("MOLSONCOORSUK_Masks", typeof(int));
            table.Columns.Add("NESTLEUK", typeof(int));
            table.Columns.Add("NESTLEUK_Masks", typeof(int));
            table.Columns.Add("NIVEAUK", typeof(int));
            table.Columns.Add("NIVEAUK_Masks", typeof(int));
            table.Columns.Add("NRF2017_DEMO", typeof(int));
            table.Columns.Add("NRF2017_DEMO_Masks", typeof(int));
            table.Columns.Add("ONE_AMERICAS_DEMO", typeof(int));
            table.Columns.Add("ONE_AMERICAS_DEMO_Masks", typeof(int));
            table.Columns.Add("ONE_APAC_DEMO", typeof(int));
            table.Columns.Add("ONE_APAC_DEMO_Masks", typeof(int));
            table.Columns.Add("PEPSICOBR", typeof(int));
            table.Columns.Add("PEPSICOBR_Masks", typeof(int));
            table.Columns.Add("PNGAU", typeof(int));
            table.Columns.Add("PNGAU_Masks", typeof(int));
            table.Columns.Add("PNGAU_OLD", typeof(int));
            table.Columns.Add("PNGAU_OLD_Masks", typeof(int));
            table.Columns.Add("PNGCAREUS", typeof(int));
            table.Columns.Add("PNGCAREUS_Masks", typeof(int));
            table.Columns.Add("PNGCN_PROD", typeof(int));
            table.Columns.Add("PNGCN_PROD_Masks", typeof(int));
            table.Columns.Add("PNGJP", typeof(int));
            table.Columns.Add("PNGJP_Masks", typeof(int));
            table.Columns.Add("PNGJP_OLD", typeof(int));
            table.Columns.Add("PNGJP_OLD_Masks", typeof(int));
            table.Columns.Add("PNGUS", typeof(int));
            table.Columns.Add("PNGUS_Masks", typeof(int));
            table.Columns.Add("PNGUSEPISODIC", typeof(int));
            table.Columns.Add("PNGUSEPISODIC_Masks", typeof(int));
            table.Columns.Add("RBUS", typeof(int));
            table.Columns.Add("RBUS_Masks", typeof(int));
            table.Columns.Add("RE_XSUITE_DEMO", typeof(int));
            table.Columns.Add("RE_XSUITE_DEMO_Masks", typeof(int));
            table.Columns.Add("REPNGCN_DEMO", typeof(int));
            table.Columns.Add("REPNGCN_DEMO_Masks", typeof(int));
            table.Columns.Add("RI_DEMO", typeof(int));
            table.Columns.Add("RI_DEMO_Masks", typeof(int));
            table.Columns.Add("RI_DIAGEOAU", typeof(int));
            table.Columns.Add("RI_DIAGEOAU_Masks", typeof(int));
            table.Columns.Add("RIALCBEVUK_PROD", typeof(int));
            table.Columns.Add("RIALCBEVUK_PROD_Masks", typeof(int));
            table.Columns.Add("RICOFFEEUS", typeof(int));
            table.Columns.Add("RICOFFEEUS_Masks", typeof(int));
            table.Columns.Add("RINIELSENUS", typeof(int));
            table.Columns.Add("RINIELSENUS_Masks", typeof(int));
            table.Columns.Add("RIPETCAREUK_PROD", typeof(int));
            table.Columns.Add("RIPETCAREUK_PROD_Masks", typeof(int));
            table.Columns.Add("RIUS", typeof(int));
            table.Columns.Add("RIUS_Masks", typeof(int));
            table.Columns.Add("RIUS_DEV", typeof(int));
            table.Columns.Add("RIUS_DEV_Masks", typeof(int));
            table.Columns.Add("RNBDE", typeof(int));
            table.Columns.Add("RNBDE_Masks", typeof(int));
            table.Columns.Add("SMARTCOOLER_POC2", typeof(int));
            table.Columns.Add("SMARTCOOLER_POC2_Masks", typeof(int));
            table.Columns.Add("SMARTCOOLER_TRN", typeof(int));
            table.Columns.Add("SMARTCOOLER_TRN_Masks", typeof(int));
            table.Columns.Add("SMARTCOOLER2_TRN", typeof(int));
            table.Columns.Add("SMARTCOOLER2_TRN_Masks", typeof(int));
            table.Columns.Add("SOLARBR", typeof(int));
            table.Columns.Add("SOLARBR_Masks", typeof(int));
            table.Columns.Add("STATIC_CAMERA_DEMO", typeof(int));
            table.Columns.Add("STATIC_CAMERA_DEMO_Masks", typeof(int));
            table.Columns.Add("SWIRECN", typeof(int));
            table.Columns.Add("SWIRECN_Masks", typeof(int));
            table.Columns.Add("SWIREREDCN", typeof(int));
            table.Columns.Add("SWIREREDCN_Masks", typeof(int));
            table.Columns.Add("TNUVAIL", typeof(int));
            table.Columns.Add("TNUVAIL_Masks", typeof(int));
            table.Columns.Add("TRAXDEMO_TS_PROD", typeof(int));
            table.Columns.Add("TRAXDEMO_TS_PROD_Masks", typeof(int));
            table.Columns.Add("TWEAU", typeof(int));
            table.Columns.Add("TWEAU_Masks", typeof(int));
            table.Columns.Add("RI_DEMO2", typeof(int));
            table.Columns.Add("RI_DEMO2_Masks", typeof(int));
            table.Columns.Add("COMPASSCCH_SAND", typeof(int));
            table.Columns.Add("COMPASSCCH_SAND_Masks", typeof(int));
            table.Columns.Add("LAVAZZAIT_SAND", typeof(int));
            table.Columns.Add("LAVAZZAIT_SAND_Masks", typeof(int));
            table.Columns.Add("INBEVUS_STG", typeof(int));
            table.Columns.Add("INBEVUS_STG_Masks", typeof(int));
            table.Columns.Add("LAVAZZAFR_SAND", typeof(int));
            table.Columns.Add("LAVAZZAFR_SAND_Masks", typeof(int));
            table.Columns.Add("INBEVBE_SAND2", typeof(int));
            table.Columns.Add("INBEVBE_SAND2_Masks", typeof(int));
            table.Columns.Add("INBEVLU_SAND2", typeof(int));
            table.Columns.Add("INBEVLU_SAND2_Masks", typeof(int));
            table.Columns.Add("INBEVNL_SAND2", typeof(int));
            table.Columns.Add("INBEVNL_SAND2_Masks", typeof(int));
            table.Columns.Add("CreatedDate", typeof(string));
            table.Columns.Add("CreatedBy", typeof(string));

            table.Columns.Add("ImportedDate", typeof(string));
            table.Columns.Add("ImportedYear", typeof(string));
            table.Columns.Add("B2BRU", typeof(int));
            table.Columns.Add("BRMUS", typeof(int));
            table.Columns.Add("CBCIL", typeof(int));
            table.Columns.Add("CCCOOLERMX", typeof(int));
            table.Columns.Add("DIAGEOAR", typeof(int));
            table.Columns.Add("DIAGEOBENELUX", typeof(int));
            table.Columns.Add("DIAGEOCH", typeof(int));
            table.Columns.Add("DIAGEOGA", typeof(int));
            table.Columns.Add("DIAGEOGTR", typeof(int));
            table.Columns.Add("DIAGEONORDICS", typeof(int));
            table.Columns.Add("DIAGEOUS", typeof(int));
            table.Columns.Add("FERREROEXTIT", typeof(int));
            table.Columns.Add("GOOGLEHK", typeof(int));
            table.Columns.Add("HEINEKENPILOTCN", typeof(int));
            table.Columns.Add("IMBO", typeof(int));
            table.Columns.Add("INBEVCI", typeof(int));
            table.Columns.Add("INBEVCNTT", typeof(int));
            table.Columns.Add("INBEVCO", typeof(int));
            table.Columns.Add("INBEVZA", typeof(int));
            table.Columns.Add("INORU", typeof(int));
            table.Columns.Add("JJSP", typeof(int));
            table.Columns.Add("JNJES", typeof(int));
            table.Columns.Add("JNJUK", typeof(int));
            table.Columns.Add("JRIJP", typeof(int));
            table.Columns.Add("KELLOGSUSPOC", typeof(int));
            table.Columns.Add("KRAFTUS", typeof(int));
            table.Columns.Add("MARS_CHOCO_RU", typeof(int));
            table.Columns.Add("MHUK", typeof(int));
            table.Columns.Add("MILLERCOORS", typeof(int));
            table.Columns.Add("MOLSONONTRADEUK", typeof(int));
            table.Columns.Add("MYCHEMISTAU", typeof(int));
            table.Columns.Add("NESTLEROAMLERUK", typeof(int));
            table.Columns.Add("NRF2018", typeof(int));
            table.Columns.Add("PENAFLORAR", typeof(int));
            table.Columns.Add("PMIUA", typeof(int));
            table.Columns.Add("PNGAMERICA", typeof(int));
            table.Columns.Add("PNGRO", typeof(int));
            table.Columns.Add("RBAU", typeof(int));
            table.Columns.Add("RBCA", typeof(int));
            table.Columns.Add("RBDK", typeof(int));
            table.Columns.Add("RBMANUAL", typeof(int));
            table.Columns.Add("RINIELSENRU_MARS", typeof(int));
            table.Columns.Add("RINIELSENUSQI", typeof(int));
            table.Columns.Add("RIPANELCN", typeof(int));
            table.Columns.Add("RISPARKWINEDE", typeof(int));
            table.Columns.Add("SANOFIAE", typeof(int));
            table.Columns.Add("SANOFIAU", typeof(int));
            table.Columns.Add("SANOFIHK", typeof(int));
            table.Columns.Add("SANOFIKH", typeof(int));
            table.Columns.Add("SANOFINZ", typeof(int));
            table.Columns.Add("SANOFIRU", typeof(int));
            table.Columns.Add("SANOFITR", typeof(int));
            table.Columns.Add("SANOFIUA", typeof(int));
            table.Columns.Add("SHUFERSALIL", typeof(int));
            table.Columns.Add("SUNTORYJP", typeof(int));
            table.Columns.Add("TESCOTH", typeof(int));
            table.Columns.Add("TESCOUK", typeof(int));
            table.Columns.Add("TRAXROBOT", typeof(int));
            table.Columns.Add("XSUITE_SHOWCASE", typeof(int));
            table.Columns.Add("ABIUS", typeof(int));
            table.Columns.Add("BADGERROBOT", typeof(int));
            table.Columns.Add("CUBAU", typeof(int));
            table.Columns.Add("DIAGEORU", typeof(int));
            table.Columns.Add("GFKFR", typeof(int));
            table.Columns.Add("JNJIT", typeof(int));
            table.Columns.Add("LIGHTTRAX", typeof(int));
            table.Columns.Add("LIGHTTRAXOFFLINE", typeof(int));
            table.Columns.Add("RINIELSENFR", typeof(int));
            table.Columns.Add("SANOFIKZ", typeof(int));
            table.Columns.Add("SANOFILB", typeof(int));
            table.Columns.Add("SANOFISA", typeof(int));
            table.Columns.Add("SANOFIZA", typeof(int));
            table.Columns.Add("WATSONSHK", typeof(int));
            table.Columns.Add("KELLOGGUS", typeof(int));
            table.Columns.Add("TSINGTAOBEERCN", typeof(int));

            // note : the order of the field is very important
            // and should be same as the defined in table structure.
            masks.ForEach(data => table.Rows.Add(
                                                   data.ID
	                                             , data.QAT
	                                             , data.Center
	                                             , data.TotalMasks
	                                             , data.AvgsecondsperMasks
	                                             , data.ABICA
	                                             , data.ABICA_Masks
	                                             , data.ABITAMSUS_PROD
	                                             , data.ABITAMSUS_PROD_Masks
	                                             , data.AMERICAS_DEMO
	                                             , data.AMERICAS_DEMO_Masks
	                                             , data.BATRU
	                                             , data.BATRU_Masks
	                                             , data.BIKR
	                                             , data.BIKR_Masks
	                                             , data.BIMY
	                                             , data.BIMY_Masks
	                                             , data.BIPH
	                                             , data.BIPH_Masks
	                                             , data.BISEASK
	                                             , data.BISEASK_Masks
	                                             , data.BITH
	                                             , data.BITH_Masks
	                                             , data.BIVN
	                                             , data.BIVN_Masks
	                                             , data.BPAU
	                                             , data.BPAU_Masks
	                                             , data.BRODMANN
	                                             , data.BRODMANN_Masks
	                                             , data.CARREFOURAR
	                                             , data.CARREFOURAR_Masks
	                                             , data.CCAAU
	                                             , data.CCAAU_Masks
	                                             , data.CCABIZA
	                                             , data.CCABIZA_Masks
	                                             , data.CCANZ
	                                             , data.CCANZ_Masks
	                                             , data.CCBOTTLERSUS
	                                             , data.CCBOTTLERSUS_Masks
	                                             , data.CCBR_PROD
	                                             , data.CCBR_PROD_Masks
	                                             , data.CCJP
	                                             , data.CCJP_Masks
	                                             , data.CCKH
	                                             , data.CCKH_Masks
	                                             , data.CCKR
	                                             , data.CCKR_Masks
	                                             , data.CCMY
	                                             , data.CCMY_Masks
	                                             , data.CCPH
	                                             , data.CCPH_Masks
	                                             , data.CCRPR_PROD
	                                             , data.CCRPR_PROD_Masks
	                                             , data.CCRU
	                                             , data.CCRU_Masks
	                                             , data.CCTH
	                                             , data.CCTH_Masks
	                                             , data.CCTH_UAT
	                                             , data.CCTH_UAT_Masks
	                                             , data.CCTRADMX
	                                             , data.CCTRADMX_Masks
	                                             , data.CCUS
	                                             , data.CCUS_Masks
	                                             , data.CCZA
	                                             , data.CCZA_Masks
	                                             , data.CEREBOSTH
	                                             , data.CEREBOSTH_Masks
	                                             , data.CROWDSOURCE
	                                             , data.CROWDSOURCE_Masks
	                                             , data.DIAGEOAU
	                                             , data.DIAGEOAU_Masks
	                                             , data.DIAGEOBR
	                                             , data.DIAGEOBR_Masks
	                                             , data.DIAGEOGR
	                                             , data.DIAGEOGR_Masks
	                                             , data.DIAGEOIE
	                                             , data.DIAGEOIE_Masks
	                                             , data.DIAGEOKE
	                                             , data.DIAGEOKE_Masks
	                                             , data.DIAGEOMX
	                                             , data.DIAGEOMX_Masks
	                                             , data.DIAGEOPT
	                                             , data.DIAGEOPT_Masks
	                                             , data.DIAGEOTW
	                                             , data.DIAGEOTW_Masks
	                                             , data.DIAGEOUK
	                                             , data.DIAGEOUK_Masks
	                                             , data.DIAGEOZA
	                                             , data.DIAGEOZA_Masks
	                                             , data.EMEA_DEMO
	                                             , data.EMEA_DEMO_Masks
	                                             , data.FERREROIT
	                                             , data.FERREROIT_Masks
	                                             , data.GILLETTEUS
	                                             , data.GILLETTEUS_Masks
	                                             , data.GOOGLEUS
	                                             , data.GOOGLEUS_Masks
	                                             , data.HBCDE
	                                             , data.HBCDE_Masks
	                                             , data.HEINEKENCN
	                                             , data.HEINEKENCN_Masks
	                                             , data.HEINEKENUS_PROD
	                                             , data.HEINEKENUS_PROD_Masks
	                                             , data.HEINZCR
	                                             , data.HEINZCR_Masks
	                                             , data.INBEVAR
	                                             , data.INBEVAR_Masks
	                                             , data.INBEVBE
	                                             , data.INBEVBE_Masks
	                                             , data.INBEVBE_SAND
	                                             , data.INBEVBE_SAND_Masks
	                                             , data.INBEVBR
	                                             , data.INBEVBR_Masks
	                                             , data.INBEVBR_ONTRADE
	                                             , data.INBEVBR_ONTRADE_Masks
	                                             , data.INBEVCL
	                                             , data.INBEVCL_Masks
	                                             , data.INBEVCN
	                                             , data.INBEVCN_Masks
	                                             , data.INBEVCOOLERAR
	                                             , data.INBEVCOOLERAR_Masks
	                                             , data.INBEVCOOLERBR
	                                             , data.INBEVCOOLERBR_Masks
	                                             , data.INBEVCOOLERUS
	                                             , data.INBEVCOOLERUS_Masks
	                                             , data.INBEVFR
	                                             , data.INBEVFR_Masks
	                                             , data.INBEVLU
	                                             , data.INBEVLU_Masks
	                                             , data.INBEVLU_SAND
	                                             , data.INBEVLU_SAND_Masks
	                                             , data.INBEVMX
	                                             , data.INBEVMX_Masks
	                                             , data.INBEVNL
	                                             , data.INBEVNL_Masks
	                                             , data.INBEVNL_SAND
	                                             , data.INBEVNL_SAND_Masks
	                                             , data.INBEVPY
	                                             , data.INBEVPY_Masks
	                                             , data.INBEVTRADMX
	                                             , data.INBEVTRADMX_Masks
	                                             , data.INBEVUS
	                                             , data.INBEVUS_Masks
	                                             , data.JTIUA
	                                             , data.JTIUA_Masks
	                                             , data.KCMY
	                                             , data.KCMY_Masks
	                                             , data.KCUS
	                                             , data.KCUS_Masks
	                                             , data.KEURIGCA
	                                             , data.KEURIGCA_Masks
	                                             , data.LABATTPLNOPTCA
	                                             , data.LABATTPLNOPTCA_Masks
	                                             , data.LAVAZZAAT
	                                             , data.LAVAZZAAT_Masks
	                                             , data.LAVAZZAAU
	                                             , data.LAVAZZAAU_Masks
	                                             , data.LAVAZZABE
	                                             , data.LAVAZZABE_Masks
	                                             , data.LAVAZZABG
	                                             , data.LAVAZZABG_Masks
	                                             , data.LAVAZZACA
	                                             , data.LAVAZZACA_Masks
	                                             , data.LAVAZZACH
	                                             , data.LAVAZZACH_Masks
	                                             , data.LAVAZZACL
	                                             , data.LAVAZZACL_Masks
	                                             , data.LAVAZZACN
	                                             , data.LAVAZZACN_Masks
	                                             , data.LAVAZZACZ
	                                             , data.LAVAZZACZ_Masks
	                                             , data.LAVAZZADE
	                                             , data.LAVAZZADE_Masks
	                                             , data.LAVAZZADK
	                                             , data.LAVAZZADK_Masks
	                                             , data.LAVAZZAEE
	                                             , data.LAVAZZAEE_Masks
	                                             , data.LAVAZZAES
	                                             , data.LAVAZZAES_Masks
	                                             , data.LAVAZZAFR
	                                             , data.LAVAZZAFR_Masks
	                                             , data.LAVAZZAGR
	                                             , data.LAVAZZAGR_Masks
	                                             , data.LAVAZZAHK
	                                             , data.LAVAZZAHK_Masks
	                                             , data.LAVAZZAHR
	                                             , data.LAVAZZAHR_Masks
	                                             , data.LAVAZZAIL
	                                             , data.LAVAZZAIL_Masks
	                                             , data.LAVAZZAIT
	                                             , data.LAVAZZAIT_Masks
	                                             , data.LAVAZZAJP
	                                             , data.LAVAZZAJP_Masks
	                                             , data.LAVAZZAKR
	                                             , data.LAVAZZAKR_Masks
	                                             , data.LAVAZZALT
	                                             , data.LAVAZZALT_Masks
	                                             , data.LAVAZZALU
	                                             , data.LAVAZZALU_Masks
	                                             , data.LAVAZZALV
	                                             , data.LAVAZZALV_Masks
	                                             , data.LAVAZZAMA
	                                             , data.LAVAZZAMA_Masks
	                                             , data.LAVAZZANL
	                                             , data.LAVAZZANL_Masks
	                                             , data.LAVAZZAPL
	                                             , data.LAVAZZAPL_Masks
	                                             , data.LAVAZZARO
	                                             , data.LAVAZZARO_Masks
	                                             , data.LAVAZZARU
	                                             , data.LAVAZZARU_Masks
	                                             , data.LAVAZZASA
	                                             , data.LAVAZZASA_Masks
	                                             , data.LAVAZZASE
	                                             , data.LAVAZZASE_Masks
	                                             , data.LAVAZZASG
	                                             , data.LAVAZZASG_Masks
	                                             , data.LAVAZZAUAE
	                                             , data.LAVAZZAUAE_Masks
	                                             , data.LAVAZZAUK
	                                             , data.LAVAZZAUK_Masks
	                                             , data.LAVAZZAUS
	                                             , data.LAVAZZAUS_Masks
	                                             , data.LAVAZZAZA
	                                             , data.LAVAZZAZA_Masks
	                                             , data.LRSUK
	                                             , data.LRSUK_Masks
	                                             , data.MARSBR
	                                             , data.MARSBR_Masks
	                                             , data.MARSIN
	                                             , data.MARSIN_Masks
	                                             , data.MARSIN_OLD
	                                             , data.MARSIN_OLD_Masks
	                                             , data.MARSRU_PROD
	                                             , data.MARSRU_PROD_Masks
	                                             , data.MAYORAID
	                                             , data.MAYORAID_Masks
	                                             , data.MJNCN
	                                             , data.MJNCN_Masks
	                                             , data.MOLSONCOOLERHN
	                                             , data.MOLSONCOOLERHN_Masks
	                                             , data.MOLSONCOOLERHR
	                                             , data.MOLSONCOOLERHR_Masks
	                                             , data.MOLSONCOORSUK
	                                             , data.MOLSONCOORSUK_Masks
	                                             , data.NESTLEUK
	                                             , data.NESTLEUK_Masks
	                                             , data.NIVEAUK
	                                             , data.NIVEAUK_Masks
	                                             , data.NRF2017_DEMO
	                                             , data.NRF2017_DEMO_Masks
	                                             , data.ONE_AMERICAS_DEMO
	                                             , data.ONE_AMERICAS_DEMO_Masks
	                                             , data.ONE_APAC_DEMO
	                                             , data.ONE_APAC_DEMO_Masks
	                                             , data.PEPSICOBR
	                                             , data.PEPSICOBR_Masks
	                                             , data.PNGAU
	                                             , data.PNGAU_Masks
	                                             , data.PNGAU_OLD
	                                             , data.PNGAU_OLD_Masks
	                                             , data.PNGCAREUS
	                                             , data.PNGCAREUS_Masks
	                                             , data.PNGCN_PROD
	                                             , data.PNGCN_PROD_Masks
	                                             , data.PNGJP
	                                             , data.PNGJP_Masks
	                                             , data.PNGJP_OLD
	                                             , data.PNGJP_OLD_Masks
	                                             , data.PNGUS
	                                             , data.PNGUS_Masks
	                                             , data.PNGUSEPISODIC
	                                             , data.PNGUSEPISODIC_Masks
	                                             , data.RBUS
	                                             , data.RBUS_Masks
	                                             , data.RE_XSUITE_DEMO
	                                             , data.RE_XSUITE_DEMO_Masks
	                                             , data.REPNGCN_DEMO
	                                             , data.REPNGCN_DEMO_Masks
	                                             , data.RI_DEMO
	                                             , data.RI_DEMO_Masks
	                                             , data.RI_DIAGEOAU
	                                             , data.RI_DIAGEOAU_Masks
	                                             , data.RIALCBEVUK_PROD
	                                             , data.RIALCBEVUK_PROD_Masks
	                                             , data.RICOFFEEUS
	                                             , data.RICOFFEEUS_Masks
	                                             , data.RINIELSENUS
	                                             , data.RINIELSENUS_Masks
	                                             , data.RIPETCAREUK_PROD
	                                             , data.RIPETCAREUK_PROD_Masks
	                                             , data.RIUS
	                                             , data.RIUS_Masks
	                                             , data.RIUS_DEV
	                                             , data.RIUS_DEV_Masks
	                                             , data.RNBDE
	                                             , data.RNBDE_Masks
	                                             , data.SMARTCOOLER_POC2
	                                             , data.SMARTCOOLER_POC2_Masks
	                                             , data.SMARTCOOLER_TRN
	                                             , data.SMARTCOOLER_TRN_Masks
	                                             , data.SMARTCOOLER2_TRN
	                                             , data.SMARTCOOLER2_TRN_Masks
	                                             , data.SOLARBR
	                                             , data.SOLARBR_Masks
	                                             , data.STATIC_CAMERA_DEMO
	                                             , data.STATIC_CAMERA_DEMO_Masks
	                                             , data.SWIRECN
	                                             , data.SWIRECN_Masks
	                                             , data.SWIREREDCN
	                                             , data.SWIREREDCN_Masks
	                                             , data.TNUVAIL
	                                             , data.TNUVAIL_Masks
	                                             , data.TRAXDEMO_TS_PROD
	                                             , data.TRAXDEMO_TS_PROD_Masks
	                                             , data.TWEAU
	                                             , data.TWEAU_Masks
	                                             , data.RI_DEMO2
	                                             , data.RI_DEMO2_Masks
	                                             , data.COMPASSCCH_SAND
	                                             , data.COMPASSCCH_SAND_Masks
	                                             , data.LAVAZZAIT_SAND
	                                             , data.LAVAZZAIT_SAND_Masks
	                                             , data.INBEVUS_STG
	                                             , data.INBEVUS_STG_Masks
	                                             , data.LAVAZZAFR_SAND
	                                             , data.LAVAZZAFR_SAND_Masks
	                                             , data.INBEVBE_SAND2
	                                             , data.INBEVBE_SAND2_Masks
	                                             , data.INBEVLU_SAND2
	                                             , data.INBEVLU_SAND2_Masks
	                                             , data.INBEVNL_SAND2
	                                             , data.INBEVNL_SAND2_Masks
	                                             , data.CreatedDate
	                                             , data.CreatedBy

	                                             , data.ImportedDate
	                                             , data.ImportedYear
	                                             , data.B2BRU
	                                             , data.BRMUS
	                                             , data.CBCIL
	                                             , data.CCCOOLERMX
	                                             , data.DIAGEOAR
	                                             , data.DIAGEOBENELUX
	                                             , data.DIAGEOCH
	                                             , data.DIAGEOGA
	                                             , data.DIAGEOGTR
	                                             , data.DIAGEONORDICS
	                                             , data.DIAGEOUS
	                                             , data.FERREROEXTIT
	                                             , data.GOOGLEHK
	                                             , data.HEINEKENPILOTCN
	                                             , data.IMBO
	                                             , data.INBEVCI
	                                             , data.INBEVCNTT
	                                             , data.INBEVCO
	                                             , data.INBEVZA
	                                             , data.INORU
	                                             , data.JJSP
	                                             , data.JNJES
	                                             , data.JNJUK
	                                             , data.JRIJP
	                                             , data.KELLOGSUSPOC
	                                             , data.KRAFTUS
	                                             , data.MARS_CHOCO_RU
	                                             , data.MHUK
	                                             , data.MILLERCOORS
	                                             , data.MOLSONONTRADEUK
	                                             , data.MYCHEMISTAU
	                                             , data.NESTLEROAMLERUK
	                                             , data.NRF2018
	                                             , data.PENAFLORAR
	                                             , data.PMIUA
	                                             , data.PNGAMERICA
	                                             , data.PNGRO
	                                             , data.RBAU
	                                             , data.RBCA
	                                             , data.RBDK
	                                             , data.RBMANUAL
	                                             , data.RINIELSENRU_MARS
	                                             , data.RINIELSENUSQI
	                                             , data.RIPANELCN
	                                             , data.RISPARKWINEDE
	                                             , data.SANOFIAE
	                                             , data.SANOFIAU
	                                             , data.SANOFIHK
	                                             , data.SANOFIKH
	                                             , data.SANOFINZ
	                                             , data.SANOFIRU
	                                             , data.SANOFITR
	                                             , data.SANOFIUA
	                                             , data.SHUFERSALIL
	                                             , data.SUNTORYJP
	                                             , data.TESCOTH
	                                             , data.TESCOUK
	                                             , data.TRAXROBOT
	                                             , data.XSUITE_SHOWCASE
	                                             , data.ABIUS
	                                             , data.BADGERROBOT
	                                             , data.CUBAU
	                                             , data.DIAGEORU
	                                             , data.GFKFR
	                                             , data.JNJIT
	                                             , data.LIGHTTRAX
	                                             , data.LIGHTTRAXOFFLINE
	                                             , data.RINIELSENFR
	                                             , data.SANOFIKZ
	                                             , data.SANOFILB
	                                             , data.SANOFISA
	                                             , data.SANOFIZA
	                                             , data.WATSONSHK
	                                             , data.KELLOGGUS
                                                  , data.TSINGTAOBEERCN
                                                ));
            return table;
        }


        public int BulkInsertIntoVotes(List<VotesEntity> votes)
        {
            using (var scope = new TransactionScope())
            {
                string connectionString = ConfigurationManager.ConnectionStrings["Client"].ConnectionString;
                var sqlConnection = new SqlConnection(connectionString);
                var sqlBulkCopy = new SqlBulkCopy(sqlConnection)
                {
                    DestinationTableName = "Votes",
                    //BulkCopyTimeout = 6000
                };
                var dataTable = GetDataTableForVote(votes);
                sqlConnection.Open();

                sqlBulkCopy.WriteToServer(dataTable);

                scope.Complete();
                sqlBulkCopy.Close();
                sqlConnection.Close();
                sqlConnection.Dispose();
            }
            return votes.Count;
        }


        private DataTable GetDataTableForVote(List<VotesEntity> votes)
        {
            var table = new DataTable();
            table.Columns.Add("ID", typeof(string));
	        table.Columns.Add("QAT", typeof(string));
	        table.Columns.Add("Center", typeof(string));
	        table.Columns.Add("TotalVotes", typeof(int));
	        table.Columns.Add("AvgsecondsperVotes", typeof(int));
	        table.Columns.Add("ABICA", typeof(int));
	        table.Columns.Add("ABICA_Votes", typeof(int));
	        table.Columns.Add("ABITAMSUS_PROD", typeof(int));
	        table.Columns.Add("ABITAMSUS_PROD_Votes", typeof(int));
	        table.Columns.Add("AMERICAS_DEMO", typeof(int));
	        table.Columns.Add("AMERICAS_DEMO_Votes", typeof(int));
	        table.Columns.Add("BATRU", typeof(int));
	        table.Columns.Add("BATRU_Votes", typeof(int));
	        table.Columns.Add("BIKR", typeof(int));
	        table.Columns.Add("BIKR_Votes", typeof(int));
	        table.Columns.Add("BIMY", typeof(int));
	        table.Columns.Add("BIMY_Votes", typeof(int));
	        table.Columns.Add("BIPH", typeof(int));
	        table.Columns.Add("BIPH_Votes", typeof(int));
	        table.Columns.Add("BISEASK", typeof(int));
	        table.Columns.Add("BISEASK_Votes", typeof(int));
	        table.Columns.Add("BITH", typeof(int));
	        table.Columns.Add("BITH_Votes", typeof(int));
	        table.Columns.Add("BIVN", typeof(int));
	        table.Columns.Add("BIVN_Votes", typeof(int));
	        table.Columns.Add("BPAU", typeof(int));
	        table.Columns.Add("BPAU_Votes", typeof(int));
	        table.Columns.Add("BRODMANN", typeof(int));
	        table.Columns.Add("BRODMANN_Votes", typeof(int));
	        table.Columns.Add("CARREFOURAR", typeof(int));
	        table.Columns.Add("CARREFOURAR_Votes", typeof(int));
	        table.Columns.Add("CCAAU", typeof(int));
	        table.Columns.Add("CCAAU_Votes", typeof(int));
	        table.Columns.Add("CCABIZA", typeof(int));
	        table.Columns.Add("CCABIZA_Votes", typeof(int));
	        table.Columns.Add("CCANZ", typeof(int));
	        table.Columns.Add("CCANZ_Votes", typeof(int));
	        table.Columns.Add("CCBOTTLERSUS", typeof(int));
	        table.Columns.Add("CCBOTTLERSUS_Votes", typeof(int));
	        table.Columns.Add("CCBR_PROD", typeof(int));
	        table.Columns.Add("CCBR_PROD_Votes", typeof(int));
	        table.Columns.Add("CCJP", typeof(int));
	        table.Columns.Add("CCJP_Votes", typeof(int));
	        table.Columns.Add("CCKH", typeof(int));
	        table.Columns.Add("CCKH_Votes", typeof(int));
	        table.Columns.Add("CCKR", typeof(int));
	        table.Columns.Add("CCKR_Votes", typeof(int));
	        table.Columns.Add("CCMY", typeof(int));
	        table.Columns.Add("CCMY_Votes", typeof(int));
	        table.Columns.Add("CCPH", typeof(int));
	        table.Columns.Add("CCPH_Votes", typeof(int));
	        table.Columns.Add("CCRPR_PROD", typeof(int));
	        table.Columns.Add("CCRPR_PROD_Votes", typeof(int));
	        table.Columns.Add("CCRU", typeof(int));
	        table.Columns.Add("CCRU_Votes", typeof(int));
	        table.Columns.Add("CCTH", typeof(int));
	        table.Columns.Add("CCTH_Votes", typeof(int));
	        table.Columns.Add("CCTH_UAT", typeof(int));
	        table.Columns.Add("CCTH_UAT_Votes", typeof(int));
	        table.Columns.Add("CCTRADMX", typeof(int));
	        table.Columns.Add("CCTRADMX_Votes", typeof(int));
	        table.Columns.Add("CCUS", typeof(int));
	        table.Columns.Add("CCUS_Votes", typeof(int));
	        table.Columns.Add("CCZA", typeof(int));
	        table.Columns.Add("CCZA_Votes", typeof(int));
	        table.Columns.Add("CEREBOSTH", typeof(int));
	        table.Columns.Add("CEREBOSTH_Votes", typeof(int));
	        table.Columns.Add("CROWDSOURCE", typeof(int));
	        table.Columns.Add("CROWDSOURCE_Votes", typeof(int));
	        table.Columns.Add("DIAGEOAU", typeof(int));
	        table.Columns.Add("DIAGEOAU_Votes", typeof(int));
	        table.Columns.Add("DIAGEOBR", typeof(int));
	        table.Columns.Add("DIAGEOBR_Votes", typeof(int));
	        table.Columns.Add("DIAGEOGR", typeof(int));
	        table.Columns.Add("DIAGEOGR_Votes", typeof(int));
	        table.Columns.Add("DIAGEOIE", typeof(int));
	        table.Columns.Add("DIAGEOIE_Votes", typeof(int));
	        table.Columns.Add("DIAGEOKE", typeof(int));
	        table.Columns.Add("DIAGEOKE_Votes", typeof(int));
	        table.Columns.Add("DIAGEOMX", typeof(int));
	        table.Columns.Add("DIAGEOMX_Votes", typeof(int));
	        table.Columns.Add("DIAGEOPT", typeof(int));
	        table.Columns.Add("DIAGEOPT_Votes", typeof(int));
	        table.Columns.Add("DIAGEOTW", typeof(int));
	        table.Columns.Add("DIAGEOTW_Votes", typeof(int));
	        table.Columns.Add("DIAGEOUK", typeof(int));
	        table.Columns.Add("DIAGEOUK_Votes", typeof(int));
	        table.Columns.Add("DIAGEOZA", typeof(int));
	        table.Columns.Add("DIAGEOZA_Votes", typeof(int));
	        table.Columns.Add("EMEA_DEMO", typeof(int));
	        table.Columns.Add("EMEA_DEMO_Votes", typeof(int));
	        table.Columns.Add("FERREROIT", typeof(int));
	        table.Columns.Add("FERREROIT_Votes", typeof(int));
	        table.Columns.Add("GILLETTEUS", typeof(int));
	        table.Columns.Add("GILLETTEUS_Votes", typeof(int));
	        table.Columns.Add("GOOGLEUS", typeof(int));
	        table.Columns.Add("GOOGLEUS_Votes", typeof(int));
	        table.Columns.Add("HBCDE", typeof(int));
	        table.Columns.Add("HBCDE_Votes", typeof(int));
	        table.Columns.Add("HEINEKENCN", typeof(int));
	        table.Columns.Add("HEINEKENCN_Votes", typeof(int));
	        table.Columns.Add("HEINEKENUS_PROD", typeof(int));
	        table.Columns.Add("HEINEKENUS_PROD_Votes", typeof(int));
	        table.Columns.Add("HEINZCR", typeof(int));
	        table.Columns.Add("HEINZCR_Votes", typeof(int));
	        table.Columns.Add("INBEVAR", typeof(int));
	        table.Columns.Add("INBEVAR_Votes", typeof(int));
	        table.Columns.Add("INBEVBE", typeof(int));
	        table.Columns.Add("INBEVBE_Votes", typeof(int));
	        table.Columns.Add("INBEVBE_SAND", typeof(int));
	        table.Columns.Add("INBEVBE_SAND_Votes", typeof(int));
	        table.Columns.Add("INBEVBR", typeof(int));
	        table.Columns.Add("INBEVBR_Votes", typeof(int));
	        table.Columns.Add("INBEVBR_ONTRADE", typeof(int));
	        table.Columns.Add("INBEVBR_ONTRADE_Votes", typeof(int));
	        table.Columns.Add("INBEVCL", typeof(int));
	        table.Columns.Add("INBEVCL_Votes", typeof(int));
	        table.Columns.Add("INBEVCN", typeof(int));
	        table.Columns.Add("INBEVCN_Votes", typeof(int));
	        table.Columns.Add("INBEVCOOLERAR", typeof(int));
	        table.Columns.Add("INBEVCOOLERAR_Votes", typeof(int));
	        table.Columns.Add("INBEVCOOLERBR", typeof(int));
	        table.Columns.Add("INBEVCOOLERBR_Votes", typeof(int));
	        table.Columns.Add("INBEVCOOLERUS", typeof(int));
	        table.Columns.Add("INBEVCOOLERUS_Votes", typeof(int));
	        table.Columns.Add("INBEVFR", typeof(int));
	        table.Columns.Add("INBEVFR_Votes", typeof(int));
	        table.Columns.Add("INBEVLU", typeof(int));
	        table.Columns.Add("INBEVLU_Votes", typeof(int));
	        table.Columns.Add("INBEVLU_SAND", typeof(int));
	        table.Columns.Add("INBEVLU_SAND_Votes", typeof(int));
	        table.Columns.Add("INBEVMX", typeof(int));
	        table.Columns.Add("INBEVMX_Votes", typeof(int));
	        table.Columns.Add("INBEVNL", typeof(int));
	        table.Columns.Add("INBEVNL_Votes", typeof(int));
	        table.Columns.Add("INBEVNL_SAND", typeof(int));
	        table.Columns.Add("INBEVNL_SAND_Votes", typeof(int));
	        table.Columns.Add("INBEVPY", typeof(int));
	        table.Columns.Add("INBEVPY_Votes", typeof(int));
	        table.Columns.Add("INBEVTRADMX", typeof(int));
	        table.Columns.Add("INBEVTRADMX_Votes", typeof(int));
	        table.Columns.Add("INBEVUS", typeof(int));
	        table.Columns.Add("INBEVUS_Votes", typeof(int));
	        table.Columns.Add("JTIUA", typeof(int));
	        table.Columns.Add("JTIUA_Votes", typeof(int));
	        table.Columns.Add("KCMY", typeof(int));
	        table.Columns.Add("KCMY_Votes", typeof(int));
	        table.Columns.Add("KCUS", typeof(int));
	        table.Columns.Add("KCUS_Votes", typeof(int));
	        table.Columns.Add("KEURIGCA", typeof(int));
	        table.Columns.Add("KEURIGCA_Votes", typeof(int));
	        table.Columns.Add("LABATTPLNOPTCA", typeof(int));
	        table.Columns.Add("LABATTPLNOPTCA_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAAT", typeof(int));
	        table.Columns.Add("LAVAZZAAT_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAAU", typeof(int));
	        table.Columns.Add("LAVAZZAAU_Votes", typeof(int));
	        table.Columns.Add("LAVAZZABE", typeof(int));
	        table.Columns.Add("LAVAZZABE_Votes", typeof(int));
	        table.Columns.Add("LAVAZZABG", typeof(int));
	        table.Columns.Add("LAVAZZABG_Votes", typeof(int));
	        table.Columns.Add("LAVAZZACA", typeof(int));
	        table.Columns.Add("LAVAZZACA_Votes", typeof(int));
	        table.Columns.Add("LAVAZZACH", typeof(int));
	        table.Columns.Add("LAVAZZACH_Votes", typeof(int));
	        table.Columns.Add("LAVAZZACL", typeof(int));
	        table.Columns.Add("LAVAZZACL_Votes", typeof(int));
	        table.Columns.Add("LAVAZZACN", typeof(int));
	        table.Columns.Add("LAVAZZACN_Votes", typeof(int));
	        table.Columns.Add("LAVAZZACZ", typeof(int));
	        table.Columns.Add("LAVAZZACZ_Votes", typeof(int));
	        table.Columns.Add("LAVAZZADE", typeof(int));
	        table.Columns.Add("LAVAZZADE_Votes", typeof(int));
	        table.Columns.Add("LAVAZZADK", typeof(int));
	        table.Columns.Add("LAVAZZADK_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAEE", typeof(int));
	        table.Columns.Add("LAVAZZAEE_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAES", typeof(int));
	        table.Columns.Add("LAVAZZAES_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAFR", typeof(int));
	        table.Columns.Add("LAVAZZAFR_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAGR", typeof(int));
	        table.Columns.Add("LAVAZZAGR_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAHK", typeof(int));
	        table.Columns.Add("LAVAZZAHK_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAHR", typeof(int));
	        table.Columns.Add("LAVAZZAHR_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAIL", typeof(int));
	        table.Columns.Add("LAVAZZAIL_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAIT", typeof(int));
	        table.Columns.Add("LAVAZZAIT_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAJP", typeof(int));
	        table.Columns.Add("LAVAZZAJP_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAKR", typeof(int));
	        table.Columns.Add("LAVAZZAKR_Votes", typeof(int));
	        table.Columns.Add("LAVAZZALT", typeof(int));
	        table.Columns.Add("LAVAZZALT_Votes", typeof(int));
	        table.Columns.Add("LAVAZZALU", typeof(int));
	        table.Columns.Add("LAVAZZALU_Votes", typeof(int));
	        table.Columns.Add("LAVAZZALV", typeof(int));
	        table.Columns.Add("LAVAZZALV_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAMA", typeof(int));
	        table.Columns.Add("LAVAZZAMA_Votes", typeof(int));
	        table.Columns.Add("LAVAZZANL", typeof(int));
	        table.Columns.Add("LAVAZZANL_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAPL", typeof(int));
	        table.Columns.Add("LAVAZZAPL_Votes", typeof(int));
	        table.Columns.Add("LAVAZZARO", typeof(int));
	        table.Columns.Add("LAVAZZARO_Votes", typeof(int));
	        table.Columns.Add("LAVAZZARU", typeof(int));
	        table.Columns.Add("LAVAZZARU_Votes", typeof(int));
	        table.Columns.Add("LAVAZZASA", typeof(int));
	        table.Columns.Add("LAVAZZASA_Votes", typeof(int));
	        table.Columns.Add("LAVAZZASE", typeof(int));
	        table.Columns.Add("LAVAZZASE_Votes", typeof(int));
	        table.Columns.Add("LAVAZZASG", typeof(int));
	        table.Columns.Add("LAVAZZASG_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAUAE", typeof(int));
	        table.Columns.Add("LAVAZZAUAE_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAUK", typeof(int));
	        table.Columns.Add("LAVAZZAUK_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAUS", typeof(int));
	        table.Columns.Add("LAVAZZAUS_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAZA", typeof(int));
	        table.Columns.Add("LAVAZZAZA_Votes", typeof(int));
	        table.Columns.Add("LRSUK", typeof(int));
	        table.Columns.Add("LRSUK_Votes", typeof(int));
	        table.Columns.Add("MARSBR", typeof(int));
	        table.Columns.Add("MARSBR_Votes", typeof(int));
	        table.Columns.Add("MARSIN", typeof(int));
	        table.Columns.Add("MARSIN_Votes", typeof(int));
	        table.Columns.Add("MARSIN_OLD", typeof(int));
	        table.Columns.Add("MARSIN_OLD_Votes", typeof(int));
	        table.Columns.Add("MARSRU_PROD", typeof(int));
	        table.Columns.Add("MARSRU_PROD_Votes", typeof(int));
	        table.Columns.Add("MAYORAID", typeof(int));
	        table.Columns.Add("MAYORAID_Votes", typeof(int));
	        table.Columns.Add("MJNCN", typeof(int));
	        table.Columns.Add("MJNCN_Votes", typeof(int));
	        table.Columns.Add("MOLSONCOOLERHN", typeof(int));
	        table.Columns.Add("MOLSONCOOLERHN_Votes", typeof(int));
	        table.Columns.Add("MOLSONCOOLERHR", typeof(int));
	        table.Columns.Add("MOLSONCOOLERHR_Votes", typeof(int));
	        table.Columns.Add("MOLSONCOORSUK", typeof(int));
	        table.Columns.Add("MOLSONCOORSUK_Votes", typeof(int));
	        table.Columns.Add("NESTLEUK", typeof(int));
	        table.Columns.Add("NESTLEUK_Votes", typeof(int));
	        table.Columns.Add("NIVEAUK", typeof(int));
	        table.Columns.Add("NIVEAUK_Votes", typeof(int));
	        table.Columns.Add("NRF2017_DEMO", typeof(int));
	        table.Columns.Add("NRF2017_DEMO_Votes", typeof(int));
	        table.Columns.Add("ONE_AMERICAS_DEMO", typeof(int));
	        table.Columns.Add("ONE_AMERICAS_DEMO_Votes", typeof(int));
	        table.Columns.Add("ONE_APAC_DEMO", typeof(int));
	        table.Columns.Add("ONE_APAC_DEMO_Votes", typeof(int));
	        table.Columns.Add("PEPSICOBR", typeof(int));
	        table.Columns.Add("PEPSICOBR_Votes", typeof(int));
	        table.Columns.Add("PNGAU", typeof(int));
	        table.Columns.Add("PNGAU_Votes", typeof(int));
	        table.Columns.Add("PNGAU_OLD", typeof(int));
	        table.Columns.Add("PNGAU_OLD_Votes", typeof(int));
	        table.Columns.Add("PNGCAREUS", typeof(int));
	        table.Columns.Add("PNGCAREUS_Votes", typeof(int));
	        table.Columns.Add("PNGCN_PROD", typeof(int));
	        table.Columns.Add("PNGCN_PROD_Votes", typeof(int));
	        table.Columns.Add("PNGJP", typeof(int));
	        table.Columns.Add("PNGJP_Votes", typeof(int));
	        table.Columns.Add("PNGJP_OLD", typeof(int));
	        table.Columns.Add("PNGJP_OLD_Votes", typeof(int));
	        table.Columns.Add("PNGUS", typeof(int));
	        table.Columns.Add("PNGUS_Votes", typeof(int));
	        table.Columns.Add("PNGUSEPISODIC", typeof(int));
	        table.Columns.Add("PNGUSEPISODIC_Votes", typeof(int));
	        table.Columns.Add("RBUS", typeof(int));
	        table.Columns.Add("RBUS_Votes", typeof(int));
	        table.Columns.Add("RE_XSUITE_DEMO", typeof(int));
	        table.Columns.Add("RE_XSUITE_DEMO_Votes", typeof(int));
	        table.Columns.Add("REPNGCN_DEMO", typeof(int));
	        table.Columns.Add("REPNGCN_DEMO_Votes", typeof(int));
	        table.Columns.Add("RI_DEMO", typeof(int));
	        table.Columns.Add("RI_DEMO_Votes", typeof(int));
	        table.Columns.Add("RI_DIAGEOAU", typeof(int));
	        table.Columns.Add("RI_DIAGEOAU_Votes", typeof(int));
	        table.Columns.Add("RIALCBEVUK_PROD", typeof(int));
	        table.Columns.Add("RIALCBEVUK_PROD_Votes", typeof(int));
	        table.Columns.Add("RICOFFEEUS", typeof(int));
	        table.Columns.Add("RICOFFEEUS_Votes", typeof(int));
	        table.Columns.Add("RINIELSENUS", typeof(int));
	        table.Columns.Add("RINIELSENUS_Votes", typeof(int));
	        table.Columns.Add("RIPETCAREUK_PROD", typeof(int));
	        table.Columns.Add("RIPETCAREUK_PROD_Votes", typeof(int));
	        table.Columns.Add("RIUS", typeof(int));
	        table.Columns.Add("RIUS_Votes", typeof(int));
	        table.Columns.Add("RIUS_DEV", typeof(int));
	        table.Columns.Add("RIUS_DEV_Votes", typeof(int));
	        table.Columns.Add("RNBDE", typeof(int));
	        table.Columns.Add("RNBDE_Votes", typeof(int));
	        table.Columns.Add("SMARTCOOLER_POC2", typeof(int));
	        table.Columns.Add("SMARTCOOLER_POC2_Votes", typeof(int));
	        table.Columns.Add("SMARTCOOLER_TRN", typeof(int));
	        table.Columns.Add("SMARTCOOLER_TRN_Votes", typeof(int));
	        table.Columns.Add("SMARTCOOLER2_TRN", typeof(int));
	        table.Columns.Add("SMARTCOOLER2_TRN_Votes", typeof(int));
	        table.Columns.Add("SOLARBR", typeof(int));
	        table.Columns.Add("SOLARBR_Votes", typeof(int));
	        table.Columns.Add("STATIC_CAMERA_DEMO", typeof(int));
	        table.Columns.Add("STATIC_CAMERA_DEMO_Votes", typeof(int));
	        table.Columns.Add("SWIRECN", typeof(int));
	        table.Columns.Add("SWIRECN_Votes", typeof(int));
	        table.Columns.Add("SWIREREDCN", typeof(int));
	        table.Columns.Add("SWIREREDCN_Votes", typeof(int));
	        table.Columns.Add("TNUVAIL", typeof(int));
	        table.Columns.Add("TNUVAIL_Votes", typeof(int));
	        table.Columns.Add("TRAXDEMO_TS_PROD", typeof(int));
	        table.Columns.Add("TRAXDEMO_TS_PROD_Votes", typeof(int));
	        table.Columns.Add("TWEAU", typeof(int));
	        table.Columns.Add("TWEAU_Votes", typeof(int));
	        table.Columns.Add("RI_DEMO2", typeof(int));
	        table.Columns.Add("RI_DEMO2_Votes", typeof(int));
	        table.Columns.Add("COMPASSCCH_SAND", typeof(int));
	        table.Columns.Add("COMPASSCCH_SAND_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAIT_SAND", typeof(int));
	        table.Columns.Add("LAVAZZAIT_SAND_Votes", typeof(int));
	        table.Columns.Add("INBEVUS_STG", typeof(int));
	        table.Columns.Add("INBEVUS_STG_Votes", typeof(int));
	        table.Columns.Add("LAVAZZAFR_SAND", typeof(int));
	        table.Columns.Add("LAVAZZAFR_SAND_Votes", typeof(int));
	        table.Columns.Add("INBEVBE_SAND2", typeof(int));
	        table.Columns.Add("INBEVBE_SAND2_Votes", typeof(int));
	        table.Columns.Add("INBEVLU_SAND2", typeof(int));
	        table.Columns.Add("INBEVLU_SAND2_Votes", typeof(int));
	        table.Columns.Add("INBEVNL_SAND2", typeof(int));
	        table.Columns.Add("INBEVNL_SAND2_Votes", typeof(int));
	        table.Columns.Add("CreatedDate", typeof(string));
	        table.Columns.Add("CreatedBy", typeof(string));

	        table.Columns.Add("ImportedDate", typeof(string));
	        table.Columns.Add("ImportedYear", typeof(string));
	        table.Columns.Add("B2BRU", typeof(int));
	        table.Columns.Add("BRMUS", typeof(int));
	        table.Columns.Add("CBCIL", typeof(int));
	        table.Columns.Add("CCCOOLERMX", typeof(int));
	        table.Columns.Add("DIAGEOAR", typeof(int));
	        table.Columns.Add("DIAGEOBENELUX", typeof(int));
	        table.Columns.Add("DIAGEOCH", typeof(int));
	        table.Columns.Add("DIAGEOGA", typeof(int));
	        table.Columns.Add("DIAGEOGTR", typeof(int));
	        table.Columns.Add("DIAGEONORDICS", typeof(int));
	        table.Columns.Add("DIAGEOUS", typeof(int));
	        table.Columns.Add("FERREROEXTIT", typeof(int));
	        table.Columns.Add("GOOGLEHK", typeof(int));
	        table.Columns.Add("HEINEKENPILOTCN", typeof(int));
	        table.Columns.Add("IMBO", typeof(int));
	        table.Columns.Add("INBEVCI", typeof(int));
	        table.Columns.Add("INBEVCNTT", typeof(int));
	        table.Columns.Add("INBEVCO", typeof(int));
	        table.Columns.Add("INBEVZA", typeof(int));
	        table.Columns.Add("INORU", typeof(int));
	        table.Columns.Add("JJSP", typeof(int));
	        table.Columns.Add("JNJES", typeof(int));
	        table.Columns.Add("JNJUK", typeof(int));
	        table.Columns.Add("JRIJP", typeof(int));
	        table.Columns.Add("KELLOGSUSPOC", typeof(int));
	        table.Columns.Add("KRAFTUS", typeof(int));
	        table.Columns.Add("MARS_CHOCO_RU", typeof(int));
	        table.Columns.Add("MHUK", typeof(int));
	        table.Columns.Add("MILLERCOORS", typeof(int));
	        table.Columns.Add("MOLSONONTRADEUK", typeof(int));
	        table.Columns.Add("MYCHEMISTAU", typeof(int));
	        table.Columns.Add("NESTLEROAMLERUK", typeof(int));
	        table.Columns.Add("NRF2018", typeof(int));
	        table.Columns.Add("PENAFLORAR", typeof(int));
	        table.Columns.Add("PMIUA", typeof(int));
	        table.Columns.Add("PNGAMERICA", typeof(int));
	        table.Columns.Add("PNGRO", typeof(int));
	        table.Columns.Add("RBAU", typeof(int));
	        table.Columns.Add("RBCA", typeof(int));
	        table.Columns.Add("RBDK", typeof(int));
	        table.Columns.Add("RBMANUAL", typeof(int));
	        table.Columns.Add("RINIELSENRU_MARS", typeof(int));
	        table.Columns.Add("RINIELSENUSQI", typeof(int));
	        table.Columns.Add("RIPANELCN", typeof(int));
	        table.Columns.Add("RISPARKWINEDE", typeof(int));
	        table.Columns.Add("SANOFIAE", typeof(int));
	        table.Columns.Add("SANOFIAU", typeof(int));
	        table.Columns.Add("SANOFIHK", typeof(int));
	        table.Columns.Add("SANOFIKH", typeof(int));
	        table.Columns.Add("SANOFINZ", typeof(int));
	        table.Columns.Add("SANOFIRU", typeof(int));
	        table.Columns.Add("SANOFITR", typeof(int));
	        table.Columns.Add("SANOFIUA", typeof(int));
	        table.Columns.Add("SHUFERSALIL", typeof(int));
	        table.Columns.Add("SUNTORYJP", typeof(int));
	        table.Columns.Add("TESCOTH", typeof(int));
	        table.Columns.Add("TESCOUK", typeof(int));
	        table.Columns.Add("TRAXROBOT", typeof(int));
	        table.Columns.Add("XSUITE_SHOWCASE", typeof(int));
	        table.Columns.Add("ABIUS", typeof(int));
	        table.Columns.Add("BADGERROBOT", typeof(int));
	        table.Columns.Add("CUBAU", typeof(int));
	        table.Columns.Add("DIAGEORU", typeof(int));
	        table.Columns.Add("GFKFR", typeof(int));
	        table.Columns.Add("JNJIT", typeof(int));
	        table.Columns.Add("LIGHTTRAX", typeof(int));
	        table.Columns.Add("LIGHTTRAXOFFLINE", typeof(int));
	        table.Columns.Add("RINIELSENFR", typeof(int));
	        table.Columns.Add("SANOFIKZ", typeof(int));
	        table.Columns.Add("SANOFILB", typeof(int));
	        table.Columns.Add("SANOFISA", typeof(int));
	        table.Columns.Add("SANOFIZA", typeof(int));
	        table.Columns.Add("WATSONSHK", typeof(int));
	        table.Columns.Add("KELLOGGUS", typeof(int));
            table.Columns.Add("TSINGTAOBEERCN", typeof(int));

            // note : the order of the field is very important
            // and should be same as the defined in table structure.
            votes.ForEach(data => table.Rows.Add(
                                                  data.ID
	                                            , data.QAT
	                                            , data.Center
	                                            , data.TotalVotes
	                                            , data.AvgsecondsperVotes
	                                            , data.ABICA
	                                            , data.ABICA_Votes
	                                            , data.ABITAMSUS_PROD
	                                            , data.ABITAMSUS_PROD_Votes
	                                            , data.AMERICAS_DEMO
	                                            , data.AMERICAS_DEMO_Votes
	                                            , data.BATRU
	                                            , data.BATRU_Votes
	                                            , data.BIKR
	                                            , data.BIKR_Votes
	                                            , data.BIMY
	                                            , data.BIMY_Votes
	                                            , data.BIPH
	                                            , data.BIPH_Votes
	                                            , data.BISEASK
	                                            , data.BISEASK_Votes
	                                            , data.BITH
	                                            , data.BITH_Votes
	                                            , data.BIVN
	                                            , data.BIVN_Votes
	                                            , data.BPAU
	                                            , data.BPAU_Votes
	                                            , data.BRODMANN
	                                            , data.BRODMANN_Votes
	                                            , data.CARREFOURAR
	                                            , data.CARREFOURAR_Votes
	                                            , data.CCAAU
	                                            , data.CCAAU_Votes
	                                            , data.CCABIZA
	                                            , data.CCABIZA_Votes
	                                            , data.CCANZ
	                                            , data.CCANZ_Votes
	                                            , data.CCBOTTLERSUS
	                                            , data.CCBOTTLERSUS_Votes
	                                            , data.CCBR_PROD
	                                            , data.CCBR_PROD_Votes
	                                            , data.CCJP
	                                            , data.CCJP_Votes
	                                            , data.CCKH
	                                            , data.CCKH_Votes
	                                            , data.CCKR
	                                            , data.CCKR_Votes
	                                            , data.CCMY
	                                            , data.CCMY_Votes
	                                            , data.CCPH
	                                            , data.CCPH_Votes
	                                            , data.CCRPR_PROD
	                                            , data.CCRPR_PROD_Votes
	                                            , data.CCRU
	                                            , data.CCRU_Votes
	                                            , data.CCTH
	                                            , data.CCTH_Votes
	                                            , data.CCTH_UAT
	                                            , data.CCTH_UAT_Votes
	                                            , data.CCTRADMX
	                                            , data.CCTRADMX_Votes
	                                            , data.CCUS
	                                            , data.CCUS_Votes
	                                            , data.CCZA
	                                            , data.CCZA_Votes
	                                            , data.CEREBOSTH
	                                            , data.CEREBOSTH_Votes
	                                            , data.CROWDSOURCE
	                                            , data.CROWDSOURCE_Votes
	                                            , data.DIAGEOAU
	                                            , data.DIAGEOAU_Votes
	                                            , data.DIAGEOBR
	                                            , data.DIAGEOBR_Votes
	                                            , data.DIAGEOGR
	                                            , data.DIAGEOGR_Votes
	                                            , data.DIAGEOIE
	                                            , data.DIAGEOIE_Votes
	                                            , data.DIAGEOKE
	                                            , data.DIAGEOKE_Votes
	                                            , data.DIAGEOMX
	                                            , data.DIAGEOMX_Votes
	                                            , data.DIAGEOPT
	                                            , data.DIAGEOPT_Votes
	                                            , data.DIAGEOTW
	                                            , data.DIAGEOTW_Votes
	                                            , data.DIAGEOUK
	                                            , data.DIAGEOUK_Votes
	                                            , data.DIAGEOZA
	                                            , data.DIAGEOZA_Votes
	                                            , data.EMEA_DEMO
	                                            , data.EMEA_DEMO_Votes
	                                            , data.FERREROIT
	                                            , data.FERREROIT_Votes
	                                            , data.GILLETTEUS
	                                            , data.GILLETTEUS_Votes
	                                            , data.GOOGLEUS
	                                            , data.GOOGLEUS_Votes
	                                            , data.HBCDE
	                                            , data.HBCDE_Votes
	                                            , data.HEINEKENCN
	                                            , data.HEINEKENCN_Votes
	                                            , data.HEINEKENUS_PROD
	                                            , data.HEINEKENUS_PROD_Votes
	                                            , data.HEINZCR
	                                            , data.HEINZCR_Votes
	                                            , data.INBEVAR
	                                            , data.INBEVAR_Votes
	                                            , data.INBEVBE
	                                            , data.INBEVBE_Votes
	                                            , data.INBEVBE_SAND
	                                            , data.INBEVBE_SAND_Votes
	                                            , data.INBEVBR
	                                            , data.INBEVBR_Votes
	                                            , data.INBEVBR_ONTRADE
	                                            , data.INBEVBR_ONTRADE_Votes
	                                            , data.INBEVCL
	                                            , data.INBEVCL_Votes
	                                            , data.INBEVCN
	                                            , data.INBEVCN_Votes
	                                            , data.INBEVCOOLERAR
	                                            , data.INBEVCOOLERAR_Votes
	                                            , data.INBEVCOOLERBR
	                                            , data.INBEVCOOLERBR_Votes
	                                            , data.INBEVCOOLERUS
	                                            , data.INBEVCOOLERUS_Votes
	                                            , data.INBEVFR
	                                            , data.INBEVFR_Votes
	                                            , data.INBEVLU
	                                            , data.INBEVLU_Votes
	                                            , data.INBEVLU_SAND
	                                            , data.INBEVLU_SAND_Votes
	                                            , data.INBEVMX
	                                            , data.INBEVMX_Votes
	                                            , data.INBEVNL
	                                            , data.INBEVNL_Votes
	                                            , data.INBEVNL_SAND
	                                            , data.INBEVNL_SAND_Votes
	                                            , data.INBEVPY
	                                            , data.INBEVPY_Votes
	                                            , data.INBEVTRADMX
	                                            , data.INBEVTRADMX_Votes
	                                            , data.INBEVUS
	                                            , data.INBEVUS_Votes
	                                            , data.JTIUA
	                                            , data.JTIUA_Votes
	                                            , data.KCMY
	                                            , data.KCMY_Votes
	                                            , data.KCUS
	                                            , data.KCUS_Votes
	                                            , data.KEURIGCA
	                                            , data.KEURIGCA_Votes
	                                            , data.LABATTPLNOPTCA
	                                            , data.LABATTPLNOPTCA_Votes
	                                            , data.LAVAZZAAT
	                                            , data.LAVAZZAAT_Votes
	                                            , data.LAVAZZAAU
	                                            , data.LAVAZZAAU_Votes
	                                            , data.LAVAZZABE
	                                            , data.LAVAZZABE_Votes
	                                            , data.LAVAZZABG
	                                            , data.LAVAZZABG_Votes
	                                            , data.LAVAZZACA
	                                            , data.LAVAZZACA_Votes
	                                            , data.LAVAZZACH
	                                            , data.LAVAZZACH_Votes
	                                            , data.LAVAZZACL
	                                            , data.LAVAZZACL_Votes
	                                            , data.LAVAZZACN
	                                            , data.LAVAZZACN_Votes
	                                            , data.LAVAZZACZ
	                                            , data.LAVAZZACZ_Votes
	                                            , data.LAVAZZADE
	                                            , data.LAVAZZADE_Votes
	                                            , data.LAVAZZADK
	                                            , data.LAVAZZADK_Votes
	                                            , data.LAVAZZAEE
	                                            , data.LAVAZZAEE_Votes
	                                            , data.LAVAZZAES
	                                            , data.LAVAZZAES_Votes
	                                            , data.LAVAZZAFR
	                                            , data.LAVAZZAFR_Votes
	                                            , data.LAVAZZAGR
	                                            , data.LAVAZZAGR_Votes
	                                            , data.LAVAZZAHK
	                                            , data.LAVAZZAHK_Votes
	                                            , data.LAVAZZAHR
	                                            , data.LAVAZZAHR_Votes
	                                            , data.LAVAZZAIL
	                                            , data.LAVAZZAIL_Votes
	                                            , data.LAVAZZAIT
	                                            , data.LAVAZZAIT_Votes
	                                            , data.LAVAZZAJP
	                                            , data.LAVAZZAJP_Votes
	                                            , data.LAVAZZAKR
	                                            , data.LAVAZZAKR_Votes
	                                            , data.LAVAZZALT
	                                            , data.LAVAZZALT_Votes
	                                            , data.LAVAZZALU
	                                            , data.LAVAZZALU_Votes
	                                            , data.LAVAZZALV
	                                            , data.LAVAZZALV_Votes
	                                            , data.LAVAZZAMA
	                                            , data.LAVAZZAMA_Votes
	                                            , data.LAVAZZANL
	                                            , data.LAVAZZANL_Votes
	                                            , data.LAVAZZAPL
	                                            , data.LAVAZZAPL_Votes
	                                            , data.LAVAZZARO
	                                            , data.LAVAZZARO_Votes
	                                            , data.LAVAZZARU
	                                            , data.LAVAZZARU_Votes
	                                            , data.LAVAZZASA
	                                            , data.LAVAZZASA_Votes
	                                            , data.LAVAZZASE
	                                            , data.LAVAZZASE_Votes
	                                            , data.LAVAZZASG
	                                            , data.LAVAZZASG_Votes
	                                            , data.LAVAZZAUAE
	                                            , data.LAVAZZAUAE_Votes
	                                            , data.LAVAZZAUK
	                                            , data.LAVAZZAUK_Votes
	                                            , data.LAVAZZAUS
	                                            , data.LAVAZZAUS_Votes
	                                            , data.LAVAZZAZA
	                                            , data.LAVAZZAZA_Votes
	                                            , data.LRSUK
	                                            , data.LRSUK_Votes
	                                            , data.MARSBR
	                                            , data.MARSBR_Votes
	                                            , data.MARSIN
	                                            , data.MARSIN_Votes
	                                            , data.MARSIN_OLD
	                                            , data.MARSIN_OLD_Votes
	                                            , data.MARSRU_PROD
	                                            , data.MARSRU_PROD_Votes
	                                            , data.MAYORAID
	                                            , data.MAYORAID_Votes
	                                            , data.MJNCN
	                                            , data.MJNCN_Votes
	                                            , data.MOLSONCOOLERHN
	                                            , data.MOLSONCOOLERHN_Votes
	                                            , data.MOLSONCOOLERHR
	                                            , data.MOLSONCOOLERHR_Votes
	                                            , data.MOLSONCOORSUK
	                                            , data.MOLSONCOORSUK_Votes
	                                            , data.NESTLEUK
	                                            , data.NESTLEUK_Votes
	                                            , data.NIVEAUK
	                                            , data.NIVEAUK_Votes
	                                            , data.NRF2017_DEMO
	                                            , data.NRF2017_DEMO_Votes
	                                            , data.ONE_AMERICAS_DEMO
	                                            , data.ONE_AMERICAS_DEMO_Votes
	                                            , data.ONE_APAC_DEMO
	                                            , data.ONE_APAC_DEMO_Votes
	                                            , data.PEPSICOBR
	                                            , data.PEPSICOBR_Votes
	                                            , data.PNGAU
	                                            , data.PNGAU_Votes
	                                            , data.PNGAU_OLD
	                                            , data.PNGAU_OLD_Votes
	                                            , data.PNGCAREUS
	                                            , data.PNGCAREUS_Votes
	                                            , data.PNGCN_PROD
	                                            , data.PNGCN_PROD_Votes
	                                            , data.PNGJP
	                                            , data.PNGJP_Votes
	                                            , data.PNGJP_OLD
	                                            , data.PNGJP_OLD_Votes
	                                            , data.PNGUS
	                                            , data.PNGUS_Votes
	                                            , data.PNGUSEPISODIC
	                                            , data.PNGUSEPISODIC_Votes
	                                            , data.RBUS
	                                            , data.RBUS_Votes
	                                            , data.RE_XSUITE_DEMO
	                                            , data.RE_XSUITE_DEMO_Votes
	                                            , data.REPNGCN_DEMO
	                                            , data.REPNGCN_DEMO_Votes
	                                            , data.RI_DEMO
	                                            , data.RI_DEMO_Votes
	                                            , data.RI_DIAGEOAU
	                                            , data.RI_DIAGEOAU_Votes
	                                            , data.RIALCBEVUK_PROD
	                                            , data.RIALCBEVUK_PROD_Votes
	                                            , data.RICOFFEEUS
	                                            , data.RICOFFEEUS_Votes
	                                            , data.RINIELSENUS
	                                            , data.RINIELSENUS_Votes
	                                            , data.RIPETCAREUK_PROD
	                                            , data.RIPETCAREUK_PROD_Votes
	                                            , data.RIUS
	                                            , data.RIUS_Votes
	                                            , data.RIUS_DEV
	                                            , data.RIUS_DEV_Votes
	                                            , data.RNBDE
	                                            , data.RNBDE_Votes
	                                            , data.SMARTCOOLER_POC2
	                                            , data.SMARTCOOLER_POC2_Votes
	                                            , data.SMARTCOOLER_TRN
	                                            , data.SMARTCOOLER_TRN_Votes
	                                            , data.SMARTCOOLER2_TRN
	                                            , data.SMARTCOOLER2_TRN_Votes
	                                            , data.SOLARBR
	                                            , data.SOLARBR_Votes
	                                            , data.STATIC_CAMERA_DEMO
	                                            , data.STATIC_CAMERA_DEMO_Votes
	                                            , data.SWIRECN
	                                            , data.SWIRECN_Votes
	                                            , data.SWIREREDCN
	                                            , data.SWIREREDCN_Votes
	                                            , data.TNUVAIL
	                                            , data.TNUVAIL_Votes
	                                            , data.TRAXDEMO_TS_PROD
	                                            , data.TRAXDEMO_TS_PROD_Votes
	                                            , data.TWEAU
	                                            , data.TWEAU_Votes
	                                            , data.RI_DEMO2
	                                            , data.RI_DEMO2_Votes
	                                            , data.COMPASSCCH_SAND
	                                            , data.COMPASSCCH_SAND_Votes
	                                            , data.LAVAZZAIT_SAND
	                                            , data.LAVAZZAIT_SAND_Votes
	                                            , data.INBEVUS_STG
	                                            , data.INBEVUS_STG_Votes
	                                            , data.LAVAZZAFR_SAND
	                                            , data.LAVAZZAFR_SAND_Votes
	                                            , data.INBEVBE_SAND2
	                                            , data.INBEVBE_SAND2_Votes
	                                            , data.INBEVLU_SAND2
	                                            , data.INBEVLU_SAND2_Votes
	                                            , data.INBEVNL_SAND2
	                                            , data.INBEVNL_SAND2_Votes
	                                            , data.CreatedDate
	                                            , data.CreatedBy

	                                            , data.ImportedDate
	                                            , data.ImportedYear
	                                            , data.B2BRU
	                                            , data.BRMUS
	                                            , data.CBCIL
	                                            , data.CCCOOLERMX
	                                            , data.DIAGEOAR
	                                            , data.DIAGEOBENELUX
	                                            , data.DIAGEOCH
	                                            , data.DIAGEOGA
	                                            , data.DIAGEOGTR
	                                            , data.DIAGEONORDICS
	                                            , data.DIAGEOUS
	                                            , data.FERREROEXTIT
	                                            , data.GOOGLEHK
	                                            , data.HEINEKENPILOTCN
	                                            , data.IMBO
	                                            , data.INBEVCI
	                                            , data.INBEVCNTT
	                                            , data.INBEVCO
	                                            , data.INBEVZA
	                                            , data.INORU
	                                            , data.JJSP
	                                            , data.JNJES
	                                            , data.JNJUK
	                                            , data.JRIJP
	                                            , data.KELLOGSUSPOC
	                                            , data.KRAFTUS
	                                            , data.MARS_CHOCO_RU
	                                            , data.MHUK
	                                            , data.MILLERCOORS
	                                            , data.MOLSONONTRADEUK
	                                            , data.MYCHEMISTAU
	                                            , data.NESTLEROAMLERUK
	                                            , data.NRF2018
	                                            , data.PENAFLORAR
	                                            , data.PMIUA
	                                            , data.PNGAMERICA
	                                            , data.PNGRO
	                                            , data.RBAU
	                                            , data.RBCA
	                                            , data.RBDK
	                                            , data.RBMANUAL
	                                            , data.RINIELSENRU_MARS
	                                            , data.RINIELSENUSQI
	                                            , data.RIPANELCN
	                                            , data.RISPARKWINEDE
	                                            , data.SANOFIAE
	                                            , data.SANOFIAU
	                                            , data.SANOFIHK
	                                            , data.SANOFIKH
	                                            , data.SANOFINZ
	                                            , data.SANOFIRU
	                                            , data.SANOFITR
	                                            , data.SANOFIUA
	                                            , data.SHUFERSALIL
	                                            , data.SUNTORYJP
	                                            , data.TESCOTH
	                                            , data.TESCOUK
	                                            , data.TRAXROBOT
	                                            , data.XSUITE_SHOWCASE
	                                            , data.ABIUS
	                                            , data.BADGERROBOT
	                                            , data.CUBAU
	                                            , data.DIAGEORU
	                                            , data.GFKFR
	                                            , data.JNJIT
	                                            , data.LIGHTTRAX
	                                            , data.LIGHTTRAXOFFLINE
	                                            , data.RINIELSENFR
	                                            , data.SANOFIKZ
	                                            , data.SANOFILB
	                                            , data.SANOFISA
	                                            , data.SANOFIZA
	                                            , data.WATSONSHK
	                                            , data.KELLOGGUS
                                                 , data.TSINGTAOBEERCN
                                                ));
            return table;
        }


        public int BulkInsertIntoRepricing(List<RepricingEntity> repricing)
        {
            using (var scope = new TransactionScope())
            {
                string connectionString = ConfigurationManager.ConnectionStrings["Client"].ConnectionString;
                var sqlConnection = new SqlConnection(connectionString);
                var sqlBulkCopy = new SqlBulkCopy(sqlConnection)
                {
                    DestinationTableName = "Repricing",
                    //BulkCopyTimeout = 6000
                };
                var dataTable = GetDataTableForRepricing(repricing);
                sqlConnection.Open();

                sqlBulkCopy.WriteToServer(dataTable);

                scope.Complete();
                sqlBulkCopy.Close();
                sqlConnection.Close();
                sqlConnection.Dispose();
            }
            return repricing.Count;
        }


        private DataTable GetDataTableForRepricing(List<RepricingEntity> repricing)
        {
            var table = new DataTable();
            table.Columns.Add("ID", typeof(string));
            table.Columns.Add("QAT", typeof(string));
            table.Columns.Add("Center", typeof(string));
            table.Columns.Add("TotalRepricing", typeof(int));
            table.Columns.Add("AvgsecondsperRepricing", typeof(int));
            table.Columns.Add("ABICA", typeof(int));
            table.Columns.Add("ABICA_Repricing", typeof(int));
            table.Columns.Add("ABITAMSUS_PROD", typeof(int));
            table.Columns.Add("ABITAMSUS_PROD_Repricing", typeof(int));
            table.Columns.Add("AMERICAS_DEMO", typeof(int));
            table.Columns.Add("AMERICAS_DEMO_Repricing", typeof(int));
            table.Columns.Add("BATRU", typeof(int));
            table.Columns.Add("BATRU_Repricing", typeof(int));
            table.Columns.Add("BIKR", typeof(int));
            table.Columns.Add("BIKR_Repricing", typeof(int));
            table.Columns.Add("BIMY", typeof(int));
            table.Columns.Add("BIMY_Repricing", typeof(int));
            table.Columns.Add("BIPH", typeof(int));
            table.Columns.Add("BIPH_Repricing", typeof(int));
            table.Columns.Add("BISEASK", typeof(int));
            table.Columns.Add("BISEASK_Repricing", typeof(int));
            table.Columns.Add("BITH", typeof(int));
            table.Columns.Add("BITH_Repricing", typeof(int));
            table.Columns.Add("BIVN", typeof(int));
            table.Columns.Add("BIVN_Repricing", typeof(int));
            table.Columns.Add("BPAU", typeof(int));
            table.Columns.Add("BPAU_Repricing", typeof(int));
            table.Columns.Add("BRODMANN", typeof(int));
            table.Columns.Add("BRODMANN_Repricing", typeof(int));
            table.Columns.Add("CARREFOURAR", typeof(int));
            table.Columns.Add("CARREFOURAR_Repricing", typeof(int));
            table.Columns.Add("CCAAU", typeof(int));
            table.Columns.Add("CCAAU_Repricing", typeof(int));
            table.Columns.Add("CCABIZA", typeof(int));
            table.Columns.Add("CCABIZA_Repricing", typeof(int));
            table.Columns.Add("CCANZ", typeof(int));
            table.Columns.Add("CCANZ_Repricing", typeof(int));
            table.Columns.Add("CCBOTTLERSUS", typeof(int));
            table.Columns.Add("CCBOTTLERSUS_Repricing", typeof(int));
            table.Columns.Add("CCBR_PROD", typeof(int));
            table.Columns.Add("CCBR_PROD_Repricing", typeof(int));
            table.Columns.Add("CCJP", typeof(int));
            table.Columns.Add("CCJP_Repricing", typeof(int));
            table.Columns.Add("CCKH", typeof(int));
            table.Columns.Add("CCKH_Repricing", typeof(int));
            table.Columns.Add("CCKR", typeof(int));
            table.Columns.Add("CCKR_Repricing", typeof(int));
            table.Columns.Add("CCMY", typeof(int));
            table.Columns.Add("CCMY_Repricing", typeof(int));
            table.Columns.Add("CCPH", typeof(int));
            table.Columns.Add("CCPH_Repricing", typeof(int));
            table.Columns.Add("CCRPR_PROD", typeof(int));
            table.Columns.Add("CCRPR_PROD_Repricing", typeof(int));
            table.Columns.Add("CCRU", typeof(int));
            table.Columns.Add("CCRU_Repricing", typeof(int));
            table.Columns.Add("CCTH", typeof(int));
            table.Columns.Add("CCTH_Repricing", typeof(int));
            table.Columns.Add("CCTH_UAT", typeof(int));
            table.Columns.Add("CCTH_UAT_Repricing", typeof(int));
            table.Columns.Add("CCTRADMX", typeof(int));
            table.Columns.Add("CCTRADMX_Repricing", typeof(int));
            table.Columns.Add("CCUS", typeof(int));
            table.Columns.Add("CCUS_Repricing", typeof(int));
            table.Columns.Add("CCZA", typeof(int));
            table.Columns.Add("CCZA_Repricing", typeof(int));
            table.Columns.Add("CEREBOSTH", typeof(int));
            table.Columns.Add("CEREBOSTH_Repricing", typeof(int));
            table.Columns.Add("CROWDSOURCE", typeof(int));
            table.Columns.Add("CROWDSOURCE_Repricing", typeof(int));
            table.Columns.Add("DIAGEOAU", typeof(int));
            table.Columns.Add("DIAGEOAU_Repricing", typeof(int));
            table.Columns.Add("DIAGEOBR", typeof(int));
            table.Columns.Add("DIAGEOBR_Repricing", typeof(int));
            table.Columns.Add("DIAGEOGR", typeof(int));
            table.Columns.Add("DIAGEOGR_Repricing", typeof(int));
            table.Columns.Add("DIAGEOIE", typeof(int));
            table.Columns.Add("DIAGEOIE_Repricing", typeof(int));
            table.Columns.Add("DIAGEOKE", typeof(int));
            table.Columns.Add("DIAGEOKE_Repricing", typeof(int));
            table.Columns.Add("DIAGEOMX", typeof(int));
            table.Columns.Add("DIAGEOMX_Repricing", typeof(int));
            table.Columns.Add("DIAGEOPT", typeof(int));
            table.Columns.Add("DIAGEOPT_Repricing", typeof(int));
            table.Columns.Add("DIAGEOTW", typeof(int));
            table.Columns.Add("DIAGEOTW_Repricing", typeof(int));
            table.Columns.Add("DIAGEOUK", typeof(int));
            table.Columns.Add("DIAGEOUK_Repricing", typeof(int));
            table.Columns.Add("DIAGEOZA", typeof(int));
            table.Columns.Add("DIAGEOZA_Repricing", typeof(int));
            table.Columns.Add("EMEA_DEMO", typeof(int));
            table.Columns.Add("EMEA_DEMO_Repricing", typeof(int));
            table.Columns.Add("FERREROIT", typeof(int));
            table.Columns.Add("FERREROIT_Repricing", typeof(int));
            table.Columns.Add("GILLETTEUS", typeof(int));
            table.Columns.Add("GILLETTEUS_Repricing", typeof(int));
            table.Columns.Add("GOOGLEUS", typeof(int));
            table.Columns.Add("GOOGLEUS_Repricing", typeof(int));
            table.Columns.Add("HBCDE", typeof(int));
            table.Columns.Add("HBCDE_Repricing", typeof(int));
            table.Columns.Add("HEINEKENCN", typeof(int));
            table.Columns.Add("HEINEKENCN_Repricing", typeof(int));
            table.Columns.Add("HEINEKENUS_PROD", typeof(int));
            table.Columns.Add("HEINEKENUS_PROD_Repricing", typeof(int));
            table.Columns.Add("HEINZCR", typeof(int));
            table.Columns.Add("HEINZCR_Repricing", typeof(int));
            table.Columns.Add("INBEVAR", typeof(int));
            table.Columns.Add("INBEVAR_Repricing", typeof(int));
            table.Columns.Add("INBEVBE", typeof(int));
            table.Columns.Add("INBEVBE_Repricing", typeof(int));
            table.Columns.Add("INBEVBE_SAND", typeof(int));
            table.Columns.Add("INBEVBE_SAND_Repricing", typeof(int));
            table.Columns.Add("INBEVBR", typeof(int));
            table.Columns.Add("INBEVBR_Repricing", typeof(int));
            table.Columns.Add("INBEVBR_ONTRADE", typeof(int));
            table.Columns.Add("INBEVBR_ONTRADE_Repricing", typeof(int));
            table.Columns.Add("INBEVCL", typeof(int));
            table.Columns.Add("INBEVCL_Repricing", typeof(int));
            table.Columns.Add("INBEVCN", typeof(int));
            table.Columns.Add("INBEVCN_Repricing", typeof(int));
            table.Columns.Add("INBEVCOOLERAR", typeof(int));
            table.Columns.Add("INBEVCOOLERAR_Repricing", typeof(int));
            table.Columns.Add("INBEVCOOLERBR", typeof(int));
            table.Columns.Add("INBEVCOOLERBR_Repricing", typeof(int));
            table.Columns.Add("INBEVCOOLERUS", typeof(int));
            table.Columns.Add("INBEVCOOLERUS_Repricing", typeof(int));
            table.Columns.Add("INBEVFR", typeof(int));
            table.Columns.Add("INBEVFR_Repricing", typeof(int));
            table.Columns.Add("INBEVLU", typeof(int));
            table.Columns.Add("INBEVLU_Repricing", typeof(int));
            table.Columns.Add("INBEVLU_SAND", typeof(int));
            table.Columns.Add("INBEVLU_SAND_Repricing", typeof(int));
            table.Columns.Add("INBEVMX", typeof(int));
            table.Columns.Add("INBEVMX_Repricing", typeof(int));
            table.Columns.Add("INBEVNL", typeof(int));
            table.Columns.Add("INBEVNL_Repricing", typeof(int));
            table.Columns.Add("INBEVNL_SAND", typeof(int));
            table.Columns.Add("INBEVNL_SAND_Repricing", typeof(int));
            table.Columns.Add("INBEVPY", typeof(int));
            table.Columns.Add("INBEVPY_Repricing", typeof(int));
            table.Columns.Add("INBEVTRADMX", typeof(int));
            table.Columns.Add("INBEVTRADMX_Repricing", typeof(int));
            table.Columns.Add("INBEVUS", typeof(int));
            table.Columns.Add("INBEVUS_Repricing", typeof(int));
            table.Columns.Add("JTIUA", typeof(int));
            table.Columns.Add("JTIUA_Repricing", typeof(int));
            table.Columns.Add("KCMY", typeof(int));
            table.Columns.Add("KCMY_Repricing", typeof(int));
            table.Columns.Add("KCUS", typeof(int));
            table.Columns.Add("KCUS_Repricing", typeof(int));
            table.Columns.Add("KEURIGCA", typeof(int));
            table.Columns.Add("KEURIGCA_Repricing", typeof(int));
            table.Columns.Add("LABATTPLNOPTCA", typeof(int));
            table.Columns.Add("LABATTPLNOPTCA_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAAT", typeof(int));
            table.Columns.Add("LAVAZZAAT_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAAU", typeof(int));
            table.Columns.Add("LAVAZZAAU_Repricing", typeof(int));
            table.Columns.Add("LAVAZZABE", typeof(int));
            table.Columns.Add("LAVAZZABE_Repricing", typeof(int));
            table.Columns.Add("LAVAZZABG", typeof(int));
            table.Columns.Add("LAVAZZABG_Repricing", typeof(int));
            table.Columns.Add("LAVAZZACA", typeof(int));
            table.Columns.Add("LAVAZZACA_Repricing", typeof(int));
            table.Columns.Add("LAVAZZACH", typeof(int));
            table.Columns.Add("LAVAZZACH_Repricing", typeof(int));
            table.Columns.Add("LAVAZZACL", typeof(int));
            table.Columns.Add("LAVAZZACL_Repricing", typeof(int));
            table.Columns.Add("LAVAZZACN", typeof(int));
            table.Columns.Add("LAVAZZACN_Repricing", typeof(int));
            table.Columns.Add("LAVAZZACZ", typeof(int));
            table.Columns.Add("LAVAZZACZ_Repricing", typeof(int));
            table.Columns.Add("LAVAZZADE", typeof(int));
            table.Columns.Add("LAVAZZADE_Repricing", typeof(int));
            table.Columns.Add("LAVAZZADK", typeof(int));
            table.Columns.Add("LAVAZZADK_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAEE", typeof(int));
            table.Columns.Add("LAVAZZAEE_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAES", typeof(int));
            table.Columns.Add("LAVAZZAES_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAFR", typeof(int));
            table.Columns.Add("LAVAZZAFR_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAGR", typeof(int));
            table.Columns.Add("LAVAZZAGR_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAHK", typeof(int));
            table.Columns.Add("LAVAZZAHK_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAHR", typeof(int));
            table.Columns.Add("LAVAZZAHR_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAIL", typeof(int));
            table.Columns.Add("LAVAZZAIL_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAIT", typeof(int));
            table.Columns.Add("LAVAZZAIT_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAJP", typeof(int));
            table.Columns.Add("LAVAZZAJP_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAKR", typeof(int));
            table.Columns.Add("LAVAZZAKR_Repricing", typeof(int));
            table.Columns.Add("LAVAZZALT", typeof(int));
            table.Columns.Add("LAVAZZALT_Repricing", typeof(int));
            table.Columns.Add("LAVAZZALU", typeof(int));
            table.Columns.Add("LAVAZZALU_Repricing", typeof(int));
            table.Columns.Add("LAVAZZALV", typeof(int));
            table.Columns.Add("LAVAZZALV_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAMA", typeof(int));
            table.Columns.Add("LAVAZZAMA_Repricing", typeof(int));
            table.Columns.Add("LAVAZZANL", typeof(int));
            table.Columns.Add("LAVAZZANL_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAPL", typeof(int));
            table.Columns.Add("LAVAZZAPL_Repricing", typeof(int));
            table.Columns.Add("LAVAZZARO", typeof(int));
            table.Columns.Add("LAVAZZARO_Repricing", typeof(int));
            table.Columns.Add("LAVAZZARU", typeof(int));
            table.Columns.Add("LAVAZZARU_Repricing", typeof(int));
            table.Columns.Add("LAVAZZASA", typeof(int));
            table.Columns.Add("LAVAZZASA_Repricing", typeof(int));
            table.Columns.Add("LAVAZZASE", typeof(int));
            table.Columns.Add("LAVAZZASE_Repricing", typeof(int));
            table.Columns.Add("LAVAZZASG", typeof(int));
            table.Columns.Add("LAVAZZASG_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAUAE", typeof(int));
            table.Columns.Add("LAVAZZAUAE_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAUK", typeof(int));
            table.Columns.Add("LAVAZZAUK_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAUS", typeof(int));
            table.Columns.Add("LAVAZZAUS_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAZA", typeof(int));
            table.Columns.Add("LAVAZZAZA_Repricing", typeof(int));
            table.Columns.Add("LRSUK", typeof(int));
            table.Columns.Add("LRSUK_Repricing", typeof(int));
            table.Columns.Add("MARSBR", typeof(int));
            table.Columns.Add("MARSBR_Repricing", typeof(int));
            table.Columns.Add("MARSIN", typeof(int));
            table.Columns.Add("MARSIN_Repricing", typeof(int));
            table.Columns.Add("MARSIN_OLD", typeof(int));
            table.Columns.Add("MARSIN_OLD_Repricing", typeof(int));
            table.Columns.Add("MARSRU_PROD", typeof(int));
            table.Columns.Add("MARSRU_PROD_Repricing", typeof(int));
            table.Columns.Add("MAYORAID", typeof(int));
            table.Columns.Add("MAYORAID_Repricing", typeof(int));
            table.Columns.Add("MJNCN", typeof(int));
            table.Columns.Add("MJNCN_Repricing", typeof(int));
            table.Columns.Add("MOLSONCOOLERHN", typeof(int));
            table.Columns.Add("MOLSONCOOLERHN_Repricing", typeof(int));
            table.Columns.Add("MOLSONCOOLERHR", typeof(int));
            table.Columns.Add("MOLSONCOOLERHR_Repricing", typeof(int));
            table.Columns.Add("MOLSONCOORSUK", typeof(int));
            table.Columns.Add("MOLSONCOORSUK_Repricing", typeof(int));
            table.Columns.Add("NESTLEUK", typeof(int));
            table.Columns.Add("NESTLEUK_Repricing", typeof(int));
            table.Columns.Add("NIVEAUK", typeof(int));
            table.Columns.Add("NIVEAUK_Repricing", typeof(int));
            table.Columns.Add("NRF2017_DEMO", typeof(int));
            table.Columns.Add("NRF2017_DEMO_Repricing", typeof(int));
            table.Columns.Add("ONE_AMERICAS_DEMO", typeof(int));
            table.Columns.Add("ONE_AMERICAS_DEMO_Repricing", typeof(int));
            table.Columns.Add("ONE_APAC_DEMO", typeof(int));
            table.Columns.Add("ONE_APAC_DEMO_Repricing", typeof(int));
            table.Columns.Add("PEPSICOBR", typeof(int));
            table.Columns.Add("PEPSICOBR_Repricing", typeof(int));
            table.Columns.Add("PNGAU", typeof(int));
            table.Columns.Add("PNGAU_Repricing", typeof(int));
            table.Columns.Add("PNGAU_OLD", typeof(int));
            table.Columns.Add("PNGAU_OLD_Repricing", typeof(int));
            table.Columns.Add("PNGCAREUS", typeof(int));
            table.Columns.Add("PNGCAREUS_Repricing", typeof(int));
            table.Columns.Add("PNGCN_PROD", typeof(int));
            table.Columns.Add("PNGCN_PROD_Repricing", typeof(int));
            table.Columns.Add("PNGJP", typeof(int));
            table.Columns.Add("PNGJP_Repricing", typeof(int));
            table.Columns.Add("PNGJP_OLD", typeof(int));
            table.Columns.Add("PNGJP_OLD_Repricing", typeof(int));
            table.Columns.Add("PNGUS", typeof(int));
            table.Columns.Add("PNGUS_Repricing", typeof(int));
            table.Columns.Add("PNGUSEPISODIC", typeof(int));
            table.Columns.Add("PNGUSEPISODIC_Repricing", typeof(int));
            table.Columns.Add("RBUS", typeof(int));
            table.Columns.Add("RBUS_Repricing", typeof(int));
            table.Columns.Add("RE_XSUITE_DEMO", typeof(int));
            table.Columns.Add("RE_XSUITE_DEMO_Repricing", typeof(int));
            table.Columns.Add("REPNGCN_DEMO", typeof(int));
            table.Columns.Add("REPNGCN_DEMO_Repricing", typeof(int));
            table.Columns.Add("RI_DEMO", typeof(int));
            table.Columns.Add("RI_DEMO_Repricing", typeof(int));
            table.Columns.Add("RI_DIAGEOAU", typeof(int));
            table.Columns.Add("RI_DIAGEOAU_Repricing", typeof(int));
            table.Columns.Add("RIALCBEVUK_PROD", typeof(int));
            table.Columns.Add("RIALCBEVUK_PROD_Repricing", typeof(int));
            table.Columns.Add("RICOFFEEUS", typeof(int));
            table.Columns.Add("RICOFFEEUS_Repricing", typeof(int));
            table.Columns.Add("RINIELSENUS", typeof(int));
            table.Columns.Add("RINIELSENUS_Repricing", typeof(int));
            table.Columns.Add("RIPETCAREUK_PROD", typeof(int));
            table.Columns.Add("RIPETCAREUK_PROD_Repricing", typeof(int));
            table.Columns.Add("RIUS", typeof(int));
            table.Columns.Add("RIUS_Repricing", typeof(int));
            table.Columns.Add("RIUS_DEV", typeof(int));
            table.Columns.Add("RIUS_DEV_Repricing", typeof(int));
            table.Columns.Add("RNBDE", typeof(int));
            table.Columns.Add("RNBDE_Repricing", typeof(int));
            table.Columns.Add("SMARTCOOLER_POC2", typeof(int));
            table.Columns.Add("SMARTCOOLER_POC2_Repricing", typeof(int));
            table.Columns.Add("SMARTCOOLER_TRN", typeof(int));
            table.Columns.Add("SMARTCOOLER_TRN_Repricing", typeof(int));
            table.Columns.Add("SMARTCOOLER2_TRN", typeof(int));
            table.Columns.Add("SMARTCOOLER2_TRN_Repricing", typeof(int));
            table.Columns.Add("SOLARBR", typeof(int));
            table.Columns.Add("SOLARBR_Repricing", typeof(int));
            table.Columns.Add("STATIC_CAMERA_DEMO", typeof(int));
            table.Columns.Add("STATIC_CAMERA_DEMO_Repricing", typeof(int));
            table.Columns.Add("SWIRECN", typeof(int));
            table.Columns.Add("SWIRECN_Repricing", typeof(int));
            table.Columns.Add("SWIREREDCN", typeof(int));
            table.Columns.Add("SWIREREDCN_Repricing", typeof(int));
            table.Columns.Add("TNUVAIL", typeof(int));
            table.Columns.Add("TNUVAIL_Repricing", typeof(int));
            table.Columns.Add("TRAXDEMO_TS_PROD", typeof(int));
            table.Columns.Add("TRAXDEMO_TS_PROD_Repricing", typeof(int));
            table.Columns.Add("TWEAU", typeof(int));
            table.Columns.Add("TWEAU_Repricing", typeof(int));
            table.Columns.Add("RI_DEMO2", typeof(int));
            table.Columns.Add("RI_DEMO2_Repricing", typeof(int));
            table.Columns.Add("COMPASSCCH_SAND", typeof(int));
            table.Columns.Add("COMPASSCCH_SAND_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAIT_SAND", typeof(int));
            table.Columns.Add("LAVAZZAIT_SAND_Repricing", typeof(int));
            table.Columns.Add("INBEVUS_STG", typeof(int));
            table.Columns.Add("INBEVUS_STG_Repricing", typeof(int));
            table.Columns.Add("LAVAZZAFR_SAND", typeof(int));
            table.Columns.Add("LAVAZZAFR_SAND_Repricing", typeof(int));
            table.Columns.Add("INBEVBE_SAND2", typeof(int));
            table.Columns.Add("INBEVBE_SAND2_Repricing", typeof(int));
            table.Columns.Add("INBEVLU_SAND2", typeof(int));
            table.Columns.Add("INBEVLU_SAND2_Repricing", typeof(int));
            table.Columns.Add("INBEVNL_SAND2", typeof(int));
            table.Columns.Add("INBEVNL_SAND2_Repricing", typeof(int));
            table.Columns.Add("CreatedDate", typeof(string));
            table.Columns.Add("CreatedBy", typeof(string));

            table.Columns.Add("ImportedDate", typeof(string));
            table.Columns.Add("ImportedYear", typeof(string));
            table.Columns.Add("B2BRU", typeof(int));
            table.Columns.Add("BRMUS", typeof(int));
            table.Columns.Add("CBCIL", typeof(int));
            table.Columns.Add("CCCOOLERMX", typeof(int));
            table.Columns.Add("DIAGEOAR", typeof(int));
            table.Columns.Add("DIAGEOBENELUX", typeof(int));
            table.Columns.Add("DIAGEOCH", typeof(int));
            table.Columns.Add("DIAGEOGA", typeof(int));
            table.Columns.Add("DIAGEOGTR", typeof(int));
            table.Columns.Add("DIAGEONORDICS", typeof(int));
            table.Columns.Add("DIAGEOUS", typeof(int));
            table.Columns.Add("FERREROEXTIT", typeof(int));
            table.Columns.Add("GOOGLEHK", typeof(int));
            table.Columns.Add("HEINEKENPILOTCN", typeof(int));
            table.Columns.Add("IMBO", typeof(int));
            table.Columns.Add("INBEVCI", typeof(int));
            table.Columns.Add("INBEVCNTT", typeof(int));
            table.Columns.Add("INBEVCO", typeof(int));
            table.Columns.Add("INBEVZA", typeof(int));
            table.Columns.Add("INORU", typeof(int));
            table.Columns.Add("JJSP", typeof(int));
            table.Columns.Add("JNJES", typeof(int));
            table.Columns.Add("JNJUK", typeof(int));
            table.Columns.Add("JRIJP", typeof(int));
            table.Columns.Add("KELLOGSUSPOC", typeof(int));
            table.Columns.Add("KRAFTUS", typeof(int));
            table.Columns.Add("MARS_CHOCO_RU", typeof(int));
            table.Columns.Add("MHUK", typeof(int));
            table.Columns.Add("MILLERCOORS", typeof(int));
            table.Columns.Add("MOLSONONTRADEUK", typeof(int));
            table.Columns.Add("MYCHEMISTAU", typeof(int));
            table.Columns.Add("NESTLEROAMLERUK", typeof(int));
            table.Columns.Add("NRF2018", typeof(int));
            table.Columns.Add("PENAFLORAR", typeof(int));
            table.Columns.Add("PMIUA", typeof(int));
            table.Columns.Add("PNGAMERICA", typeof(int));
            table.Columns.Add("PNGRO", typeof(int));
            table.Columns.Add("RBAU", typeof(int));
            table.Columns.Add("RBCA", typeof(int));
            table.Columns.Add("RBDK", typeof(int));
            table.Columns.Add("RBMANUAL", typeof(int));
            table.Columns.Add("RINIELSENRU_MARS", typeof(int));
            table.Columns.Add("RINIELSENUSQI", typeof(int));
            table.Columns.Add("RIPANELCN", typeof(int));
            table.Columns.Add("RISPARKWINEDE", typeof(int));
            table.Columns.Add("SANOFIAE", typeof(int));
            table.Columns.Add("SANOFIAU", typeof(int));
            table.Columns.Add("SANOFIHK", typeof(int));
            table.Columns.Add("SANOFIKH", typeof(int));
            table.Columns.Add("SANOFINZ", typeof(int));
            table.Columns.Add("SANOFIRU", typeof(int));
            table.Columns.Add("SANOFITR", typeof(int));
            table.Columns.Add("SANOFIUA", typeof(int));
            table.Columns.Add("SHUFERSALIL", typeof(int));
            table.Columns.Add("SUNTORYJP", typeof(int));
            table.Columns.Add("TESCOTH", typeof(int));
            table.Columns.Add("TESCOUK", typeof(int));
            table.Columns.Add("TRAXROBOT", typeof(int));
            table.Columns.Add("XSUITE_SHOWCASE", typeof(int));
            table.Columns.Add("ABIUS", typeof(int));
            table.Columns.Add("BADGERROBOT", typeof(int));
            table.Columns.Add("CUBAU", typeof(int));
            table.Columns.Add("DIAGEORU", typeof(int));
            table.Columns.Add("GFKFR", typeof(int));
            table.Columns.Add("JNJIT", typeof(int));
            table.Columns.Add("LIGHTTRAX", typeof(int));
            table.Columns.Add("LIGHTTRAXOFFLINE", typeof(int));
            table.Columns.Add("RINIELSENFR", typeof(int));
            table.Columns.Add("SANOFIKZ", typeof(int));
            table.Columns.Add("SANOFILB", typeof(int));
            table.Columns.Add("SANOFISA", typeof(int));
            table.Columns.Add("SANOFIZA", typeof(int));
            table.Columns.Add("WATSONSHK", typeof(int));
            table.Columns.Add("KELLOGGUS", typeof(int));
            table.Columns.Add("TSINGTAOBEERCN", typeof(int));

            // note : the order of the field is very important
            // and should be same as the defined in table structure.
            repricing.ForEach(data => table.Rows.Add(
                                                 data.ID
                                                , data.QAT
                                                , data.Center
                                                , data.TotalRepricing
                                                , data.AvgsecondsperRepricing
                                                , data.ABICA
                                                , data.ABICA_Repricing
                                                , data.ABITAMSUS_PROD
                                                , data.ABITAMSUS_PROD_Repricing
                                                , data.AMERICAS_DEMO
                                                , data.AMERICAS_DEMO_Repricing
                                                , data.BATRU
                                                , data.BATRU_Repricing
                                                , data.BIKR
                                                , data.BIKR_Repricing
                                                , data.BIMY
                                                , data.BIMY_Repricing
                                                , data.BIPH
                                                , data.BIPH_Repricing
                                                , data.BISEASK
                                                , data.BISEASK_Repricing
                                                , data.BITH
                                                , data.BITH_Repricing
                                                , data.BIVN
                                                , data.BIVN_Repricing
                                                , data.BPAU
                                                , data.BPAU_Repricing
                                                , data.BRODMANN
                                                , data.BRODMANN_Repricing
                                                , data.CARREFOURAR
                                                , data.CARREFOURAR_Repricing
                                                , data.CCAAU
                                                , data.CCAAU_Repricing
                                                , data.CCABIZA
                                                , data.CCABIZA_Repricing
                                                , data.CCANZ
                                                , data.CCANZ_Repricing
                                                , data.CCBOTTLERSUS
                                                , data.CCBOTTLERSUS_Repricing
                                                , data.CCBR_PROD
                                                , data.CCBR_PROD_Repricing
                                                , data.CCJP
                                                , data.CCJP_Repricing
                                                , data.CCKH
                                                , data.CCKH_Repricing
                                                , data.CCKR
                                                , data.CCKR_Repricing
                                                , data.CCMY
                                                , data.CCMY_Repricing
                                                , data.CCPH
                                                , data.CCPH_Repricing
                                                , data.CCRPR_PROD
                                                , data.CCRPR_PROD_Repricing
                                                , data.CCRU
                                                , data.CCRU_Repricing
                                                , data.CCTH
                                                , data.CCTH_Repricing
                                                , data.CCTH_UAT
                                                , data.CCTH_UAT_Repricing
                                                , data.CCTRADMX
                                                , data.CCTRADMX_Repricing
                                                , data.CCUS
                                                , data.CCUS_Repricing
                                                , data.CCZA
                                                , data.CCZA_Repricing
                                                , data.CEREBOSTH
                                                , data.CEREBOSTH_Repricing
                                                , data.CROWDSOURCE
                                                , data.CROWDSOURCE_Repricing
                                                , data.DIAGEOAU
                                                , data.DIAGEOAU_Repricing
                                                , data.DIAGEOBR
                                                , data.DIAGEOBR_Repricing
                                                , data.DIAGEOGR
                                                , data.DIAGEOGR_Repricing
                                                , data.DIAGEOIE
                                                , data.DIAGEOIE_Repricing
                                                , data.DIAGEOKE
                                                , data.DIAGEOKE_Repricing
                                                , data.DIAGEOMX
                                                , data.DIAGEOMX_Repricing
                                                , data.DIAGEOPT
                                                , data.DIAGEOPT_Repricing
                                                , data.DIAGEOTW
                                                , data.DIAGEOTW_Repricing
                                                , data.DIAGEOUK
                                                , data.DIAGEOUK_Repricing
                                                , data.DIAGEOZA
                                                , data.DIAGEOZA_Repricing
                                                , data.EMEA_DEMO
                                                , data.EMEA_DEMO_Repricing
                                                , data.FERREROIT
                                                , data.FERREROIT_Repricing
                                                , data.GILLETTEUS
                                                , data.GILLETTEUS_Repricing
                                                , data.GOOGLEUS
                                                , data.GOOGLEUS_Repricing
                                                , data.HBCDE
                                                , data.HBCDE_Repricing
                                                , data.HEINEKENCN
                                                , data.HEINEKENCN_Repricing
                                                , data.HEINEKENUS_PROD
                                                , data.HEINEKENUS_PROD_Repricing
                                                , data.HEINZCR
                                                , data.HEINZCR_Repricing
                                                , data.INBEVAR
                                                , data.INBEVAR_Repricing
                                                , data.INBEVBE
                                                , data.INBEVBE_Repricing
                                                , data.INBEVBE_SAND
                                                , data.INBEVBE_SAND_Repricing
                                                , data.INBEVBR
                                                , data.INBEVBR_Repricing
                                                , data.INBEVBR_ONTRADE
                                                , data.INBEVBR_ONTRADE_Repricing
                                                , data.INBEVCL
                                                , data.INBEVCL_Repricing
                                                , data.INBEVCN
                                                , data.INBEVCN_Repricing
                                                , data.INBEVCOOLERAR
                                                , data.INBEVCOOLERAR_Repricing
                                                , data.INBEVCOOLERBR
                                                , data.INBEVCOOLERBR_Repricing
                                                , data.INBEVCOOLERUS
                                                , data.INBEVCOOLERUS_Repricing
                                                , data.INBEVFR
                                                , data.INBEVFR_Repricing
                                                , data.INBEVLU
                                                , data.INBEVLU_Repricing
                                                , data.INBEVLU_SAND
                                                , data.INBEVLU_SAND_Repricing
                                                , data.INBEVMX
                                                , data.INBEVMX_Repricing
                                                , data.INBEVNL
                                                , data.INBEVNL_Repricing
                                                , data.INBEVNL_SAND
                                                , data.INBEVNL_SAND_Repricing
                                                , data.INBEVPY
                                                , data.INBEVPY_Repricing
                                                , data.INBEVTRADMX
                                                , data.INBEVTRADMX_Repricing
                                                , data.INBEVUS
                                                , data.INBEVUS_Repricing
                                                , data.JTIUA
                                                , data.JTIUA_Repricing
                                                , data.KCMY
                                                , data.KCMY_Repricing
                                                , data.KCUS
                                                , data.KCUS_Repricing
                                                , data.KEURIGCA
                                                , data.KEURIGCA_Repricing
                                                , data.LABATTPLNOPTCA
                                                , data.LABATTPLNOPTCA_Repricing
                                                , data.LAVAZZAAT
                                                , data.LAVAZZAAT_Repricing
                                                , data.LAVAZZAAU
                                                , data.LAVAZZAAU_Repricing
                                                , data.LAVAZZABE
                                                , data.LAVAZZABE_Repricing
                                                , data.LAVAZZABG
                                                , data.LAVAZZABG_Repricing
                                                , data.LAVAZZACA
                                                , data.LAVAZZACA_Repricing
                                                , data.LAVAZZACH
                                                , data.LAVAZZACH_Repricing
                                                , data.LAVAZZACL
                                                , data.LAVAZZACL_Repricing
                                                , data.LAVAZZACN
                                                , data.LAVAZZACN_Repricing
                                                , data.LAVAZZACZ
                                                , data.LAVAZZACZ_Repricing
                                                , data.LAVAZZADE
                                                , data.LAVAZZADE_Repricing
                                                , data.LAVAZZADK
                                                , data.LAVAZZADK_Repricing
                                                , data.LAVAZZAEE
                                                , data.LAVAZZAEE_Repricing
                                                , data.LAVAZZAES
                                                , data.LAVAZZAES_Repricing
                                                , data.LAVAZZAFR
                                                , data.LAVAZZAFR_Repricing
                                                , data.LAVAZZAGR
                                                , data.LAVAZZAGR_Repricing
                                                , data.LAVAZZAHK
                                                , data.LAVAZZAHK_Repricing
                                                , data.LAVAZZAHR
                                                , data.LAVAZZAHR_Repricing
                                                , data.LAVAZZAIL
                                                , data.LAVAZZAIL_Repricing
                                                , data.LAVAZZAIT
                                                , data.LAVAZZAIT_Repricing
                                                , data.LAVAZZAJP
                                                , data.LAVAZZAJP_Repricing
                                                , data.LAVAZZAKR
                                                , data.LAVAZZAKR_Repricing
                                                , data.LAVAZZALT
                                                , data.LAVAZZALT_Repricing
                                                , data.LAVAZZALU
                                                , data.LAVAZZALU_Repricing
                                                , data.LAVAZZALV
                                                , data.LAVAZZALV_Repricing
                                                , data.LAVAZZAMA
                                                , data.LAVAZZAMA_Repricing
                                                , data.LAVAZZANL
                                                , data.LAVAZZANL_Repricing
                                                , data.LAVAZZAPL
                                                , data.LAVAZZAPL_Repricing
                                                , data.LAVAZZARO
                                                , data.LAVAZZARO_Repricing
                                                , data.LAVAZZARU
                                                , data.LAVAZZARU_Repricing
                                                , data.LAVAZZASA
                                                , data.LAVAZZASA_Repricing
                                                , data.LAVAZZASE
                                                , data.LAVAZZASE_Repricing
                                                , data.LAVAZZASG
                                                , data.LAVAZZASG_Repricing
                                                , data.LAVAZZAUAE
                                                , data.LAVAZZAUAE_Repricing
                                                , data.LAVAZZAUK
                                                , data.LAVAZZAUK_Repricing
                                                , data.LAVAZZAUS
                                                , data.LAVAZZAUS_Repricing
                                                , data.LAVAZZAZA
                                                , data.LAVAZZAZA_Repricing
                                                , data.LRSUK
                                                , data.LRSUK_Repricing
                                                , data.MARSBR
                                                , data.MARSBR_Repricing
                                                , data.MARSIN
                                                , data.MARSIN_Repricing
                                                , data.MARSIN_OLD
                                                , data.MARSIN_OLD_Repricing
                                                , data.MARSRU_PROD
                                                , data.MARSRU_PROD_Repricing
                                                , data.MAYORAID
                                                , data.MAYORAID_Repricing
                                                , data.MJNCN
                                                , data.MJNCN_Repricing
                                                , data.MOLSONCOOLERHN
                                                , data.MOLSONCOOLERHN_Repricing
                                                , data.MOLSONCOOLERHR
                                                , data.MOLSONCOOLERHR_Repricing
                                                , data.MOLSONCOORSUK
                                                , data.MOLSONCOORSUK_Repricing
                                                , data.NESTLEUK
                                                , data.NESTLEUK_Repricing
                                                , data.NIVEAUK
                                                , data.NIVEAUK_Repricing
                                                , data.NRF2017_DEMO
                                                , data.NRF2017_DEMO_Repricing
                                                , data.ONE_AMERICAS_DEMO
                                                , data.ONE_AMERICAS_DEMO_Repricing
                                                , data.ONE_APAC_DEMO
                                                , data.ONE_APAC_DEMO_Repricing
                                                , data.PEPSICOBR
                                                , data.PEPSICOBR_Repricing
                                                , data.PNGAU
                                                , data.PNGAU_Repricing
                                                , data.PNGAU_OLD
                                                , data.PNGAU_OLD_Repricing
                                                , data.PNGCAREUS
                                                , data.PNGCAREUS_Repricing
                                                , data.PNGCN_PROD
                                                , data.PNGCN_PROD_Repricing
                                                , data.PNGJP
                                                , data.PNGJP_Repricing
                                                , data.PNGJP_OLD
                                                , data.PNGJP_OLD_Repricing
                                                , data.PNGUS
                                                , data.PNGUS_Repricing
                                                , data.PNGUSEPISODIC
                                                , data.PNGUSEPISODIC_Repricing
                                                , data.RBUS
                                                , data.RBUS_Repricing
                                                , data.RE_XSUITE_DEMO
                                                , data.RE_XSUITE_DEMO_Repricing
                                                , data.REPNGCN_DEMO
                                                , data.REPNGCN_DEMO_Repricing
                                                , data.RI_DEMO
                                                , data.RI_DEMO_Repricing
                                                , data.RI_DIAGEOAU
                                                , data.RI_DIAGEOAU_Repricing
                                                , data.RIALCBEVUK_PROD
                                                , data.RIALCBEVUK_PROD_Repricing
                                                , data.RICOFFEEUS
                                                , data.RICOFFEEUS_Repricing
                                                , data.RINIELSENUS
                                                , data.RINIELSENUS_Repricing
                                                , data.RIPETCAREUK_PROD
                                                , data.RIPETCAREUK_PROD_Repricing
                                                , data.RIUS
                                                , data.RIUS_Repricing
                                                , data.RIUS_DEV
                                                , data.RIUS_DEV_Repricing
                                                , data.RNBDE
                                                , data.RNBDE_Repricing
                                                , data.SMARTCOOLER_POC2
                                                , data.SMARTCOOLER_POC2_Repricing
                                                , data.SMARTCOOLER_TRN
                                                , data.SMARTCOOLER_TRN_Repricing
                                                , data.SMARTCOOLER2_TRN
                                                , data.SMARTCOOLER2_TRN_Repricing
                                                , data.SOLARBR
                                                , data.SOLARBR_Repricing
                                                , data.STATIC_CAMERA_DEMO
                                                , data.STATIC_CAMERA_DEMO_Repricing
                                                , data.SWIRECN
                                                , data.SWIRECN_Repricing
                                                , data.SWIREREDCN
                                                , data.SWIREREDCN_Repricing
                                                , data.TNUVAIL
                                                , data.TNUVAIL_Repricing
                                                , data.TRAXDEMO_TS_PROD
                                                , data.TRAXDEMO_TS_PROD_Repricing
                                                , data.TWEAU
                                                , data.TWEAU_Repricing
                                                , data.RI_DEMO2
                                                , data.RI_DEMO2_Repricing
                                                , data.COMPASSCCH_SAND
                                                , data.COMPASSCCH_SAND_Repricing
                                                , data.LAVAZZAIT_SAND
                                                , data.LAVAZZAIT_SAND_Repricing
                                                , data.INBEVUS_STG
                                                , data.INBEVUS_STG_Repricing
                                                , data.LAVAZZAFR_SAND
                                                , data.LAVAZZAFR_SAND_Repricing
                                                , data.INBEVBE_SAND2
                                                , data.INBEVBE_SAND2_Repricing
                                                , data.INBEVLU_SAND2
                                                , data.INBEVLU_SAND2_Repricing
                                                , data.INBEVNL_SAND2
                                                , data.INBEVNL_SAND2_Repricing
                                                , data.CreatedDate
                                                , data.CreatedBy

                                                , data.ImportedDate
                                                , data.ImportedYear
                                                , data.B2BRU
                                                , data.BRMUS
                                                , data.CBCIL
                                                , data.CCCOOLERMX
                                                , data.DIAGEOAR
                                                , data.DIAGEOBENELUX
                                                , data.DIAGEOCH
                                                , data.DIAGEOGA
                                                , data.DIAGEOGTR
                                                , data.DIAGEONORDICS
                                                , data.DIAGEOUS
                                                , data.FERREROEXTIT
                                                , data.GOOGLEHK
                                                , data.HEINEKENPILOTCN
                                                , data.IMBO
                                                , data.INBEVCI
                                                , data.INBEVCNTT
                                                , data.INBEVCO
                                                , data.INBEVZA
                                                , data.INORU
                                                , data.JJSP
                                                , data.JNJES
                                                , data.JNJUK
                                                , data.JRIJP
                                                , data.KELLOGSUSPOC
                                                , data.KRAFTUS
                                                , data.MARS_CHOCO_RU
                                                , data.MHUK
                                                , data.MILLERCOORS
                                                , data.MOLSONONTRADEUK
                                                , data.MYCHEMISTAU
                                                , data.NESTLEROAMLERUK
                                                , data.NRF2018
                                                , data.PENAFLORAR
                                                , data.PMIUA
                                                , data.PNGAMERICA
                                                , data.PNGRO
                                                , data.RBAU
                                                , data.RBCA
                                                , data.RBDK
                                                , data.RBMANUAL
                                                , data.RINIELSENRU_MARS
                                                , data.RINIELSENUSQI
                                                , data.RIPANELCN
                                                , data.RISPARKWINEDE
                                                , data.SANOFIAE
                                                , data.SANOFIAU
                                                , data.SANOFIHK
                                                , data.SANOFIKH
                                                , data.SANOFINZ
                                                , data.SANOFIRU
                                                , data.SANOFITR
                                                , data.SANOFIUA
                                                , data.SHUFERSALIL
                                                , data.SUNTORYJP
                                                , data.TESCOTH
                                                , data.TESCOUK
                                                , data.TRAXROBOT
                                                , data.XSUITE_SHOWCASE
                                                , data.ABIUS
                                                , data.BADGERROBOT
                                                , data.CUBAU
                                                , data.DIAGEORU
                                                , data.GFKFR
                                                , data.JNJIT
                                                , data.LIGHTTRAX
                                                , data.LIGHTTRAXOFFLINE
                                                , data.RINIELSENFR
                                                , data.SANOFIKZ
                                                , data.SANOFILB
                                                , data.SANOFISA
                                                , data.SANOFIZA
                                                , data.WATSONSHK
                                                , data.KELLOGGUS
                                                 , data.TSINGTAOBEERCN
                                                ));
            return table;
        }




        public int BulkInsertIntoScenes(List<ScenesEntity> scenes)
        {
            using (var scope = new TransactionScope())
            {
                string connectionString = ConfigurationManager.ConnectionStrings["Client"].ConnectionString;
                var sqlConnection = new SqlConnection(connectionString);
                var sqlBulkCopy = new SqlBulkCopy(sqlConnection)
                {
                    DestinationTableName = "Scenes",
                    //BulkCopyTimeout = 6000
                };
                var dataTable = GetDataTableForScene(scenes);
                sqlConnection.Open();

                sqlBulkCopy.WriteToServer(dataTable);

                scope.Complete();
                sqlBulkCopy.Close();
                sqlConnection.Close();
                sqlConnection.Dispose();
            }
            return scenes.Count;
        }


        private DataTable GetDataTableForScene(List<ScenesEntity> scenes)
        {
            var table = new DataTable();
            table.Columns.Add("ID", typeof(string));
	        table.Columns.Add("QAT", typeof(string));
	        table.Columns.Add("Center", typeof(string));
	        table.Columns.Add("TotalScenes", typeof(int));
	        table.Columns.Add("AvgsecondsperScenes", typeof(int));
	        table.Columns.Add("ABICA", typeof(int));
	        table.Columns.Add("ABICA_Scenes", typeof(int));
	        table.Columns.Add("ABITAMSUS_PROD", typeof(int));
	        table.Columns.Add("ABITAMSUS_PROD_Scenes", typeof(int));
	        table.Columns.Add("AMERICAS_DEMO", typeof(int));
	        table.Columns.Add("AMERICAS_DEMO_Scenes", typeof(int));
	        table.Columns.Add("BATRU", typeof(int));
	        table.Columns.Add("BATRU_Scenes", typeof(int));
	        table.Columns.Add("BIKR", typeof(int));
	        table.Columns.Add("BIKR_Scenes", typeof(int));
	        table.Columns.Add("BIMY", typeof(int));
	        table.Columns.Add("BIMY_Scenes", typeof(int));
	        table.Columns.Add("BIPH", typeof(int));
	        table.Columns.Add("BIPH_Scenes", typeof(int));
	        table.Columns.Add("BISEASK", typeof(int));
	        table.Columns.Add("BISEASK_Scenes", typeof(int));
	        table.Columns.Add("BITH", typeof(int));
	        table.Columns.Add("BITH_Scenes", typeof(int));
	        table.Columns.Add("BIVN", typeof(int));
	        table.Columns.Add("BIVN_Scenes", typeof(int));
	        table.Columns.Add("BPAU", typeof(int));
	        table.Columns.Add("BPAU_Scenes", typeof(int));
	        table.Columns.Add("BRODMANN", typeof(int));
	        table.Columns.Add("BRODMANN_Scenes", typeof(int));
	        table.Columns.Add("CARREFOURAR", typeof(int));
	        table.Columns.Add("CARREFOURAR_Scenes", typeof(int));
	        table.Columns.Add("CCAAU", typeof(int));
	        table.Columns.Add("CCAAU_Scenes", typeof(int));
	        table.Columns.Add("CCABIZA", typeof(int));
	        table.Columns.Add("CCABIZA_Scenes", typeof(int));
	        table.Columns.Add("CCANZ", typeof(int));
	        table.Columns.Add("CCANZ_Scenes", typeof(int));
	        table.Columns.Add("CCBOTTLERSUS", typeof(int));
	        table.Columns.Add("CCBOTTLERSUS_Scenes", typeof(int));
	        table.Columns.Add("CCBR_PROD", typeof(int));
	        table.Columns.Add("CCBR_PROD_Scenes", typeof(int));
	        table.Columns.Add("CCJP", typeof(int));
	        table.Columns.Add("CCJP_Scenes", typeof(int));
	        table.Columns.Add("CCKH", typeof(int));
	        table.Columns.Add("CCKH_Scenes", typeof(int));
	        table.Columns.Add("CCKR", typeof(int));
	        table.Columns.Add("CCKR_Scenes", typeof(int));
	        table.Columns.Add("CCMY", typeof(int));
	        table.Columns.Add("CCMY_Scenes", typeof(int));
	        table.Columns.Add("CCPH", typeof(int));
	        table.Columns.Add("CCPH_Scenes", typeof(int));
	        table.Columns.Add("CCRPR_PROD", typeof(int));
	        table.Columns.Add("CCRPR_PROD_Scenes", typeof(int));
	        table.Columns.Add("CCRU", typeof(int));
	        table.Columns.Add("CCRU_Scenes", typeof(int));
	        table.Columns.Add("CCTH", typeof(int));
	        table.Columns.Add("CCTH_Scenes", typeof(int));
	        table.Columns.Add("CCTH_UAT", typeof(int));
	        table.Columns.Add("CCTH_UAT_Scenes", typeof(int));
	        table.Columns.Add("CCTRADMX", typeof(int));
	        table.Columns.Add("CCTRADMX_Scenes", typeof(int));
	        table.Columns.Add("CCUS", typeof(int));
	        table.Columns.Add("CCUS_Scenes", typeof(int));
	        table.Columns.Add("CCZA", typeof(int));
	        table.Columns.Add("CCZA_Scenes", typeof(int));
	        table.Columns.Add("CEREBOSTH", typeof(int));
	        table.Columns.Add("CEREBOSTH_Scenes", typeof(int));
	        table.Columns.Add("CROWDSOURCE", typeof(int));
	        table.Columns.Add("CROWDSOURCE_Scenes", typeof(int));
	        table.Columns.Add("DIAGEOAU", typeof(int));
	        table.Columns.Add("DIAGEOAU_Scenes", typeof(int));
	        table.Columns.Add("DIAGEOBR", typeof(int));
	        table.Columns.Add("DIAGEOBR_Scenes", typeof(int));
	        table.Columns.Add("DIAGEOGR", typeof(int));
	        table.Columns.Add("DIAGEOGR_Scenes", typeof(int));
	        table.Columns.Add("DIAGEOIE", typeof(int));
	        table.Columns.Add("DIAGEOIE_Scenes", typeof(int));
	        table.Columns.Add("DIAGEOKE", typeof(int));
	        table.Columns.Add("DIAGEOKE_Scenes", typeof(int));
	        table.Columns.Add("DIAGEOMX", typeof(int));
	        table.Columns.Add("DIAGEOMX_Scenes", typeof(int));
	        table.Columns.Add("DIAGEOPT", typeof(int));
	        table.Columns.Add("DIAGEOPT_Scenes", typeof(int));
	        table.Columns.Add("DIAGEOTW", typeof(int));
	        table.Columns.Add("DIAGEOTW_Scenes", typeof(int));
	        table.Columns.Add("DIAGEOUK", typeof(int));
	        table.Columns.Add("DIAGEOUK_Scenes", typeof(int));
	        table.Columns.Add("DIAGEOZA", typeof(int));
	        table.Columns.Add("DIAGEOZA_Scenes", typeof(int));
	        table.Columns.Add("EMEA_DEMO", typeof(int));
	        table.Columns.Add("EMEA_DEMO_Scenes", typeof(int));
	        table.Columns.Add("FERREROIT", typeof(int));
	        table.Columns.Add("FERREROIT_Scenes", typeof(int));
	        table.Columns.Add("GILLETTEUS", typeof(int));
	        table.Columns.Add("GILLETTEUS_Scenes", typeof(int));
	        table.Columns.Add("GOOGLEUS", typeof(int));
	        table.Columns.Add("GOOGLEUS_Scenes", typeof(int));
	        table.Columns.Add("HBCDE", typeof(int));
	        table.Columns.Add("HBCDE_Scenes", typeof(int));
	        table.Columns.Add("HEINEKENCN", typeof(int));
	        table.Columns.Add("HEINEKENCN_Scenes", typeof(int));
	        table.Columns.Add("HEINEKENUS_PROD", typeof(int));
	        table.Columns.Add("HEINEKENUS_PROD_Scenes", typeof(int));
	        table.Columns.Add("HEINZCR", typeof(int));
	        table.Columns.Add("HEINZCR_Scenes", typeof(int));
	        table.Columns.Add("INBEVAR", typeof(int));
	        table.Columns.Add("INBEVAR_Scenes", typeof(int));
	        table.Columns.Add("INBEVBE", typeof(int));
	        table.Columns.Add("INBEVBE_Scenes", typeof(int));
	        table.Columns.Add("INBEVBE_SAND", typeof(int));
	        table.Columns.Add("INBEVBE_SAND_Scenes", typeof(int));
	        table.Columns.Add("INBEVBR", typeof(int));
	        table.Columns.Add("INBEVBR_Scenes", typeof(int));
	        table.Columns.Add("INBEVBR_ONTRADE", typeof(int));
	        table.Columns.Add("INBEVBR_ONTRADE_Scenes", typeof(int));
	        table.Columns.Add("INBEVCL", typeof(int));
	        table.Columns.Add("INBEVCL_Scenes", typeof(int));
	        table.Columns.Add("INBEVCN", typeof(int));
	        table.Columns.Add("INBEVCN_Scenes", typeof(int));
	        table.Columns.Add("INBEVCOOLERAR", typeof(int));
	        table.Columns.Add("INBEVCOOLERAR_Scenes", typeof(int));
	        table.Columns.Add("INBEVCOOLERBR", typeof(int));
	        table.Columns.Add("INBEVCOOLERBR_Scenes", typeof(int));
	        table.Columns.Add("INBEVCOOLERUS", typeof(int));
	        table.Columns.Add("INBEVCOOLERUS_Scenes", typeof(int));
	        table.Columns.Add("INBEVFR", typeof(int));
	        table.Columns.Add("INBEVFR_Scenes", typeof(int));
	        table.Columns.Add("INBEVLU", typeof(int));
	        table.Columns.Add("INBEVLU_Scenes", typeof(int));
	        table.Columns.Add("INBEVLU_SAND", typeof(int));
	        table.Columns.Add("INBEVLU_SAND_Scenes", typeof(int));
	        table.Columns.Add("INBEVMX", typeof(int));
	        table.Columns.Add("INBEVMX_Scenes", typeof(int));
	        table.Columns.Add("INBEVNL", typeof(int));
	        table.Columns.Add("INBEVNL_Scenes", typeof(int));
	        table.Columns.Add("INBEVNL_SAND", typeof(int));
	        table.Columns.Add("INBEVNL_SAND_Scenes", typeof(int));
	        table.Columns.Add("INBEVPY", typeof(int));
	        table.Columns.Add("INBEVPY_Scenes", typeof(int));
	        table.Columns.Add("INBEVTRADMX", typeof(int));
	        table.Columns.Add("INBEVTRADMX_Scenes", typeof(int));
	        table.Columns.Add("INBEVUS", typeof(int));
	        table.Columns.Add("INBEVUS_Scenes", typeof(int));
	        table.Columns.Add("JTIUA", typeof(int));
	        table.Columns.Add("JTIUA_Scenes", typeof(int));
	        table.Columns.Add("KCMY", typeof(int));
	        table.Columns.Add("KCMY_Scenes", typeof(int));
	        table.Columns.Add("KCUS", typeof(int));
	        table.Columns.Add("KCUS_Scenes", typeof(int));
	        table.Columns.Add("KEURIGCA", typeof(int));
	        table.Columns.Add("KEURIGCA_Scenes", typeof(int));
	        table.Columns.Add("LABATTPLNOPTCA", typeof(int));
	        table.Columns.Add("LABATTPLNOPTCA_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAAT", typeof(int));
	        table.Columns.Add("LAVAZZAAT_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAAU", typeof(int));
	        table.Columns.Add("LAVAZZAAU_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZABE", typeof(int));
	        table.Columns.Add("LAVAZZABE_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZABG", typeof(int));
	        table.Columns.Add("LAVAZZABG_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZACA", typeof(int));
	        table.Columns.Add("LAVAZZACA_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZACH", typeof(int));
	        table.Columns.Add("LAVAZZACH_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZACL", typeof(int));
	        table.Columns.Add("LAVAZZACL_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZACN", typeof(int));
	        table.Columns.Add("LAVAZZACN_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZACZ", typeof(int));
	        table.Columns.Add("LAVAZZACZ_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZADE", typeof(int));
	        table.Columns.Add("LAVAZZADE_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZADK", typeof(int));
	        table.Columns.Add("LAVAZZADK_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAEE", typeof(int));
	        table.Columns.Add("LAVAZZAEE_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAES", typeof(int));
	        table.Columns.Add("LAVAZZAES_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAFR", typeof(int));
	        table.Columns.Add("LAVAZZAFR_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAGR", typeof(int));
	        table.Columns.Add("LAVAZZAGR_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAHK", typeof(int));
	        table.Columns.Add("LAVAZZAHK_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAHR", typeof(int));
	        table.Columns.Add("LAVAZZAHR_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAIL", typeof(int));
	        table.Columns.Add("LAVAZZAIL_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAIT", typeof(int));
	        table.Columns.Add("LAVAZZAIT_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAJP", typeof(int));
	        table.Columns.Add("LAVAZZAJP_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAKR", typeof(int));
	        table.Columns.Add("LAVAZZAKR_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZALT", typeof(int));
	        table.Columns.Add("LAVAZZALT_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZALU", typeof(int));
	        table.Columns.Add("LAVAZZALU_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZALV", typeof(int));
	        table.Columns.Add("LAVAZZALV_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAMA", typeof(int));
	        table.Columns.Add("LAVAZZAMA_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZANL", typeof(int));
	        table.Columns.Add("LAVAZZANL_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAPL", typeof(int));
	        table.Columns.Add("LAVAZZAPL_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZARO", typeof(int));
	        table.Columns.Add("LAVAZZARO_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZARU", typeof(int));
	        table.Columns.Add("LAVAZZARU_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZASA", typeof(int));
	        table.Columns.Add("LAVAZZASA_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZASE", typeof(int));
	        table.Columns.Add("LAVAZZASE_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZASG", typeof(int));
	        table.Columns.Add("LAVAZZASG_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAUAE", typeof(int));
	        table.Columns.Add("LAVAZZAUAE_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAUK", typeof(int));
	        table.Columns.Add("LAVAZZAUK_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAUS", typeof(int));
	        table.Columns.Add("LAVAZZAUS_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAZA", typeof(int));
	        table.Columns.Add("LAVAZZAZA_Scenes", typeof(int));
	        table.Columns.Add("LRSUK", typeof(int));
	        table.Columns.Add("LRSUK_Scenes", typeof(int));
	        table.Columns.Add("MARSBR", typeof(int));
	        table.Columns.Add("MARSBR_Scenes", typeof(int));
	        table.Columns.Add("MARSIN", typeof(int));
	        table.Columns.Add("MARSIN_Scenes", typeof(int));
	        table.Columns.Add("MARSIN_OLD", typeof(int));
	        table.Columns.Add("MARSIN_OLD_Scenes", typeof(int));
	        table.Columns.Add("MARSRU_PROD", typeof(int));
	        table.Columns.Add("MARSRU_PROD_Scenes", typeof(int));
	        table.Columns.Add("MAYORAID", typeof(int));
	        table.Columns.Add("MAYORAID_Scenes", typeof(int));
	        table.Columns.Add("MJNCN", typeof(int));
	        table.Columns.Add("MJNCN_Scenes", typeof(int));
	        table.Columns.Add("MOLSONCOOLERHN", typeof(int));
	        table.Columns.Add("MOLSONCOOLERHN_Scenes", typeof(int));
	        table.Columns.Add("MOLSONCOOLERHR", typeof(int));
	        table.Columns.Add("MOLSONCOOLERHR_Scenes", typeof(int));
	        table.Columns.Add("MOLSONCOORSUK", typeof(int));
	        table.Columns.Add("MOLSONCOORSUK_Scenes", typeof(int));
	        table.Columns.Add("NESTLEUK", typeof(int));
	        table.Columns.Add("NESTLEUK_Scenes", typeof(int));
	        table.Columns.Add("NIVEAUK", typeof(int));
	        table.Columns.Add("NIVEAUK_Scenes", typeof(int));
	        table.Columns.Add("NRF2017_DEMO", typeof(int));
	        table.Columns.Add("NRF2017_DEMO_Scenes", typeof(int));
	        table.Columns.Add("ONE_AMERICAS_DEMO", typeof(int));
	        table.Columns.Add("ONE_AMERICAS_DEMO_Scenes", typeof(int));
	        table.Columns.Add("ONE_APAC_DEMO", typeof(int));
	        table.Columns.Add("ONE_APAC_DEMO_Scenes", typeof(int));
	        table.Columns.Add("PEPSICOBR", typeof(int));
	        table.Columns.Add("PEPSICOBR_Scenes", typeof(int));
	        table.Columns.Add("PNGAU", typeof(int));
	        table.Columns.Add("PNGAU_Scenes", typeof(int));
	        table.Columns.Add("PNGAU_OLD", typeof(int));
	        table.Columns.Add("PNGAU_OLD_Scenes", typeof(int));
	        table.Columns.Add("PNGCAREUS", typeof(int));
	        table.Columns.Add("PNGCAREUS_Scenes", typeof(int));
	        table.Columns.Add("PNGCN_PROD", typeof(int));
	        table.Columns.Add("PNGCN_PROD_Scenes", typeof(int));
	        table.Columns.Add("PNGJP", typeof(int));
	        table.Columns.Add("PNGJP_Scenes", typeof(int));
	        table.Columns.Add("PNGJP_OLD", typeof(int));
	        table.Columns.Add("PNGJP_OLD_Scenes", typeof(int));
	        table.Columns.Add("PNGUS", typeof(int));
	        table.Columns.Add("PNGUS_Scenes", typeof(int));
	        table.Columns.Add("PNGUSEPISODIC", typeof(int));
	        table.Columns.Add("PNGUSEPISODIC_Scenes", typeof(int));
	        table.Columns.Add("RBUS", typeof(int));
	        table.Columns.Add("RBUS_Scenes", typeof(int));
	        table.Columns.Add("RE_XSUITE_DEMO", typeof(int));
	        table.Columns.Add("RE_XSUITE_DEMO_Scenes", typeof(int));
	        table.Columns.Add("REPNGCN_DEMO", typeof(int));
	        table.Columns.Add("REPNGCN_DEMO_Scenes", typeof(int));
	        table.Columns.Add("RI_DEMO", typeof(int));
	        table.Columns.Add("RI_DEMO_Scenes", typeof(int));
	        table.Columns.Add("RI_DIAGEOAU", typeof(int));
	        table.Columns.Add("RI_DIAGEOAU_Scenes", typeof(int));
	        table.Columns.Add("RIALCBEVUK_PROD", typeof(int));
	        table.Columns.Add("RIALCBEVUK_PROD_Scenes", typeof(int));
	        table.Columns.Add("RICOFFEEUS", typeof(int));
	        table.Columns.Add("RICOFFEEUS_Scenes", typeof(int));
	        table.Columns.Add("RINIELSENUS", typeof(int));
	        table.Columns.Add("RINIELSENUS_Scenes", typeof(int));
	        table.Columns.Add("RIPETCAREUK_PROD", typeof(int));
	        table.Columns.Add("RIPETCAREUK_PROD_Scenes", typeof(int));
	        table.Columns.Add("RIUS", typeof(int));
	        table.Columns.Add("RIUS_Scenes", typeof(int));
	        table.Columns.Add("RIUS_DEV", typeof(int));
	        table.Columns.Add("RIUS_DEV_Scenes", typeof(int));
	        table.Columns.Add("RNBDE", typeof(int));
	        table.Columns.Add("RNBDE_Scenes", typeof(int));
	        table.Columns.Add("SMARTCOOLER_POC2", typeof(int));
	        table.Columns.Add("SMARTCOOLER_POC2_Scenes", typeof(int));
	        table.Columns.Add("SMARTCOOLER_TRN", typeof(int));
	        table.Columns.Add("SMARTCOOLER_TRN_Scenes", typeof(int));
	        table.Columns.Add("SMARTCOOLER2_TRN", typeof(int));
	        table.Columns.Add("SMARTCOOLER2_TRN_Scenes", typeof(int));
	        table.Columns.Add("SOLARBR", typeof(int));
	        table.Columns.Add("SOLARBR_Scenes", typeof(int));
	        table.Columns.Add("STATIC_CAMERA_DEMO", typeof(int));
	        table.Columns.Add("STATIC_CAMERA_DEMO_Scenes", typeof(int));
	        table.Columns.Add("SWIRECN", typeof(int));
	        table.Columns.Add("SWIRECN_Scenes", typeof(int));
	        table.Columns.Add("SWIREREDCN", typeof(int));
	        table.Columns.Add("SWIREREDCN_Scenes", typeof(int));
	        table.Columns.Add("TNUVAIL", typeof(int));
	        table.Columns.Add("TNUVAIL_Scenes", typeof(int));
	        table.Columns.Add("TRAXDEMO_TS_PROD", typeof(int));
	        table.Columns.Add("TRAXDEMO_TS_PROD_Scenes", typeof(int));
	        table.Columns.Add("TWEAU", typeof(int));
	        table.Columns.Add("TWEAU_Scenes", typeof(int));
	        table.Columns.Add("RI_DEMO2", typeof(int));
	        table.Columns.Add("RI_DEMO2_Scenes", typeof(int));
	        table.Columns.Add("COMPASSCCH_SAND", typeof(int));
	        table.Columns.Add("COMPASSCCH_SAND_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAIT_SAND", typeof(int));
	        table.Columns.Add("LAVAZZAIT_SAND_Scenes", typeof(int));
	        table.Columns.Add("INBEVUS_STG", typeof(int));
	        table.Columns.Add("INBEVUS_STG_Scenes", typeof(int));
	        table.Columns.Add("LAVAZZAFR_SAND", typeof(int));
	        table.Columns.Add("LAVAZZAFR_SAND_Scenes", typeof(int));
	        table.Columns.Add("INBEVBE_SAND2", typeof(int));
	        table.Columns.Add("INBEVBE_SAND2_Scenes", typeof(int));
	        table.Columns.Add("INBEVLU_SAND2", typeof(int));
	        table.Columns.Add("INBEVLU_SAND2_Scenes", typeof(int));
	        table.Columns.Add("INBEVNL_SAND2", typeof(int));
	        table.Columns.Add("INBEVNL_SAND2_Scenes", typeof(int));
	        table.Columns.Add("CreatedDate", typeof(string));
	        table.Columns.Add("CreatedBy", typeof(string));

            table.Columns.Add("ImportedDate", typeof(string));
            table.Columns.Add("ImportedYear", typeof(string));
            table.Columns.Add("B2BRU_Scenes", typeof(int));
            table.Columns.Add("BRMUS_Scenes", typeof(int));
            table.Columns.Add("CBCIL_Scenes", typeof(int));
            table.Columns.Add("CCCOOLERMX_Scenes", typeof(int));
            table.Columns.Add("DIAGEOAR_Scenes", typeof(int));
            table.Columns.Add("DIAGEOBENELUX_Scenes", typeof(int));
            table.Columns.Add("DIAGEOCH_Scenes", typeof(int));
            table.Columns.Add("DIAGEOGA_Scenes", typeof(int));
            table.Columns.Add("DIAGEOGTR_Scenes", typeof(int));
            table.Columns.Add("DIAGEONORDICS_Scenes", typeof(int));
            table.Columns.Add("DIAGEOUS_Scenes", typeof(int));
            table.Columns.Add("FERREROEXTIT_Scenes", typeof(int));
            table.Columns.Add("GOOGLEHK_Scenes", typeof(int));
            table.Columns.Add("HEINEKENPILOTCN_Scenes", typeof(int));
            table.Columns.Add("IMBO_Scenes", typeof(int));
            table.Columns.Add("INBEVCI_Scenes", typeof(int));
            table.Columns.Add("INBEVCNTT_Scenes", typeof(int));
            table.Columns.Add("INBEVCO_Scenes", typeof(int));
            table.Columns.Add("INBEVZA_Scenes", typeof(int));
            table.Columns.Add("INORU_Scenes", typeof(int));
            table.Columns.Add("JJSP_Scenes", typeof(int));
            table.Columns.Add("JNJES_Scenes", typeof(int));
            table.Columns.Add("JNJUK_Scenes", typeof(int));
            table.Columns.Add("JRIJP_Scenes", typeof(int));
            table.Columns.Add("KELLOGSUSPOC_Scenes", typeof(int));
            table.Columns.Add("KRAFTUS_Scenes", typeof(int));
            table.Columns.Add("MARS_CHOCO_RU_Scenes", typeof(int));
            table.Columns.Add("MHUK_Scenes", typeof(int));
            table.Columns.Add("MILLERCOORS_Scenes", typeof(int));
            table.Columns.Add("MOLSONONTRADEUK_Scenes", typeof(int));
            table.Columns.Add("MYCHEMISTAU_Scenes", typeof(int));
            table.Columns.Add("NESTLEROAMLERUK_Scenes", typeof(int));
            table.Columns.Add("NRF2018_Scenes", typeof(int));
            table.Columns.Add("PENAFLORAR_Scenes", typeof(int));
            table.Columns.Add("PMIUA_Scenes", typeof(int));
            table.Columns.Add("PNGAMERICA_Scenes", typeof(int));
            table.Columns.Add("PNGRO_Scenes", typeof(int));
            table.Columns.Add("RBAU_Scenes", typeof(int));
            table.Columns.Add("RBCA_Scenes", typeof(int));
            table.Columns.Add("RBDK_Scenes", typeof(int));
            table.Columns.Add("RBMANUAL_Scenes", typeof(int));
            table.Columns.Add("RINIELSENRU_MARS_Scenes", typeof(int));
            table.Columns.Add("RINIELSENUSQI_Scenes", typeof(int));
            table.Columns.Add("RIPANELCN_Scenes", typeof(int));
            table.Columns.Add("RISPARKWINEDE_Scenes", typeof(int));
            table.Columns.Add("SANOFIAE_Scenes", typeof(int));
            table.Columns.Add("SANOFIAU_Scenes", typeof(int));
            table.Columns.Add("SANOFIHK_Scenes", typeof(int));
            table.Columns.Add("SANOFIKH_Scenes", typeof(int));
            table.Columns.Add("SANOFINZ_Scenes", typeof(int));
            table.Columns.Add("SANOFIRU_Scenes", typeof(int));
            table.Columns.Add("SANOFITR_Scenes", typeof(int));
            table.Columns.Add("SANOFIUA_Scenes", typeof(int));
            table.Columns.Add("SHUFERSALIL_Scenes", typeof(int));
            table.Columns.Add("SUNTORYJP_Scenes", typeof(int));
            table.Columns.Add("TESCOTH_Scenes", typeof(int));
            table.Columns.Add("TESCOUK_Scenes", typeof(int));
            table.Columns.Add("TRAXROBOT_Scenes", typeof(int));
            table.Columns.Add("XSUITE_SHOWCASE_Scenes", typeof(int));
            table.Columns.Add("ABIUS_Scenes", typeof(int));
            table.Columns.Add("BADGERROBOT_Scenes", typeof(int));
            table.Columns.Add("CUBAU_Scenes", typeof(int));
            table.Columns.Add("DIAGEORU_Scenes", typeof(int));
            table.Columns.Add("GFKFR_Scenes", typeof(int));
            table.Columns.Add("JNJIT_Scenes", typeof(int));
            table.Columns.Add("LIGHTTRAX_Scenes", typeof(int));
            table.Columns.Add("LIGHTTRAXOFFLINE_Scenes", typeof(int));
            table.Columns.Add("RINIELSENFR_Scenes", typeof(int));
            table.Columns.Add("SANOFIKZ_Scenes", typeof(int));
            table.Columns.Add("SANOFILB_Scenes", typeof(int));
            table.Columns.Add("SANOFISA_Scenes", typeof(int));
            table.Columns.Add("SANOFIZA_Scenes", typeof(int));
            table.Columns.Add("WATSONSHK_Scenes", typeof(int));
            table.Columns.Add("KELLOGGUS_Scenes", typeof(int));
            table.Columns.Add("TSINGTAOBEERCN_Scenes", typeof(int));

            // note : the order of the field is very important
            // and should be same as the defined in table structure.
            scenes.ForEach(data => table.Rows.Add(
                                               data.ID
	                                        , data.QAT
	                                        , data.Center
	                                        , data.TotalScenes
	                                        , data.AvgsecondsperScenes
	                                        , data.ABICA
	                                        , data.ABICA_Scenes
	                                        , data.ABITAMSUS_PROD
	                                        , data.ABITAMSUS_PROD_Scenes
	                                        , data.AMERICAS_DEMO
	                                        , data.AMERICAS_DEMO_Scenes
	                                        , data.BATRU
	                                        , data.BATRU_Scenes
	                                        , data.BIKR
	                                        , data.BIKR_Scenes
	                                        , data.BIMY
	                                        , data.BIMY_Scenes
	                                        , data.BIPH
	                                        , data.BIPH_Scenes
	                                        , data.BISEASK
	                                        , data.BISEASK_Scenes
	                                        , data.BITH
	                                        , data.BITH_Scenes
	                                        , data.BIVN
	                                        , data.BIVN_Scenes
	                                        , data.BPAU
	                                        , data.BPAU_Scenes
	                                        , data.BRODMANN
	                                        , data.BRODMANN_Scenes
	                                        , data.CARREFOURAR
	                                        , data.CARREFOURAR_Scenes
	                                        , data.CCAAU
	                                        , data.CCAAU_Scenes
	                                        , data.CCABIZA
	                                        , data.CCABIZA_Scenes
	                                        , data.CCANZ
	                                        , data.CCANZ_Scenes
	                                        , data.CCBOTTLERSUS
	                                        , data.CCBOTTLERSUS_Scenes
	                                        , data.CCBR_PROD
	                                        , data.CCBR_PROD_Scenes
	                                        , data.CCJP
	                                        , data.CCJP_Scenes
	                                        , data.CCKH
	                                        , data.CCKH_Scenes
	                                        , data.CCKR
	                                        , data.CCKR_Scenes
	                                        , data.CCMY
	                                        , data.CCMY_Scenes
	                                        , data.CCPH
	                                        , data.CCPH_Scenes
	                                        , data.CCRPR_PROD
	                                        , data.CCRPR_PROD_Scenes
	                                        , data.CCRU
	                                        , data.CCRU_Scenes
	                                        , data.CCTH
	                                        , data.CCTH_Scenes
	                                        , data.CCTH_UAT
	                                        , data.CCTH_UAT_Scenes
	                                        , data.CCTRADMX
	                                        , data.CCTRADMX_Scenes
	                                        , data.CCUS
	                                        , data.CCUS_Scenes
	                                        , data.CCZA
	                                        , data.CCZA_Scenes
	                                        , data.CEREBOSTH
	                                        , data.CEREBOSTH_Scenes
	                                        , data.CROWDSOURCE
	                                        , data.CROWDSOURCE_Scenes
	                                        , data.DIAGEOAU
	                                        , data.DIAGEOAU_Scenes
	                                        , data.DIAGEOBR
	                                        , data.DIAGEOBR_Scenes
	                                        , data.DIAGEOGR
	                                        , data.DIAGEOGR_Scenes
	                                        , data.DIAGEOIE
	                                        , data.DIAGEOIE_Scenes
	                                        , data.DIAGEOKE
	                                        , data.DIAGEOKE_Scenes
	                                        , data.DIAGEOMX
	                                        , data.DIAGEOMX_Scenes
	                                        , data.DIAGEOPT
	                                        , data.DIAGEOPT_Scenes
	                                        , data.DIAGEOTW
	                                        , data.DIAGEOTW_Scenes
	                                        , data.DIAGEOUK
	                                        , data.DIAGEOUK_Scenes
	                                        , data.DIAGEOZA
	                                        , data.DIAGEOZA_Scenes
	                                        , data.EMEA_DEMO
	                                        , data.EMEA_DEMO_Scenes
	                                        , data.FERREROIT
	                                        , data.FERREROIT_Scenes
	                                        , data.GILLETTEUS
	                                        , data.GILLETTEUS_Scenes
	                                        , data.GOOGLEUS
	                                        , data.GOOGLEUS_Scenes
	                                        , data.HBCDE
	                                        , data.HBCDE_Scenes
	                                        , data.HEINEKENCN
	                                        , data.HEINEKENCN_Scenes
	                                        , data.HEINEKENUS_PROD
	                                        , data.HEINEKENUS_PROD_Scenes
	                                        , data.HEINZCR
	                                        , data.HEINZCR_Scenes
	                                        , data.INBEVAR
	                                        , data.INBEVAR_Scenes
	                                        , data.INBEVBE
	                                        , data.INBEVBE_Scenes
	                                        , data.INBEVBE_SAND
	                                        , data.INBEVBE_SAND_Scenes
	                                        , data.INBEVBR
	                                        , data.INBEVBR_Scenes
	                                        , data.INBEVBR_ONTRADE
	                                        , data.INBEVBR_ONTRADE_Scenes
	                                        , data.INBEVCL
	                                        , data.INBEVCL_Scenes
	                                        , data.INBEVCN
	                                        , data.INBEVCN_Scenes
	                                        , data.INBEVCOOLERAR
	                                        , data.INBEVCOOLERAR_Scenes
	                                        , data.INBEVCOOLERBR
	                                        , data.INBEVCOOLERBR_Scenes
	                                        , data.INBEVCOOLERUS
	                                        , data.INBEVCOOLERUS_Scenes
	                                        , data.INBEVFR
	                                        , data.INBEVFR_Scenes
	                                        , data.INBEVLU
	                                        , data.INBEVLU_Scenes
	                                        , data.INBEVLU_SAND
	                                        , data.INBEVLU_SAND_Scenes
	                                        , data.INBEVMX
	                                        , data.INBEVMX_Scenes
	                                        , data.INBEVNL
	                                        , data.INBEVNL_Scenes
	                                        , data.INBEVNL_SAND
	                                        , data.INBEVNL_SAND_Scenes
	                                        , data.INBEVPY
	                                        , data.INBEVPY_Scenes
	                                        , data.INBEVTRADMX
	                                        , data.INBEVTRADMX_Scenes
	                                        , data.INBEVUS
	                                        , data.INBEVUS_Scenes
	                                        , data.JTIUA
	                                        , data.JTIUA_Scenes
	                                        , data.KCMY
	                                        , data.KCMY_Scenes
	                                        , data.KCUS
	                                        , data.KCUS_Scenes
	                                        , data.KEURIGCA
	                                        , data.KEURIGCA_Scenes
	                                        , data.LABATTPLNOPTCA
	                                        , data.LABATTPLNOPTCA_Scenes
	                                        , data.LAVAZZAAT
	                                        , data.LAVAZZAAT_Scenes
	                                        , data.LAVAZZAAU
	                                        , data.LAVAZZAAU_Scenes
	                                        , data.LAVAZZABE
	                                        , data.LAVAZZABE_Scenes
	                                        , data.LAVAZZABG
	                                        , data.LAVAZZABG_Scenes
	                                        , data.LAVAZZACA
	                                        , data.LAVAZZACA_Scenes
	                                        , data.LAVAZZACH
	                                        , data.LAVAZZACH_Scenes
	                                        , data.LAVAZZACL
	                                        , data.LAVAZZACL_Scenes
	                                        , data.LAVAZZACN
	                                        , data.LAVAZZACN_Scenes
	                                        , data.LAVAZZACZ
	                                        , data.LAVAZZACZ_Scenes
	                                        , data.LAVAZZADE
	                                        , data.LAVAZZADE_Scenes
	                                        , data.LAVAZZADK
	                                        , data.LAVAZZADK_Scenes
	                                        , data.LAVAZZAEE
	                                        , data.LAVAZZAEE_Scenes
	                                        , data.LAVAZZAES
	                                        , data.LAVAZZAES_Scenes
	                                        , data.LAVAZZAFR
	                                        , data.LAVAZZAFR_Scenes
	                                        , data.LAVAZZAGR
	                                        , data.LAVAZZAGR_Scenes
	                                        , data.LAVAZZAHK
	                                        , data.LAVAZZAHK_Scenes
	                                        , data.LAVAZZAHR
	                                        , data.LAVAZZAHR_Scenes
	                                        , data.LAVAZZAIL
	                                        , data.LAVAZZAIL_Scenes
	                                        , data.LAVAZZAIT
	                                        , data.LAVAZZAIT_Scenes
	                                        , data.LAVAZZAJP
	                                        , data.LAVAZZAJP_Scenes
	                                        , data.LAVAZZAKR
	                                        , data.LAVAZZAKR_Scenes
	                                        , data.LAVAZZALT
	                                        , data.LAVAZZALT_Scenes
	                                        , data.LAVAZZALU
	                                        , data.LAVAZZALU_Scenes
	                                        , data.LAVAZZALV
	                                        , data.LAVAZZALV_Scenes
	                                        , data.LAVAZZAMA
	                                        , data.LAVAZZAMA_Scenes
	                                        , data.LAVAZZANL
	                                        , data.LAVAZZANL_Scenes
	                                        , data.LAVAZZAPL
	                                        , data.LAVAZZAPL_Scenes
	                                        , data.LAVAZZARO
	                                        , data.LAVAZZARO_Scenes
	                                        , data.LAVAZZARU
	                                        , data.LAVAZZARU_Scenes
	                                        , data.LAVAZZASA
	                                        , data.LAVAZZASA_Scenes
	                                        , data.LAVAZZASE
	                                        , data.LAVAZZASE_Scenes
	                                        , data.LAVAZZASG
	                                        , data.LAVAZZASG_Scenes
	                                        , data.LAVAZZAUAE
	                                        , data.LAVAZZAUAE_Scenes
	                                        , data.LAVAZZAUK
	                                        , data.LAVAZZAUK_Scenes
	                                        , data.LAVAZZAUS
	                                        , data.LAVAZZAUS_Scenes
	                                        , data.LAVAZZAZA
	                                        , data.LAVAZZAZA_Scenes
	                                        , data.LRSUK
	                                        , data.LRSUK_Scenes
	                                        , data.MARSBR
	                                        , data.MARSBR_Scenes
	                                        , data.MARSIN
	                                        , data.MARSIN_Scenes
	                                        , data.MARSIN_OLD
	                                        , data.MARSIN_OLD_Scenes
	                                        , data.MARSRU_PROD
	                                        , data.MARSRU_PROD_Scenes
	                                        , data.MAYORAID
	                                        , data.MAYORAID_Scenes
	                                        , data.MJNCN
	                                        , data.MJNCN_Scenes
	                                        , data.MOLSONCOOLERHN
	                                        , data.MOLSONCOOLERHN_Scenes
	                                        , data.MOLSONCOOLERHR
	                                        , data.MOLSONCOOLERHR_Scenes
	                                        , data.MOLSONCOORSUK
	                                        , data.MOLSONCOORSUK_Scenes
	                                        , data.NESTLEUK
	                                        , data.NESTLEUK_Scenes
	                                        , data.NIVEAUK
	                                        , data.NIVEAUK_Scenes
	                                        , data.NRF2017_DEMO
	                                        , data.NRF2017_DEMO_Scenes
	                                        , data.ONE_AMERICAS_DEMO
	                                        , data.ONE_AMERICAS_DEMO_Scenes
	                                        , data.ONE_APAC_DEMO
	                                        , data.ONE_APAC_DEMO_Scenes
	                                        , data.PEPSICOBR
	                                        , data.PEPSICOBR_Scenes
	                                        , data.PNGAU
	                                        , data.PNGAU_Scenes
	                                        , data.PNGAU_OLD
	                                        , data.PNGAU_OLD_Scenes
	                                        , data.PNGCAREUS
	                                        , data.PNGCAREUS_Scenes
	                                        , data.PNGCN_PROD
	                                        , data.PNGCN_PROD_Scenes
	                                        , data.PNGJP
	                                        , data.PNGJP_Scenes
	                                        , data.PNGJP_OLD
	                                        , data.PNGJP_OLD_Scenes
	                                        , data.PNGUS
	                                        , data.PNGUS_Scenes
	                                        , data.PNGUSEPISODIC
	                                        , data.PNGUSEPISODIC_Scenes
	                                        , data.RBUS
	                                        , data.RBUS_Scenes
	                                        , data.RE_XSUITE_DEMO
	                                        , data.RE_XSUITE_DEMO_Scenes
	                                        , data.REPNGCN_DEMO
	                                        , data.REPNGCN_DEMO_Scenes
	                                        , data.RI_DEMO
	                                        , data.RI_DEMO_Scenes
	                                        , data.RI_DIAGEOAU
	                                        , data.RI_DIAGEOAU_Scenes
	                                        , data.RIALCBEVUK_PROD
	                                        , data.RIALCBEVUK_PROD_Scenes
	                                        , data.RICOFFEEUS
	                                        , data.RICOFFEEUS_Scenes
	                                        , data.RINIELSENUS
	                                        , data.RINIELSENUS_Scenes
	                                        , data.RIPETCAREUK_PROD
	                                        , data.RIPETCAREUK_PROD_Scenes
	                                        , data.RIUS
	                                        , data.RIUS_Scenes
	                                        , data.RIUS_DEV
	                                        , data.RIUS_DEV_Scenes
	                                        , data.RNBDE
	                                        , data.RNBDE_Scenes
	                                        , data.SMARTCOOLER_POC2
	                                        , data.SMARTCOOLER_POC2_Scenes
	                                        , data.SMARTCOOLER_TRN
	                                        , data.SMARTCOOLER_TRN_Scenes
	                                        , data.SMARTCOOLER2_TRN
	                                        , data.SMARTCOOLER2_TRN_Scenes
	                                        , data.SOLARBR
	                                        , data.SOLARBR_Scenes
	                                        , data.STATIC_CAMERA_DEMO
	                                        , data.STATIC_CAMERA_DEMO_Scenes
	                                        , data.SWIRECN
	                                        , data.SWIRECN_Scenes
	                                        , data.SWIREREDCN
	                                        , data.SWIREREDCN_Scenes
	                                        , data.TNUVAIL
	                                        , data.TNUVAIL_Scenes
	                                        , data.TRAXDEMO_TS_PROD
	                                        , data.TRAXDEMO_TS_PROD_Scenes
	                                        , data.TWEAU
	                                        , data.TWEAU_Scenes
	                                        , data.RI_DEMO2
	                                        , data.RI_DEMO2_Scenes
	                                        , data.COMPASSCCH_SAND
	                                        , data.COMPASSCCH_SAND_Scenes
	                                        , data.LAVAZZAIT_SAND
	                                        , data.LAVAZZAIT_SAND_Scenes
	                                        , data.INBEVUS_STG
	                                        , data.INBEVUS_STG_Scenes
	                                        , data.LAVAZZAFR_SAND
	                                        , data.LAVAZZAFR_SAND_Scenes
	                                        , data.INBEVBE_SAND2
	                                        , data.INBEVBE_SAND2_Scenes
	                                        , data.INBEVLU_SAND2
	                                        , data.INBEVLU_SAND2_Scenes
	                                        , data.INBEVNL_SAND2
	                                        , data.INBEVNL_SAND2_Scenes
	                                        , data.CreatedDate
	                                        , data.CreatedBy

                                            , data.ImportedDate
                                            , data.ImportedYear
                                            , data.B2BRU_Scenes
                                            , data.BRMUS_Scenes
                                            , data.CBCIL_Scenes
                                            , data.CCCOOLERMX_Scenes
                                            , data.DIAGEOAR_Scenes
                                            , data.DIAGEOBENELUX_Scenes
                                            , data.DIAGEOCH_Scenes
                                            , data.DIAGEOGA_Scenes
                                            , data.DIAGEOGTR_Scenes
                                            , data.DIAGEONORDICS_Scenes
                                            , data.DIAGEOUS_Scenes
                                            , data.FERREROEXTIT_Scenes
                                            , data.GOOGLEHK_Scenes
                                            , data.HEINEKENPILOTCN_Scenes
                                            , data.IMBO_Scenes
                                            , data.INBEVCI_Scenes
                                            , data.INBEVCNTT_Scenes
                                            , data.INBEVCO_Scenes
                                            , data.INBEVZA_Scenes
                                            , data.INORU_Scenes
                                            , data.JJSP_Scenes
                                            , data.JNJES_Scenes
                                            , data.JNJUK_Scenes
                                            , data.JRIJP_Scenes
                                            , data.KELLOGSUSPOC_Scenes
                                            , data.KRAFTUS_Scenes
                                            , data.MARS_CHOCO_RU_Scenes
                                            , data.MHUK_Scenes
                                            , data.MILLERCOORS_Scenes
                                            , data.MOLSONONTRADEUK_Scenes
                                            , data.MYCHEMISTAU_Scenes
                                            , data.NESTLEROAMLERUK_Scenes
                                            , data.NRF2018_Scenes
                                            , data.PENAFLORAR_Scenes
                                            , data.PMIUA_Scenes
                                            , data.PNGAMERICA_Scenes
                                            , data.PNGRO_Scenes
                                            , data.RBAU_Scenes
                                            , data.RBCA_Scenes
                                            , data.RBDK_Scenes
                                            , data.RBMANUAL_Scenes
                                            , data.RINIELSENRU_MARS_Scenes
                                            , data.RINIELSENUSQI_Scenes
                                            , data.RIPANELCN_Scenes
                                            , data.RISPARKWINEDE_Scenes
                                            , data.SANOFIAE_Scenes
                                            , data.SANOFIAU_Scenes
                                            , data.SANOFIHK_Scenes
                                            , data.SANOFIKH_Scenes
                                            , data.SANOFINZ_Scenes
                                            , data.SANOFIRU_Scenes
                                            , data.SANOFITR_Scenes
                                            , data.SANOFIUA_Scenes
                                            , data.SHUFERSALIL_Scenes
                                            , data.SUNTORYJP_Scenes
                                            , data.TESCOTH_Scenes
                                            , data.TESCOUK_Scenes
                                            , data.TRAXROBOT_Scenes
                                            , data.XSUITE_SHOWCASE_Scenes
                                            , data.ABIUS_Scenes
                                            , data.BADGERROBOT_Scenes
                                            , data.CUBAU_Scenes
                                            , data.DIAGEORU_Scenes
                                            , data.GFKFR_Scenes
                                            , data.JNJIT_Scenes
                                            , data.LIGHTTRAX_Scenes
                                            , data.LIGHTTRAXOFFLINE_Scenes
                                            , data.RINIELSENFR_Scenes
                                            , data.SANOFIKZ_Scenes
                                            , data.SANOFILB_Scenes
                                            , data.SANOFISA_Scenes
                                            , data.SANOFIZA_Scenes
                                            , data.WATSONSHK_Scenes
                                            , data.KELLOGGUS_Scenes
                                             , data.TSINGTAOBEERCN_Scenes
                                                ));
            return table;
        }


        public int BulkInsertIntoSceneRecognition(List<SceneRecognitionEntity> scenerecognition)
        {
            using (var scope = new TransactionScope())
            {
                string connectionString = ConfigurationManager.ConnectionStrings["Client"].ConnectionString;
                var sqlConnection = new SqlConnection(connectionString);
                var sqlBulkCopy = new SqlBulkCopy(sqlConnection)
                {
                    DestinationTableName = "SceneRecognition",
                    //BulkCopyTimeout = 6000
                };
                var dataTable = GetDataTableForSceneRecognition(scenerecognition);
                sqlConnection.Open();

                sqlBulkCopy.WriteToServer(dataTable);

                scope.Complete();
                sqlBulkCopy.Close();
                sqlConnection.Close();
                sqlConnection.Dispose();
            }
            return scenerecognition.Count;
        }


        private DataTable GetDataTableForSceneRecognition(List<SceneRecognitionEntity> scenerecognition)
        {
            var table = new DataTable();
            table.Columns.Add("ID", typeof(string));
	        table.Columns.Add("QAT", typeof(string));
	        table.Columns.Add("Center", typeof(string));
	        table.Columns.Add("TotalSceneRecognition", typeof(int));
	        table.Columns.Add("Avgsecondsper_SceneRecognition", typeof(int));
	        table.Columns.Add("ABICA", typeof(int));
	        table.Columns.Add("ABICA_SceneRecognition", typeof(int));
	        table.Columns.Add("ABITAMSUS_PROD", typeof(int));
	        table.Columns.Add("ABITAMSUS_PROD_SceneRecognition", typeof(int));
	        table.Columns.Add("AMERICAS_DEMO", typeof(int));
	        table.Columns.Add("AMERICAS_DEMO_SceneRecognition", typeof(int));
	        table.Columns.Add("BATRU", typeof(int));
	        table.Columns.Add("BATRU_SceneRecognition", typeof(int));
	        table.Columns.Add("BIKR", typeof(int));
	        table.Columns.Add("BIKR_SceneRecognition", typeof(int));
	        table.Columns.Add("BIMY", typeof(int));
	        table.Columns.Add("BIMY_SceneRecognition", typeof(int));
	        table.Columns.Add("BIPH", typeof(int));
	        table.Columns.Add("BIPH_SceneRecognition", typeof(int));
	        table.Columns.Add("BISEASK", typeof(int));
	        table.Columns.Add("BISEASK_SceneRecognition", typeof(int));
	        table.Columns.Add("BITH", typeof(int));
	        table.Columns.Add("BITH_SceneRecognition", typeof(int));
	        table.Columns.Add("BIVN", typeof(int));
	        table.Columns.Add("BIVN_SceneRecognition", typeof(int));
	        table.Columns.Add("BPAU", typeof(int));
	        table.Columns.Add("BPAU_SceneRecognition", typeof(int));
	        table.Columns.Add("BRODMANN", typeof(int));
	        table.Columns.Add("BRODMANN_SceneRecognition", typeof(int));
	        table.Columns.Add("CARREFOURAR", typeof(int));
	        table.Columns.Add("CARREFOURAR_SceneRecognition", typeof(int));
	        table.Columns.Add("CCAAU", typeof(int));
	        table.Columns.Add("CCAAU_SceneRecognition", typeof(int));
	        table.Columns.Add("CCABIZA", typeof(int));
	        table.Columns.Add("CCABIZA_SceneRecognition", typeof(int));
	        table.Columns.Add("CCANZ", typeof(int));
	        table.Columns.Add("CCANZ_SceneRecognition", typeof(int));
	        table.Columns.Add("CCBOTTLERSUS", typeof(int));
	        table.Columns.Add("CCBOTTLERSUS_SceneRecognition", typeof(int));
	        table.Columns.Add("CCBR_PROD", typeof(int));
	        table.Columns.Add("CCBR_PROD_SceneRecognition", typeof(int));
	        table.Columns.Add("CCJP", typeof(int));
	        table.Columns.Add("CCJP_SceneRecognition", typeof(int));
	        table.Columns.Add("CCKH", typeof(int));
	        table.Columns.Add("CCKH_SceneRecognition", typeof(int));
	        table.Columns.Add("CCKR", typeof(int));
	        table.Columns.Add("CCKR_SceneRecognition", typeof(int));
	        table.Columns.Add("CCMY", typeof(int));
	        table.Columns.Add("CCMY_SceneRecognition", typeof(int));
	        table.Columns.Add("CCPH", typeof(int));
	        table.Columns.Add("CCPH_SceneRecognition", typeof(int));
	        table.Columns.Add("CCRPR_PROD", typeof(int));
	        table.Columns.Add("CCRPR_PROD_SceneRecognition", typeof(int));
	        table.Columns.Add("CCRU", typeof(int));
	        table.Columns.Add("CCRU_SceneRecognition", typeof(int));
	        table.Columns.Add("CCTH", typeof(int));
	        table.Columns.Add("CCTH_SceneRecognition", typeof(int));
	        table.Columns.Add("CCTH_UAT", typeof(int));
	        table.Columns.Add("CCTH_UAT_SceneRecognition", typeof(int));
	        table.Columns.Add("CCTRADMX", typeof(int));
	        table.Columns.Add("CCTRADMX_SceneRecognition", typeof(int));
	        table.Columns.Add("CCUS", typeof(int));
	        table.Columns.Add("CCUS_SceneRecognition", typeof(int));
	        table.Columns.Add("CCZA", typeof(int));
	        table.Columns.Add("CCZA_SceneRecognition", typeof(int));
	        table.Columns.Add("CEREBOSTH", typeof(int));
	        table.Columns.Add("CEREBOSTH_SceneRecognition", typeof(int));
	        table.Columns.Add("CROWDSOURCE", typeof(int));
	        table.Columns.Add("CROWDSOURCE_SceneRecognition", typeof(int));
	        table.Columns.Add("DIAGEOAU", typeof(int));
	        table.Columns.Add("DIAGEOAU_SceneRecognition", typeof(int));
	        table.Columns.Add("DIAGEOBR", typeof(int));
	        table.Columns.Add("DIAGEOBR_SceneRecognition", typeof(int));
	        table.Columns.Add("DIAGEOGR", typeof(int));
	        table.Columns.Add("DIAGEOGR_SceneRecognition", typeof(int));
	        table.Columns.Add("DIAGEOIE", typeof(int));
	        table.Columns.Add("DIAGEOIE_SceneRecognition", typeof(int));
	        table.Columns.Add("DIAGEOKE", typeof(int));
	        table.Columns.Add("DIAGEOKE_SceneRecognition", typeof(int));
	        table.Columns.Add("DIAGEOMX", typeof(int));
	        table.Columns.Add("DIAGEOMX_SceneRecognition", typeof(int));
	        table.Columns.Add("DIAGEOPT", typeof(int));
	        table.Columns.Add("DIAGEOPT_SceneRecognition", typeof(int));
	        table.Columns.Add("DIAGEOTW", typeof(int));
	        table.Columns.Add("DIAGEOTW_SceneRecognition", typeof(int));
	        table.Columns.Add("DIAGEOUK", typeof(int));
	        table.Columns.Add("DIAGEOUK_SceneRecognition", typeof(int));
	        table.Columns.Add("DIAGEOZA", typeof(int));
	        table.Columns.Add("DIAGEOZA_SceneRecognition", typeof(int));
	        table.Columns.Add("EMEA_DEMO", typeof(int));
	        table.Columns.Add("EMEA_DEMO_SceneRecognition", typeof(int));
	        table.Columns.Add("FERREROIT", typeof(int));
	        table.Columns.Add("FERREROIT_SceneRecognition", typeof(int));
	        table.Columns.Add("GILLETTEUS", typeof(int));
	        table.Columns.Add("GILLETTEUS_SceneRecognition", typeof(int));
	        table.Columns.Add("GOOGLEUS", typeof(int));
	        table.Columns.Add("GOOGLEUS_SceneRecognition", typeof(int));
	        table.Columns.Add("HBCDE", typeof(int));
	        table.Columns.Add("HBCDE_SceneRecognition", typeof(int));
	        table.Columns.Add("HEINEKENCN", typeof(int));
	        table.Columns.Add("HEINEKENCN_SceneRecognition", typeof(int));
	        table.Columns.Add("HEINEKENUS_PROD", typeof(int));
	        table.Columns.Add("HEINEKENUS_PROD_SceneRecognition", typeof(int));
	        table.Columns.Add("HEINZCR", typeof(int));
	        table.Columns.Add("HEINZCR_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVAR", typeof(int));
	        table.Columns.Add("INBEVAR_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVBE", typeof(int));
	        table.Columns.Add("INBEVBE_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVBE_SAND", typeof(int));
	        table.Columns.Add("INBEVBE_SAND_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVBR", typeof(int));
	        table.Columns.Add("INBEVBR_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVBR_ONTRADE", typeof(int));
	        table.Columns.Add("INBEVBR_ONTRADE_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVCL", typeof(int));
	        table.Columns.Add("INBEVCL_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVCN", typeof(int));
	        table.Columns.Add("INBEVCN_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVCOOLERAR", typeof(int));
	        table.Columns.Add("INBEVCOOLERAR_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVCOOLERBR", typeof(int));
	        table.Columns.Add("INBEVCOOLERBR_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVCOOLERUS", typeof(int));
	        table.Columns.Add("INBEVCOOLERUS_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVFR", typeof(int));
	        table.Columns.Add("INBEVFR_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVLU", typeof(int));
	        table.Columns.Add("INBEVLU_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVLU_SAND", typeof(int));
	        table.Columns.Add("INBEVLU_SAND_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVMX", typeof(int));
	        table.Columns.Add("INBEVMX_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVNL", typeof(int));
	        table.Columns.Add("INBEVNL_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVNL_SAND", typeof(int));
	        table.Columns.Add("INBEVNL_SAND_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVPY", typeof(int));
	        table.Columns.Add("INBEVPY_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVTRADMX", typeof(int));
	        table.Columns.Add("INBEVTRADMX_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVUS", typeof(int));
	        table.Columns.Add("INBEVUS_SceneRecognition", typeof(int));
	        table.Columns.Add("JTIUA", typeof(int));
	        table.Columns.Add("JTIUA_SceneRecognition", typeof(int));
	        table.Columns.Add("KCMY", typeof(int));
	        table.Columns.Add("KCMY_SceneRecognition", typeof(int));
	        table.Columns.Add("KCUS", typeof(int));
	        table.Columns.Add("KCUS_SceneRecognition", typeof(int));
	        table.Columns.Add("KEURIGCA", typeof(int));
	        table.Columns.Add("KEURIGCA_SceneRecognition", typeof(int));
	        table.Columns.Add("LABATTPLNOPTCA", typeof(int));
	        table.Columns.Add("LABATTPLNOPTCA_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAAT", typeof(int));
	        table.Columns.Add("LAVAZZAAT_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAAU", typeof(int));
	        table.Columns.Add("LAVAZZAAU_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZABE", typeof(int));
	        table.Columns.Add("LAVAZZABE_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZABG", typeof(int));
	        table.Columns.Add("LAVAZZABG_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZACA", typeof(int));
	        table.Columns.Add("LAVAZZACA_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZACH", typeof(int));
	        table.Columns.Add("LAVAZZACH_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZACL", typeof(int));
	        table.Columns.Add("LAVAZZACL_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZACN", typeof(int));
	        table.Columns.Add("LAVAZZACN_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZACZ", typeof(int));
	        table.Columns.Add("LAVAZZACZ_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZADE", typeof(int));
	        table.Columns.Add("LAVAZZADE_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZADK", typeof(int));
	        table.Columns.Add("LAVAZZADK_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAEE", typeof(int));
	        table.Columns.Add("LAVAZZAEE_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAES", typeof(int));
	        table.Columns.Add("LAVAZZAES_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAFR", typeof(int));
	        table.Columns.Add("LAVAZZAFR_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAGR", typeof(int));
	        table.Columns.Add("LAVAZZAGR_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAHK", typeof(int));
	        table.Columns.Add("LAVAZZAHK_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAHR", typeof(int));
	        table.Columns.Add("LAVAZZAHR_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAIL", typeof(int));
	        table.Columns.Add("LAVAZZAIL_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAIT", typeof(int));
	        table.Columns.Add("LAVAZZAIT_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAJP", typeof(int));
	        table.Columns.Add("LAVAZZAJP_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAKR", typeof(int));
	        table.Columns.Add("LAVAZZAKR_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZALT", typeof(int));
	        table.Columns.Add("LAVAZZALT_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZALU", typeof(int));
	        table.Columns.Add("LAVAZZALU_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZALV", typeof(int));
	        table.Columns.Add("LAVAZZALV_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAMA", typeof(int));
	        table.Columns.Add("LAVAZZAMA_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZANL", typeof(int));
	        table.Columns.Add("LAVAZZANL_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAPL", typeof(int));
	        table.Columns.Add("LAVAZZAPL_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZARO", typeof(int));
	        table.Columns.Add("LAVAZZARO_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZARU", typeof(int));
	        table.Columns.Add("LAVAZZARU_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZASA", typeof(int));
	        table.Columns.Add("LAVAZZASA_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZASE", typeof(int));
	        table.Columns.Add("LAVAZZASE_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZASG", typeof(int));
	        table.Columns.Add("LAVAZZASG_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAUAE", typeof(int));
	        table.Columns.Add("LAVAZZAUAE_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAUK", typeof(int));
	        table.Columns.Add("LAVAZZAUK_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAUS", typeof(int));
	        table.Columns.Add("LAVAZZAUS_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAZA", typeof(int));
	        table.Columns.Add("LAVAZZAZA_SceneRecognition", typeof(int));
	        table.Columns.Add("LRSUK", typeof(int));
	        table.Columns.Add("LRSUK_SceneRecognition", typeof(int));
	        table.Columns.Add("MARSBR", typeof(int));
	        table.Columns.Add("MARSBR_SceneRecognition", typeof(int));
	        table.Columns.Add("MARSIN", typeof(int));
	        table.Columns.Add("MARSIN_SceneRecognition", typeof(int));
	        table.Columns.Add("MARSIN_OLD", typeof(int));
	        table.Columns.Add("MARSIN_OLD_SceneRecognition", typeof(int));
	        table.Columns.Add("MARSRU_PROD", typeof(int));
	        table.Columns.Add("MARSRU_PROD_SceneRecognition", typeof(int));
	        table.Columns.Add("MAYORAID", typeof(int));
	        table.Columns.Add("MAYORAID_SceneRecognition", typeof(int));
	        table.Columns.Add("MJNCN", typeof(int));
	        table.Columns.Add("MJNCN_SceneRecognition", typeof(int));
	        table.Columns.Add("MOLSONCOOLERHN", typeof(int));
	        table.Columns.Add("MOLSONCOOLERHN_SceneRecognition", typeof(int));
	        table.Columns.Add("MOLSONCOOLERHR", typeof(int));
	        table.Columns.Add("MOLSONCOOLERHR_SceneRecognition", typeof(int));
	        table.Columns.Add("MOLSONCOORSUK", typeof(int));
	        table.Columns.Add("MOLSONCOORSUK_SceneRecognition", typeof(int));
	        table.Columns.Add("NESTLEUK", typeof(int));
	        table.Columns.Add("NESTLEUK_SceneRecognition", typeof(int));
	        table.Columns.Add("NIVEAUK", typeof(int));
	        table.Columns.Add("NIVEAUK_SceneRecognition", typeof(int));
	        table.Columns.Add("NRF2017_DEMO", typeof(int));
	        table.Columns.Add("NRF2017_DEMO_SceneRecognition", typeof(int));
	        table.Columns.Add("ONE_AMERICAS_DEMO", typeof(int));
	        table.Columns.Add("ONE_AMERICAS_DEMO_SceneRecognition", typeof(int));
	        table.Columns.Add("ONE_APAC_DEMO", typeof(int));
	        table.Columns.Add("ONE_APAC_DEMO_SceneRecognition", typeof(int));
	        table.Columns.Add("PEPSICOBR", typeof(int));
	        table.Columns.Add("PEPSICOBR_SceneRecognition", typeof(int));
	        table.Columns.Add("PNGAU", typeof(int));
	        table.Columns.Add("PNGAU_SceneRecognition", typeof(int));
	        table.Columns.Add("PNGAU_OLD", typeof(int));
	        table.Columns.Add("PNGAU_OLD_SceneRecognition", typeof(int));
	        table.Columns.Add("PNGCAREUS", typeof(int));
	        table.Columns.Add("PNGCAREUS_SceneRecognition", typeof(int));
	        table.Columns.Add("PNGCN_PROD", typeof(int));
	        table.Columns.Add("PNGCN_PROD_SceneRecognition", typeof(int));
	        table.Columns.Add("PNGJP", typeof(int));
	        table.Columns.Add("PNGJP_SceneRecognition", typeof(int));
	        table.Columns.Add("PNGJP_OLD", typeof(int));
	        table.Columns.Add("PNGJP_OLD_SceneRecognition", typeof(int));
	        table.Columns.Add("PNGUS", typeof(int));
	        table.Columns.Add("PNGUS_SceneRecognition", typeof(int));
	        table.Columns.Add("PNGUSEPISODIC", typeof(int));
	        table.Columns.Add("PNGUSEPISODIC_SceneRecognition", typeof(int));
	        table.Columns.Add("RBUS", typeof(int));
	        table.Columns.Add("RBUS_SceneRecognition", typeof(int));
	        table.Columns.Add("RE_XSUITE_DEMO", typeof(int));
	        table.Columns.Add("RE_XSUITE_DEMO_SceneRecognition", typeof(int));
	        table.Columns.Add("REPNGCN_DEMO", typeof(int));
	        table.Columns.Add("REPNGCN_DEMO_SceneRecognition", typeof(int));
	        table.Columns.Add("RI_DEMO", typeof(int));
	        table.Columns.Add("RI_DEMO_SceneRecognition", typeof(int));
	        table.Columns.Add("RI_DIAGEOAU", typeof(int));
	        table.Columns.Add("RI_DIAGEOAU_SceneRecognition", typeof(int));
	        table.Columns.Add("RIALCBEVUK_PROD", typeof(int));
	        table.Columns.Add("RIALCBEVUK_PROD_SceneRecognition", typeof(int));
	        table.Columns.Add("RICOFFEEUS", typeof(int));
	        table.Columns.Add("RICOFFEEUS_SceneRecognition", typeof(int));
	        table.Columns.Add("RINIELSENUS", typeof(int));
	        table.Columns.Add("RINIELSENUS_SceneRecognition", typeof(int));
	        table.Columns.Add("RIPETCAREUK_PROD", typeof(int));
	        table.Columns.Add("RIPETCAREUK_PROD_SceneRecognition", typeof(int));
	        table.Columns.Add("RIUS", typeof(int));
	        table.Columns.Add("RIUS_SceneRecognition", typeof(int));
	        table.Columns.Add("RIUS_DEV", typeof(int));
	        table.Columns.Add("RIUS_DEV_SceneRecognition", typeof(int));
	        table.Columns.Add("RNBDE", typeof(int));
	        table.Columns.Add("RNBDE_SceneRecognition", typeof(int));
	        table.Columns.Add("SMARTCOOLER_POC2", typeof(int));
	        table.Columns.Add("SMARTCOOLER_POC2_SceneRecognition", typeof(int));
	        table.Columns.Add("SMARTCOOLER_TRN", typeof(int));
	        table.Columns.Add("SMARTCOOLER_TRN_SceneRecognition", typeof(int));
	        table.Columns.Add("SMARTCOOLER2_TRN", typeof(int));
	        table.Columns.Add("SMARTCOOLER2_TRN_SceneRecognition", typeof(int));
	        table.Columns.Add("SOLARBR", typeof(int));
	        table.Columns.Add("SOLARBR_SceneRecognition", typeof(int));
	        table.Columns.Add("STATIC_CAMERA_DEMO", typeof(int));
	        table.Columns.Add("STATIC_CAMERA_DEMO_SceneRecognition", typeof(int));
	        table.Columns.Add("SWIRECN", typeof(int));
	        table.Columns.Add("SWIRECN_SceneRecognition", typeof(int));
	        table.Columns.Add("SWIREREDCN", typeof(int));
	        table.Columns.Add("SWIREREDCN_SceneRecognition", typeof(int));
	        table.Columns.Add("TNUVAIL", typeof(int));
	        table.Columns.Add("TNUVAIL_SceneRecognition", typeof(int));
	        table.Columns.Add("TRAXDEMO_TS_PROD", typeof(int));
	        table.Columns.Add("TRAXDEMO_TS_PROD_SceneRecognition", typeof(int));
	        table.Columns.Add("TWEAU", typeof(int));
	        table.Columns.Add("TWEAU_SceneRecognition", typeof(int));
	        table.Columns.Add("RI_DEMO2", typeof(int));
	        table.Columns.Add("RI_DEMO2_SceneRecognition", typeof(int));
	        table.Columns.Add("COMPASSCCH_SAND", typeof(int));
	        table.Columns.Add("COMPASSCCH_SAND_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAIT_SAND", typeof(int));
	        table.Columns.Add("LAVAZZAIT_SAND_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVUS_STG", typeof(int));
	        table.Columns.Add("INBEVUS_STG_SceneRecognition", typeof(int));
	        table.Columns.Add("LAVAZZAFR_SAND", typeof(int));
	        table.Columns.Add("LAVAZZAFR_SAND_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVBE_SAND2", typeof(int));
	        table.Columns.Add("INBEVBE_SAND2_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVLU_SAND2", typeof(int));
	        table.Columns.Add("INBEVLU_SAND2_SceneRecognition", typeof(int));
	        table.Columns.Add("INBEVNL_SAND2", typeof(int));
	        table.Columns.Add("INBEVNL_SAND2_SceneRecognition", typeof(int));
	        table.Columns.Add("CreatedDate", typeof(string));
	        table.Columns.Add("CreatedBy", typeof(string));

	         table.Columns.Add("ImportedDate", typeof(string));
	         table.Columns.Add("ImportedYear", typeof(string));
	         table.Columns.Add("B2BRU", typeof(int));
	         table.Columns.Add("BRMUS", typeof(int));
	         table.Columns.Add("CBCIL", typeof(int));
	         table.Columns.Add("CCCOOLERMX", typeof(int));
	         table.Columns.Add("DIAGEOAR", typeof(int));
	         table.Columns.Add("DIAGEOBENELUX", typeof(int));
	         table.Columns.Add("DIAGEOCH", typeof(int));
	         table.Columns.Add("DIAGEOGA", typeof(int));
	         table.Columns.Add("DIAGEOGTR", typeof(int));
	         table.Columns.Add("DIAGEONORDICS", typeof(int));
	         table.Columns.Add("DIAGEOUS", typeof(int));
	         table.Columns.Add("FERREROEXTIT", typeof(int));
	         table.Columns.Add("GOOGLEHK", typeof(int));
	         table.Columns.Add("HEINEKENPILOTCN", typeof(int));
	         table.Columns.Add("IMBO", typeof(int));
	         table.Columns.Add("INBEVCI", typeof(int));
	         table.Columns.Add("INBEVCNTT", typeof(int));
	         table.Columns.Add("INBEVCO", typeof(int));
	         table.Columns.Add("INBEVZA", typeof(int));
	         table.Columns.Add("INORU", typeof(int));
	         table.Columns.Add("JJSP", typeof(int));
	         table.Columns.Add("JNJES", typeof(int));
	         table.Columns.Add("JNJUK", typeof(int));
	         table.Columns.Add("JRIJP", typeof(int));
	         table.Columns.Add("KELLOGSUSPOC", typeof(int));
	         table.Columns.Add("KRAFTUS", typeof(int));
	         table.Columns.Add("MARS_CHOCO_RU", typeof(int));
	         table.Columns.Add("MHUK", typeof(int));
	         table.Columns.Add("MILLERCOORS", typeof(int));
	         table.Columns.Add("MOLSONONTRADEUK", typeof(int));
	         table.Columns.Add("MYCHEMISTAU", typeof(int));
	         table.Columns.Add("NESTLEROAMLERUK", typeof(int));
	         table.Columns.Add("NRF2018", typeof(int));
	         table.Columns.Add("PENAFLORAR", typeof(int));
	         table.Columns.Add("PMIUA", typeof(int));
	         table.Columns.Add("PNGAMERICA", typeof(int));
	         table.Columns.Add("PNGRO", typeof(int));
	         table.Columns.Add("RBAU", typeof(int));
	         table.Columns.Add("RBCA", typeof(int));
	         table.Columns.Add("RBDK", typeof(int));
	         table.Columns.Add("RBMANUAL", typeof(int));
	         table.Columns.Add("RINIELSENRU_MARS", typeof(int));
	         table.Columns.Add("RINIELSENUSQI", typeof(int));
	         table.Columns.Add("RIPANELCN", typeof(int));
	         table.Columns.Add("RISPARKWINEDE", typeof(int));
	         table.Columns.Add("SANOFIAE", typeof(int));
	         table.Columns.Add("SANOFIAU", typeof(int));
	         table.Columns.Add("SANOFIHK", typeof(int));
	         table.Columns.Add("SANOFIKH", typeof(int));
	         table.Columns.Add("SANOFINZ", typeof(int));
	         table.Columns.Add("SANOFIRU", typeof(int));
	         table.Columns.Add("SANOFITR", typeof(int));
	         table.Columns.Add("SANOFIUA", typeof(int));
	         table.Columns.Add("SHUFERSALIL", typeof(int));
	         table.Columns.Add("SUNTORYJP", typeof(int));
	         table.Columns.Add("TESCOTH", typeof(int));
	         table.Columns.Add("TESCOUK", typeof(int));
	         table.Columns.Add("TRAXROBOT", typeof(int));
	         table.Columns.Add("XSUITE_SHOWCASE", typeof(int));
	         table.Columns.Add("ABIUS", typeof(int));
	         table.Columns.Add("BADGERROBOT", typeof(int));
	         table.Columns.Add("CUBAU", typeof(int));
	         table.Columns.Add("DIAGEORU", typeof(int));
	         table.Columns.Add("GFKFR", typeof(int));
	         table.Columns.Add("JNJIT", typeof(int));
	         table.Columns.Add("LIGHTTRAX", typeof(int));
	         table.Columns.Add("LIGHTTRAXOFFLINE", typeof(int));
	         table.Columns.Add("RINIELSENFR", typeof(int));
	         table.Columns.Add("SANOFIKZ", typeof(int));
	         table.Columns.Add("SANOFILB", typeof(int));
	         table.Columns.Add("SANOFISA", typeof(int));
	         table.Columns.Add("SANOFIZA", typeof(int));
	         table.Columns.Add("WATSONSHK", typeof(int));
	         table.Columns.Add("KELLOGGUS", typeof(int));
             table.Columns.Add("TSINGTAOBEERCN", typeof(int));

            // note : the order of the field is very important
            // and should be same as the defined in table structure.
            scenerecognition.ForEach(data => table.Rows.Add(
                                                data.ID
	                                            , data.QAT
	                                            , data.Center
	                                            , data.TotalSceneRecognition
	                                            , data.Avgsecondsper_SceneRecognition
	                                            , data.ABICA
	                                            , data.ABICA_SceneRecognition
	                                            , data.ABITAMSUS_PROD
	                                            , data.ABITAMSUS_PROD_SceneRecognition
	                                            , data.AMERICAS_DEMO
	                                            , data.AMERICAS_DEMO_SceneRecognition
	                                            , data.BATRU
	                                            , data.BATRU_SceneRecognition
	                                            , data.BIKR
	                                            , data.BIKR_SceneRecognition
	                                            , data.BIMY
	                                            , data.BIMY_SceneRecognition
	                                            , data.BIPH
	                                            , data.BIPH_SceneRecognition
	                                            , data.BISEASK
	                                            , data.BISEASK_SceneRecognition
	                                            , data.BITH
	                                            , data.BITH_SceneRecognition
	                                            , data.BIVN
	                                            , data.BIVN_SceneRecognition
	                                            , data.BPAU
	                                            , data.BPAU_SceneRecognition
	                                            , data.BRODMANN
	                                            , data.BRODMANN_SceneRecognition
	                                            , data.CARREFOURAR
	                                            , data.CARREFOURAR_SceneRecognition
	                                            , data.CCAAU
	                                            , data.CCAAU_SceneRecognition
	                                            , data.CCABIZA
	                                            , data.CCABIZA_SceneRecognition
	                                            , data.CCANZ
	                                            , data.CCANZ_SceneRecognition
	                                            , data.CCBOTTLERSUS
	                                            , data.CCBOTTLERSUS_SceneRecognition
	                                            , data.CCBR_PROD
	                                            , data.CCBR_PROD_SceneRecognition
	                                            , data.CCJP
	                                            , data.CCJP_SceneRecognition
	                                            , data.CCKH
	                                            , data.CCKH_SceneRecognition
	                                            , data.CCKR
	                                            , data.CCKR_SceneRecognition
	                                            , data.CCMY
	                                            , data.CCMY_SceneRecognition
	                                            , data.CCPH
	                                            , data.CCPH_SceneRecognition
	                                            , data.CCRPR_PROD
	                                            , data.CCRPR_PROD_SceneRecognition
	                                            , data.CCRU
	                                            , data.CCRU_SceneRecognition
	                                            , data.CCTH
	                                            , data.CCTH_SceneRecognition
	                                            , data.CCTH_UAT
	                                            , data.CCTH_UAT_SceneRecognition
	                                            , data.CCTRADMX
	                                            , data.CCTRADMX_SceneRecognition
	                                            , data.CCUS
	                                            , data.CCUS_SceneRecognition
	                                            , data.CCZA
	                                            , data.CCZA_SceneRecognition
	                                            , data.CEREBOSTH
	                                            , data.CEREBOSTH_SceneRecognition
	                                            , data.CROWDSOURCE
	                                            , data.CROWDSOURCE_SceneRecognition
	                                            , data.DIAGEOAU
	                                            , data.DIAGEOAU_SceneRecognition
	                                            , data.DIAGEOBR
	                                            , data.DIAGEOBR_SceneRecognition
	                                            , data.DIAGEOGR
	                                            , data.DIAGEOGR_SceneRecognition
	                                            , data.DIAGEOIE
	                                            , data.DIAGEOIE_SceneRecognition
	                                            , data.DIAGEOKE
	                                            , data.DIAGEOKE_SceneRecognition
	                                            , data.DIAGEOMX
	                                            , data.DIAGEOMX_SceneRecognition
	                                            , data.DIAGEOPT
	                                            , data.DIAGEOPT_SceneRecognition
	                                            , data.DIAGEOTW
	                                            , data.DIAGEOTW_SceneRecognition
	                                            , data.DIAGEOUK
	                                            , data.DIAGEOUK_SceneRecognition
	                                            , data.DIAGEOZA
	                                            , data.DIAGEOZA_SceneRecognition
	                                            , data.EMEA_DEMO
	                                            , data.EMEA_DEMO_SceneRecognition
	                                            , data.FERREROIT
	                                            , data.FERREROIT_SceneRecognition
	                                            , data.GILLETTEUS
	                                            , data.GILLETTEUS_SceneRecognition
	                                            , data.GOOGLEUS
	                                            , data.GOOGLEUS_SceneRecognition
	                                            , data.HBCDE
	                                            , data.HBCDE_SceneRecognition
	                                            , data.HEINEKENCN
	                                            , data.HEINEKENCN_SceneRecognition
	                                            , data.HEINEKENUS_PROD
	                                            , data.HEINEKENUS_PROD_SceneRecognition
	                                            , data.HEINZCR
	                                            , data.HEINZCR_SceneRecognition
	                                            , data.INBEVAR
	                                            , data.INBEVAR_SceneRecognition
	                                            , data.INBEVBE
	                                            , data.INBEVBE_SceneRecognition
	                                            , data.INBEVBE_SAND
	                                            , data.INBEVBE_SAND_SceneRecognition
	                                            , data.INBEVBR
	                                            , data.INBEVBR_SceneRecognition
	                                            , data.INBEVBR_ONTRADE
	                                            , data.INBEVBR_ONTRADE_SceneRecognition
	                                            , data.INBEVCL
	                                            , data.INBEVCL_SceneRecognition
	                                            , data.INBEVCN
	                                            , data.INBEVCN_SceneRecognition
	                                            , data.INBEVCOOLERAR
	                                            , data.INBEVCOOLERAR_SceneRecognition
	                                            , data.INBEVCOOLERBR
	                                            , data.INBEVCOOLERBR_SceneRecognition
	                                            , data.INBEVCOOLERUS
	                                            , data.INBEVCOOLERUS_SceneRecognition
	                                            , data.INBEVFR
	                                            , data.INBEVFR_SceneRecognition
	                                            , data.INBEVLU
	                                            , data.INBEVLU_SceneRecognition
	                                            , data.INBEVLU_SAND
	                                            , data.INBEVLU_SAND_SceneRecognition
	                                            , data.INBEVMX
	                                            , data.INBEVMX_SceneRecognition
	                                            , data.INBEVNL
	                                            , data.INBEVNL_SceneRecognition
	                                            , data.INBEVNL_SAND
	                                            , data.INBEVNL_SAND_SceneRecognition
	                                            , data.INBEVPY
	                                            , data.INBEVPY_SceneRecognition
	                                            , data.INBEVTRADMX
	                                            , data.INBEVTRADMX_SceneRecognition
	                                            , data.INBEVUS
	                                            , data.INBEVUS_SceneRecognition
	                                            , data.JTIUA
	                                            , data.JTIUA_SceneRecognition
	                                            , data.KCMY
	                                            , data.KCMY_SceneRecognition
	                                            , data.KCUS
	                                            , data.KCUS_SceneRecognition
	                                            , data.KEURIGCA
	                                            , data.KEURIGCA_SceneRecognition
	                                            , data.LABATTPLNOPTCA
	                                            , data.LABATTPLNOPTCA_SceneRecognition
	                                            , data.LAVAZZAAT
	                                            , data.LAVAZZAAT_SceneRecognition
	                                            , data.LAVAZZAAU
	                                            , data.LAVAZZAAU_SceneRecognition
	                                            , data.LAVAZZABE
	                                            , data.LAVAZZABE_SceneRecognition
	                                            , data.LAVAZZABG
	                                            , data.LAVAZZABG_SceneRecognition
	                                            , data.LAVAZZACA
	                                            , data.LAVAZZACA_SceneRecognition
	                                            , data.LAVAZZACH
	                                            , data.LAVAZZACH_SceneRecognition
	                                            , data.LAVAZZACL
	                                            , data.LAVAZZACL_SceneRecognition
	                                            , data.LAVAZZACN
	                                            , data.LAVAZZACN_SceneRecognition
	                                            , data.LAVAZZACZ
	                                            , data.LAVAZZACZ_SceneRecognition
	                                            , data.LAVAZZADE
	                                            , data.LAVAZZADE_SceneRecognition
	                                            , data.LAVAZZADK
	                                            , data.LAVAZZADK_SceneRecognition
	                                            , data.LAVAZZAEE
	                                            , data.LAVAZZAEE_SceneRecognition
	                                            , data.LAVAZZAES
	                                            , data.LAVAZZAES_SceneRecognition
	                                            , data.LAVAZZAFR
	                                            , data.LAVAZZAFR_SceneRecognition
	                                            , data.LAVAZZAGR
	                                            , data.LAVAZZAGR_SceneRecognition
	                                            , data.LAVAZZAHK
	                                            , data.LAVAZZAHK_SceneRecognition
	                                            , data.LAVAZZAHR
	                                            , data.LAVAZZAHR_SceneRecognition
	                                            , data.LAVAZZAIL
	                                            , data.LAVAZZAIL_SceneRecognition
	                                            , data.LAVAZZAIT
	                                            , data.LAVAZZAIT_SceneRecognition
	                                            , data.LAVAZZAJP
	                                            , data.LAVAZZAJP_SceneRecognition
	                                            , data.LAVAZZAKR
	                                            , data.LAVAZZAKR_SceneRecognition
	                                            , data.LAVAZZALT
	                                            , data.LAVAZZALT_SceneRecognition
	                                            , data.LAVAZZALU
	                                            , data.LAVAZZALU_SceneRecognition
	                                            , data.LAVAZZALV
	                                            , data.LAVAZZALV_SceneRecognition
	                                            , data.LAVAZZAMA
	                                            , data.LAVAZZAMA_SceneRecognition
	                                            , data.LAVAZZANL
	                                            , data.LAVAZZANL_SceneRecognition
	                                            , data.LAVAZZAPL
	                                            , data.LAVAZZAPL_SceneRecognition
	                                            , data.LAVAZZARO
	                                            , data.LAVAZZARO_SceneRecognition
	                                            , data.LAVAZZARU
	                                            , data.LAVAZZARU_SceneRecognition
	                                            , data.LAVAZZASA
	                                            , data.LAVAZZASA_SceneRecognition
	                                            , data.LAVAZZASE
	                                            , data.LAVAZZASE_SceneRecognition
	                                            , data.LAVAZZASG
	                                            , data.LAVAZZASG_SceneRecognition
	                                            , data.LAVAZZAUAE
	                                            , data.LAVAZZAUAE_SceneRecognition
	                                            , data.LAVAZZAUK
	                                            , data.LAVAZZAUK_SceneRecognition
	                                            , data.LAVAZZAUS
	                                            , data.LAVAZZAUS_SceneRecognition
	                                            , data.LAVAZZAZA
	                                            , data.LAVAZZAZA_SceneRecognition
	                                            , data.LRSUK
	                                            , data.LRSUK_SceneRecognition
	                                            , data.MARSBR
	                                            , data.MARSBR_SceneRecognition
	                                            , data.MARSIN
	                                            , data.MARSIN_SceneRecognition
	                                            , data.MARSIN_OLD
	                                            , data.MARSIN_OLD_SceneRecognition
	                                            , data.MARSRU_PROD
	                                            , data.MARSRU_PROD_SceneRecognition
	                                            , data.MAYORAID
	                                            , data.MAYORAID_SceneRecognition
	                                            , data.MJNCN
	                                            , data.MJNCN_SceneRecognition
	                                            , data.MOLSONCOOLERHN
	                                            , data.MOLSONCOOLERHN_SceneRecognition
	                                            , data.MOLSONCOOLERHR
	                                            , data.MOLSONCOOLERHR_SceneRecognition
	                                            , data.MOLSONCOORSUK
	                                            , data.MOLSONCOORSUK_SceneRecognition
	                                            , data.NESTLEUK
	                                            , data.NESTLEUK_SceneRecognition
	                                            , data.NIVEAUK
	                                            , data.NIVEAUK_SceneRecognition
	                                            , data.NRF2017_DEMO
	                                            , data.NRF2017_DEMO_SceneRecognition
	                                            , data.ONE_AMERICAS_DEMO
	                                            , data.ONE_AMERICAS_DEMO_SceneRecognition
	                                            , data.ONE_APAC_DEMO
	                                            , data.ONE_APAC_DEMO_SceneRecognition
	                                            , data.PEPSICOBR
	                                            , data.PEPSICOBR_SceneRecognition
	                                            , data.PNGAU
	                                            , data.PNGAU_SceneRecognition
	                                            , data.PNGAU_OLD
	                                            , data.PNGAU_OLD_SceneRecognition
	                                            , data.PNGCAREUS
	                                            , data.PNGCAREUS_SceneRecognition
	                                            , data.PNGCN_PROD
	                                            , data.PNGCN_PROD_SceneRecognition
	                                            , data.PNGJP
	                                            , data.PNGJP_SceneRecognition
	                                            , data.PNGJP_OLD
	                                            , data.PNGJP_OLD_SceneRecognition
	                                            , data.PNGUS
	                                            , data.PNGUS_SceneRecognition
	                                            , data.PNGUSEPISODIC
	                                            , data.PNGUSEPISODIC_SceneRecognition
	                                            , data.RBUS
	                                            , data.RBUS_SceneRecognition
	                                            , data.RE_XSUITE_DEMO
	                                            , data.RE_XSUITE_DEMO_SceneRecognition
	                                            , data.REPNGCN_DEMO
	                                            , data.REPNGCN_DEMO_SceneRecognition
	                                            , data.RI_DEMO
	                                            , data.RI_DEMO_SceneRecognition
	                                            , data.RI_DIAGEOAU
	                                            , data.RI_DIAGEOAU_SceneRecognition
	                                            , data.RIALCBEVUK_PROD
	                                            , data.RIALCBEVUK_PROD_SceneRecognition
	                                            , data.RICOFFEEUS
	                                            , data.RICOFFEEUS_SceneRecognition
	                                            , data.RINIELSENUS
	                                            , data.RINIELSENUS_SceneRecognition
	                                            , data.RIPETCAREUK_PROD
	                                            , data.RIPETCAREUK_PROD_SceneRecognition
	                                            , data.RIUS
	                                            , data.RIUS_SceneRecognition
	                                            , data.RIUS_DEV
	                                            , data.RIUS_DEV_SceneRecognition
	                                            , data.RNBDE
	                                            , data.RNBDE_SceneRecognition
	                                            , data.SMARTCOOLER_POC2
	                                            , data.SMARTCOOLER_POC2_SceneRecognition
	                                            , data.SMARTCOOLER_TRN
	                                            , data.SMARTCOOLER_TRN_SceneRecognition
	                                            , data.SMARTCOOLER2_TRN
	                                            , data.SMARTCOOLER2_TRN_SceneRecognition
	                                            , data.SOLARBR
	                                            , data.SOLARBR_SceneRecognition
	                                            , data.STATIC_CAMERA_DEMO
	                                            , data.STATIC_CAMERA_DEMO_SceneRecognition
	                                            , data.SWIRECN
	                                            , data.SWIRECN_SceneRecognition
	                                            , data.SWIREREDCN
	                                            , data.SWIREREDCN_SceneRecognition
	                                            , data.TNUVAIL
	                                            , data.TNUVAIL_SceneRecognition
	                                            , data.TRAXDEMO_TS_PROD
	                                            , data.TRAXDEMO_TS_PROD_SceneRecognition
	                                            , data.TWEAU
	                                            , data.TWEAU_SceneRecognition
	                                            , data.RI_DEMO2
	                                            , data.RI_DEMO2_SceneRecognition
	                                            , data.COMPASSCCH_SAND
	                                            , data.COMPASSCCH_SAND_SceneRecognition
	                                            , data.LAVAZZAIT_SAND
	                                            , data.LAVAZZAIT_SAND_SceneRecognition
	                                            , data.INBEVUS_STG
	                                            , data.INBEVUS_STG_SceneRecognition
	                                            , data.LAVAZZAFR_SAND
	                                            , data.LAVAZZAFR_SAND_SceneRecognition
	                                            , data.INBEVBE_SAND2
	                                            , data.INBEVBE_SAND2_SceneRecognition
	                                            , data.INBEVLU_SAND2
	                                            , data.INBEVLU_SAND2_SceneRecognition
	                                            , data.INBEVNL_SAND2
	                                            , data.INBEVNL_SAND2_SceneRecognition
	                                            , data.CreatedDate
	                                            , data.CreatedBy

	                                             , data.ImportedDate
	                                             , data.ImportedYear
	                                             , data.B2BRU
	                                             , data.BRMUS
	                                             , data.CBCIL
	                                             , data.CCCOOLERMX
	                                             , data.DIAGEOAR
	                                             , data.DIAGEOBENELUX
	                                             , data.DIAGEOCH
	                                             , data.DIAGEOGA
	                                             , data.DIAGEOGTR
	                                             , data.DIAGEONORDICS
	                                             , data.DIAGEOUS
	                                             , data.FERREROEXTIT
	                                             , data.GOOGLEHK
	                                             , data.HEINEKENPILOTCN
	                                             , data.IMBO
	                                             , data.INBEVCI
	                                             , data.INBEVCNTT
	                                             , data.INBEVCO
	                                             , data.INBEVZA
	                                             , data.INORU
	                                             , data.JJSP
	                                             , data.JNJES
	                                             , data.JNJUK
	                                             , data.JRIJP
	                                             , data.KELLOGSUSPOC
	                                             , data.KRAFTUS
	                                             , data.MARS_CHOCO_RU
	                                             , data.MHUK
	                                             , data.MILLERCOORS
	                                             , data.MOLSONONTRADEUK
	                                             , data.MYCHEMISTAU
	                                             , data.NESTLEROAMLERUK
	                                             , data.NRF2018
	                                             , data.PENAFLORAR
	                                             , data.PMIUA
	                                             , data.PNGAMERICA
	                                             , data.PNGRO
	                                             , data.RBAU
	                                             , data.RBCA
	                                             , data.RBDK
	                                             , data.RBMANUAL
	                                             , data.RINIELSENRU_MARS
	                                             , data.RINIELSENUSQI
	                                             , data.RIPANELCN
	                                             , data.RISPARKWINEDE
	                                             , data.SANOFIAE
	                                             , data.SANOFIAU
	                                             , data.SANOFIHK
	                                             , data.SANOFIKH
	                                             , data.SANOFINZ
	                                             , data.SANOFIRU
	                                             , data.SANOFITR
	                                             , data.SANOFIUA
	                                             , data.SHUFERSALIL
	                                             , data.SUNTORYJP
	                                             , data.TESCOTH
	                                             , data.TESCOUK
	                                             , data.TRAXROBOT
	                                             , data.XSUITE_SHOWCASE
	                                             , data.ABIUS
	                                             , data.BADGERROBOT
	                                             , data.CUBAU
	                                             , data.DIAGEORU
	                                             , data.GFKFR
	                                             , data.JNJIT
	                                             , data.LIGHTTRAX
	                                             , data.LIGHTTRAXOFFLINE
	                                             , data.RINIELSENFR
	                                             , data.SANOFIKZ
	                                             , data.SANOFILB
	                                             , data.SANOFISA
	                                             , data.SANOFIZA
	                                             , data.WATSONSHK
	                                             , data.KELLOGGUS
                                                  , data.TSINGTAOBEERCN
                                                ));
            return table;
        }



        public int BulkInsertIntoCategoryExpert(List<CategoryExpertEntity> categoryexpert)
        {
            using (var scope = new TransactionScope())
            {
                string connectionString = ConfigurationManager.ConnectionStrings["Client"].ConnectionString;
                var sqlConnection = new SqlConnection(connectionString);
                var sqlBulkCopy = new SqlBulkCopy(sqlConnection)
                {
                    DestinationTableName = "CategoryExpert",
                    //BulkCopyTimeout = 6000
                };
                var dataTable = GetDataTableForCategoryExpert(categoryexpert);
                sqlConnection.Open();

                sqlBulkCopy.WriteToServer(dataTable);

                scope.Complete();
                sqlBulkCopy.Close();
                sqlConnection.Close();
                sqlConnection.Dispose();
            }
            return categoryexpert.Count;
        }


        private DataTable GetDataTableForCategoryExpert(List<CategoryExpertEntity> categoryexpert)
        {
            var table = new DataTable();
            table.Columns.Add("ID", typeof(string));
            table.Columns.Add("QAT", typeof(string));
            table.Columns.Add("Center", typeof(string));
            table.Columns.Add("TotalCategoryExpert", typeof(int));
            table.Columns.Add("AvgsecondsperCategoryExpert", typeof(int));
            table.Columns.Add("ABICA", typeof(int));
            table.Columns.Add("ABICA_CategoryExpert", typeof(int));
            table.Columns.Add("ABITAMSUS_PROD", typeof(int));
            table.Columns.Add("ABITAMSUS_PROD_CategoryExpert", typeof(int));
            table.Columns.Add("AMERICAS_DEMO", typeof(int));
            table.Columns.Add("AMERICAS_DEMO_CategoryExpert", typeof(int));
            table.Columns.Add("BATRU", typeof(int));
            table.Columns.Add("BATRU_CategoryExpert", typeof(int));
            table.Columns.Add("BIKR", typeof(int));
            table.Columns.Add("BIKR_CategoryExpert", typeof(int));
            table.Columns.Add("BIMY", typeof(int));
            table.Columns.Add("BIMY_CategoryExpert", typeof(int));
            table.Columns.Add("BIPH", typeof(int));
            table.Columns.Add("BIPH_CategoryExpert", typeof(int));
            table.Columns.Add("BISEASK", typeof(int));
            table.Columns.Add("BISEASK_CategoryExpert", typeof(int));
            table.Columns.Add("BITH", typeof(int));
            table.Columns.Add("BITH_CategoryExpert", typeof(int));
            table.Columns.Add("BIVN", typeof(int));
            table.Columns.Add("BIVN_CategoryExpert", typeof(int));
            table.Columns.Add("BPAU", typeof(int));
            table.Columns.Add("BPAU_CategoryExpert", typeof(int));
            table.Columns.Add("BRODMANN", typeof(int));
            table.Columns.Add("BRODMANN_CategoryExpert", typeof(int));
            table.Columns.Add("CARREFOURAR", typeof(int));
            table.Columns.Add("CARREFOURAR_CategoryExpert", typeof(int));
            table.Columns.Add("CCAAU", typeof(int));
            table.Columns.Add("CCAAU_CategoryExpert", typeof(int));
            table.Columns.Add("CCABIZA", typeof(int));
            table.Columns.Add("CCABIZA_CategoryExpert", typeof(int));
            table.Columns.Add("CCANZ", typeof(int));
            table.Columns.Add("CCANZ_CategoryExpert", typeof(int));
            table.Columns.Add("CCBOTTLERSUS", typeof(int));
            table.Columns.Add("CCBOTTLERSUS_CategoryExpert", typeof(int));
            table.Columns.Add("CCBR_PROD", typeof(int));
            table.Columns.Add("CCBR_PROD_CategoryExpert", typeof(int));
            table.Columns.Add("CCJP", typeof(int));
            table.Columns.Add("CCJP_CategoryExpert", typeof(int));
            table.Columns.Add("CCKH", typeof(int));
            table.Columns.Add("CCKH_CategoryExpert", typeof(int));
            table.Columns.Add("CCKR", typeof(int));
            table.Columns.Add("CCKR_CategoryExpert", typeof(int));
            table.Columns.Add("CCMY", typeof(int));
            table.Columns.Add("CCMY_CategoryExpert", typeof(int));
            table.Columns.Add("CCPH", typeof(int));
            table.Columns.Add("CCPH_CategoryExpert", typeof(int));
            table.Columns.Add("CCRPR_PROD", typeof(int));
            table.Columns.Add("CCRPR_PROD_CategoryExpert", typeof(int));
            table.Columns.Add("CCRU", typeof(int));
            table.Columns.Add("CCRU_CategoryExpert", typeof(int));
            table.Columns.Add("CCTH", typeof(int));
            table.Columns.Add("CCTH_CategoryExpert", typeof(int));
            table.Columns.Add("CCTH_UAT", typeof(int));
            table.Columns.Add("CCTH_UAT_CategoryExpert", typeof(int));
            table.Columns.Add("CCTRADMX", typeof(int));
            table.Columns.Add("CCTRADMX_CategoryExpert", typeof(int));
            table.Columns.Add("CCUS", typeof(int));
            table.Columns.Add("CCUS_CategoryExpert", typeof(int));
            table.Columns.Add("CCZA", typeof(int));
            table.Columns.Add("CCZA_CategoryExpert", typeof(int));
            table.Columns.Add("CEREBOSTH", typeof(int));
            table.Columns.Add("CEREBOSTH_CategoryExpert", typeof(int));
            table.Columns.Add("CROWDSOURCE", typeof(int));
            table.Columns.Add("CROWDSOURCE_CategoryExpert", typeof(int));
            table.Columns.Add("DIAGEOAU", typeof(int));
            table.Columns.Add("DIAGEOAU_CategoryExpert", typeof(int));
            table.Columns.Add("DIAGEOBR", typeof(int));
            table.Columns.Add("DIAGEOBR_CategoryExpert", typeof(int));
            table.Columns.Add("DIAGEOGR", typeof(int));
            table.Columns.Add("DIAGEOGR_CategoryExpert", typeof(int));
            table.Columns.Add("DIAGEOIE", typeof(int));
            table.Columns.Add("DIAGEOIE_CategoryExpert", typeof(int));
            table.Columns.Add("DIAGEOKE", typeof(int));
            table.Columns.Add("DIAGEOKE_CategoryExpert", typeof(int));
            table.Columns.Add("DIAGEOMX", typeof(int));
            table.Columns.Add("DIAGEOMX_CategoryExpert", typeof(int));
            table.Columns.Add("DIAGEOPT", typeof(int));
            table.Columns.Add("DIAGEOPT_CategoryExpert", typeof(int));
            table.Columns.Add("DIAGEOTW", typeof(int));
            table.Columns.Add("DIAGEOTW_CategoryExpert", typeof(int));
            table.Columns.Add("DIAGEOUK", typeof(int));
            table.Columns.Add("DIAGEOUK_CategoryExpert", typeof(int));
            table.Columns.Add("DIAGEOZA", typeof(int));
            table.Columns.Add("DIAGEOZA_CategoryExpert", typeof(int));
            table.Columns.Add("EMEA_DEMO", typeof(int));
            table.Columns.Add("EMEA_DEMO_CategoryExpert", typeof(int));
            table.Columns.Add("FERREROIT", typeof(int));
            table.Columns.Add("FERREROIT_CategoryExpert", typeof(int));
            table.Columns.Add("GILLETTEUS", typeof(int));
            table.Columns.Add("GILLETTEUS_CategoryExpert", typeof(int));
            table.Columns.Add("GOOGLEUS", typeof(int));
            table.Columns.Add("GOOGLEUS_CategoryExpert", typeof(int));
            table.Columns.Add("HBCDE", typeof(int));
            table.Columns.Add("HBCDE_CategoryExpert", typeof(int));
            table.Columns.Add("HEINEKENCN", typeof(int));
            table.Columns.Add("HEINEKENCN_CategoryExpert", typeof(int));
            table.Columns.Add("HEINEKENUS_PROD", typeof(int));
            table.Columns.Add("HEINEKENUS_PROD_CategoryExpert", typeof(int));
            table.Columns.Add("HEINZCR", typeof(int));
            table.Columns.Add("HEINZCR_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVAR", typeof(int));
            table.Columns.Add("INBEVAR_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVBE", typeof(int));
            table.Columns.Add("INBEVBE_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVBE_SAND", typeof(int));
            table.Columns.Add("INBEVBE_SAND_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVBR", typeof(int));
            table.Columns.Add("INBEVBR_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVBR_ONTRADE", typeof(int));
            table.Columns.Add("INBEVBR_ONTRADE_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVCL", typeof(int));
            table.Columns.Add("INBEVCL_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVCN", typeof(int));
            table.Columns.Add("INBEVCN_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVCOOLERAR", typeof(int));
            table.Columns.Add("INBEVCOOLERAR_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVCOOLERBR", typeof(int));
            table.Columns.Add("INBEVCOOLERBR_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVCOOLERUS", typeof(int));
            table.Columns.Add("INBEVCOOLERUS_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVFR", typeof(int));
            table.Columns.Add("INBEVFR_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVLU", typeof(int));
            table.Columns.Add("INBEVLU_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVLU_SAND", typeof(int));
            table.Columns.Add("INBEVLU_SAND_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVMX", typeof(int));
            table.Columns.Add("INBEVMX_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVNL", typeof(int));
            table.Columns.Add("INBEVNL_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVNL_SAND", typeof(int));
            table.Columns.Add("INBEVNL_SAND_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVPY", typeof(int));
            table.Columns.Add("INBEVPY_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVTRADMX", typeof(int));
            table.Columns.Add("INBEVTRADMX_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVUS", typeof(int));
            table.Columns.Add("INBEVUS_CategoryExpert", typeof(int));
            table.Columns.Add("JTIUA", typeof(int));
            table.Columns.Add("JTIUA_CategoryExpert", typeof(int));
            table.Columns.Add("KCMY", typeof(int));
            table.Columns.Add("KCMY_CategoryExpert", typeof(int));
            table.Columns.Add("KCUS", typeof(int));
            table.Columns.Add("KCUS_CategoryExpert", typeof(int));
            table.Columns.Add("KEURIGCA", typeof(int));
            table.Columns.Add("KEURIGCA_CategoryExpert", typeof(int));
            table.Columns.Add("LABATTPLNOPTCA", typeof(int));
            table.Columns.Add("LABATTPLNOPTCA_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAAT", typeof(int));
            table.Columns.Add("LAVAZZAAT_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAAU", typeof(int));
            table.Columns.Add("LAVAZZAAU_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZABE", typeof(int));
            table.Columns.Add("LAVAZZABE_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZABG", typeof(int));
            table.Columns.Add("LAVAZZABG_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZACA", typeof(int));
            table.Columns.Add("LAVAZZACA_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZACH", typeof(int));
            table.Columns.Add("LAVAZZACH_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZACL", typeof(int));
            table.Columns.Add("LAVAZZACL_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZACN", typeof(int));
            table.Columns.Add("LAVAZZACN_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZACZ", typeof(int));
            table.Columns.Add("LAVAZZACZ_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZADE", typeof(int));
            table.Columns.Add("LAVAZZADE_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZADK", typeof(int));
            table.Columns.Add("LAVAZZADK_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAEE", typeof(int));
            table.Columns.Add("LAVAZZAEE_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAES", typeof(int));
            table.Columns.Add("LAVAZZAES_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAFR", typeof(int));
            table.Columns.Add("LAVAZZAFR_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAGR", typeof(int));
            table.Columns.Add("LAVAZZAGR_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAHK", typeof(int));
            table.Columns.Add("LAVAZZAHK_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAHR", typeof(int));
            table.Columns.Add("LAVAZZAHR_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAIL", typeof(int));
            table.Columns.Add("LAVAZZAIL_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAIT", typeof(int));
            table.Columns.Add("LAVAZZAIT_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAJP", typeof(int));
            table.Columns.Add("LAVAZZAJP_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAKR", typeof(int));
            table.Columns.Add("LAVAZZAKR_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZALT", typeof(int));
            table.Columns.Add("LAVAZZALT_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZALU", typeof(int));
            table.Columns.Add("LAVAZZALU_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZALV", typeof(int));
            table.Columns.Add("LAVAZZALV_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAMA", typeof(int));
            table.Columns.Add("LAVAZZAMA_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZANL", typeof(int));
            table.Columns.Add("LAVAZZANL_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAPL", typeof(int));
            table.Columns.Add("LAVAZZAPL_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZARO", typeof(int));
            table.Columns.Add("LAVAZZARO_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZARU", typeof(int));
            table.Columns.Add("LAVAZZARU_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZASA", typeof(int));
            table.Columns.Add("LAVAZZASA_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZASE", typeof(int));
            table.Columns.Add("LAVAZZASE_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZASG", typeof(int));
            table.Columns.Add("LAVAZZASG_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAUAE", typeof(int));
            table.Columns.Add("LAVAZZAUAE_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAUK", typeof(int));
            table.Columns.Add("LAVAZZAUK_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAUS", typeof(int));
            table.Columns.Add("LAVAZZAUS_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAZA", typeof(int));
            table.Columns.Add("LAVAZZAZA_CategoryExpert", typeof(int));
            table.Columns.Add("LRSUK", typeof(int));
            table.Columns.Add("LRSUK_CategoryExpert", typeof(int));
            table.Columns.Add("MARSBR", typeof(int));
            table.Columns.Add("MARSBR_CategoryExpert", typeof(int));
            table.Columns.Add("MARSIN", typeof(int));
            table.Columns.Add("MARSIN_CategoryExpert", typeof(int));
            table.Columns.Add("MARSIN_OLD", typeof(int));
            table.Columns.Add("MARSIN_OLD_CategoryExpert", typeof(int));
            table.Columns.Add("MARSRU_PROD", typeof(int));
            table.Columns.Add("MARSRU_PROD_CategoryExpert", typeof(int));
            table.Columns.Add("MAYORAID", typeof(int));
            table.Columns.Add("MAYORAID_CategoryExpert", typeof(int));
            table.Columns.Add("MJNCN", typeof(int));
            table.Columns.Add("MJNCN_CategoryExpert", typeof(int));
            table.Columns.Add("MOLSONCOOLERHN", typeof(int));
            table.Columns.Add("MOLSONCOOLERHN_CategoryExpert", typeof(int));
            table.Columns.Add("MOLSONCOOLERHR", typeof(int));
            table.Columns.Add("MOLSONCOOLERHR_CategoryExpert", typeof(int));
            table.Columns.Add("MOLSONCOORSUK", typeof(int));
            table.Columns.Add("MOLSONCOORSUK_CategoryExpert", typeof(int));
            table.Columns.Add("NESTLEUK", typeof(int));
            table.Columns.Add("NESTLEUK_CategoryExpert", typeof(int));
            table.Columns.Add("NIVEAUK", typeof(int));
            table.Columns.Add("NIVEAUK_CategoryExpert", typeof(int));
            table.Columns.Add("NRF2017_DEMO", typeof(int));
            table.Columns.Add("NRF2017_DEMO_CategoryExpert", typeof(int));
            table.Columns.Add("ONE_AMERICAS_DEMO", typeof(int));
            table.Columns.Add("ONE_AMERICAS_DEMO_CategoryExpert", typeof(int));
            table.Columns.Add("ONE_APAC_DEMO", typeof(int));
            table.Columns.Add("ONE_APAC_DEMO_CategoryExpert", typeof(int));
            table.Columns.Add("PEPSICOBR", typeof(int));
            table.Columns.Add("PEPSICOBR_CategoryExpert", typeof(int));
            table.Columns.Add("PNGAU", typeof(int));
            table.Columns.Add("PNGAU_CategoryExpert", typeof(int));
            table.Columns.Add("PNGAU_OLD", typeof(int));
            table.Columns.Add("PNGAU_OLD_CategoryExpert", typeof(int));
            table.Columns.Add("PNGCAREUS", typeof(int));
            table.Columns.Add("PNGCAREUS_CategoryExpert", typeof(int));
            table.Columns.Add("PNGCN_PROD", typeof(int));
            table.Columns.Add("PNGCN_PROD_CategoryExpert", typeof(int));
            table.Columns.Add("PNGJP", typeof(int));
            table.Columns.Add("PNGJP_CategoryExpert", typeof(int));
            table.Columns.Add("PNGJP_OLD", typeof(int));
            table.Columns.Add("PNGJP_OLD_CategoryExpert", typeof(int));
            table.Columns.Add("PNGUS", typeof(int));
            table.Columns.Add("PNGUS_CategoryExpert", typeof(int));
            table.Columns.Add("PNGUSEPISODIC", typeof(int));
            table.Columns.Add("PNGUSEPISODIC_CategoryExpert", typeof(int));
            table.Columns.Add("RBUS", typeof(int));
            table.Columns.Add("RBUS_CategoryExpert", typeof(int));
            table.Columns.Add("RE_XSUITE_DEMO", typeof(int));
            table.Columns.Add("RE_XSUITE_DEMO_CategoryExpert", typeof(int));
            table.Columns.Add("REPNGCN_DEMO", typeof(int));
            table.Columns.Add("REPNGCN_DEMO_CategoryExpert", typeof(int));
            table.Columns.Add("RI_DEMO", typeof(int));
            table.Columns.Add("RI_DEMO_CategoryExpert", typeof(int));
            table.Columns.Add("RI_DIAGEOAU", typeof(int));
            table.Columns.Add("RI_DIAGEOAU_CategoryExpert", typeof(int));
            table.Columns.Add("RIALCBEVUK_PROD", typeof(int));
            table.Columns.Add("RIALCBEVUK_PROD_CategoryExpert", typeof(int));
            table.Columns.Add("RICOFFEEUS", typeof(int));
            table.Columns.Add("RICOFFEEUS_CategoryExpert", typeof(int));
            table.Columns.Add("RINIELSENUS", typeof(int));
            table.Columns.Add("RINIELSENUS_CategoryExpert", typeof(int));
            table.Columns.Add("RIPETCAREUK_PROD", typeof(int));
            table.Columns.Add("RIPETCAREUK_PROD_CategoryExpert", typeof(int));
            table.Columns.Add("RIUS", typeof(int));
            table.Columns.Add("RIUS_CategoryExpert", typeof(int));
            table.Columns.Add("RIUS_DEV", typeof(int));
            table.Columns.Add("RIUS_DEV_CategoryExpert", typeof(int));
            table.Columns.Add("RNBDE", typeof(int));
            table.Columns.Add("RNBDE_CategoryExpert", typeof(int));
            table.Columns.Add("SMARTCOOLER_POC2", typeof(int));
            table.Columns.Add("SMARTCOOLER_POC2_CategoryExpert", typeof(int));
            table.Columns.Add("SMARTCOOLER_TRN", typeof(int));
            table.Columns.Add("SMARTCOOLER_TRN_CategoryExpert", typeof(int));
            table.Columns.Add("SMARTCOOLER2_TRN", typeof(int));
            table.Columns.Add("SMARTCOOLER2_TRN_CategoryExpert", typeof(int));
            table.Columns.Add("SOLARBR", typeof(int));
            table.Columns.Add("SOLARBR_CategoryExpert", typeof(int));
            table.Columns.Add("STATIC_CAMERA_DEMO", typeof(int));
            table.Columns.Add("STATIC_CAMERA_DEMO_CategoryExpert", typeof(int));
            table.Columns.Add("SWIRECN", typeof(int));
            table.Columns.Add("SWIRECN_CategoryExpert", typeof(int));
            table.Columns.Add("SWIREREDCN", typeof(int));
            table.Columns.Add("SWIREREDCN_CategoryExpert", typeof(int));
            table.Columns.Add("TNUVAIL", typeof(int));
            table.Columns.Add("TNUVAIL_CategoryExpert", typeof(int));
            table.Columns.Add("TRAXDEMO_TS_PROD", typeof(int));
            table.Columns.Add("TRAXDEMO_TS_PROD_CategoryExpert", typeof(int));
            table.Columns.Add("TWEAU", typeof(int));
            table.Columns.Add("TWEAU_CategoryExpert", typeof(int));
            table.Columns.Add("RI_DEMO2", typeof(int));
            table.Columns.Add("RI_DEMO2_CategoryExpert", typeof(int));
            table.Columns.Add("COMPASSCCH_SAND", typeof(int));
            table.Columns.Add("COMPASSCCH_SAND_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAIT_SAND", typeof(int));
            table.Columns.Add("LAVAZZAIT_SAND_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVUS_STG", typeof(int));
            table.Columns.Add("INBEVUS_STG_CategoryExpert", typeof(int));
            table.Columns.Add("LAVAZZAFR_SAND", typeof(int));
            table.Columns.Add("LAVAZZAFR_SAND_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVBE_SAND2", typeof(int));
            table.Columns.Add("INBEVBE_SAND2_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVLU_SAND2", typeof(int));
            table.Columns.Add("INBEVLU_SAND2_CategoryExpert", typeof(int));
            table.Columns.Add("INBEVNL_SAND2", typeof(int));
            table.Columns.Add("INBEVNL_SAND2_CategoryExpert", typeof(int));
            table.Columns.Add("CreatedDate", typeof(string));
            table.Columns.Add("CreatedBy", typeof(string));

            table.Columns.Add("ImportedDate", typeof(string));
            table.Columns.Add("ImportedYear", typeof(string));
            table.Columns.Add("B2BRU", typeof(int));
            table.Columns.Add("BRMUS", typeof(int));
            table.Columns.Add("CBCIL", typeof(int));
            table.Columns.Add("CCCOOLERMX", typeof(int));
            table.Columns.Add("DIAGEOAR", typeof(int));
            table.Columns.Add("DIAGEOBENELUX", typeof(int));
            table.Columns.Add("DIAGEOCH", typeof(int));
            table.Columns.Add("DIAGEOGA", typeof(int));
            table.Columns.Add("DIAGEOGTR", typeof(int));
            table.Columns.Add("DIAGEONORDICS", typeof(int));
            table.Columns.Add("DIAGEOUS", typeof(int));
            table.Columns.Add("FERREROEXTIT", typeof(int));
            table.Columns.Add("GOOGLEHK", typeof(int));
            table.Columns.Add("HEINEKENPILOTCN", typeof(int));
            table.Columns.Add("IMBO", typeof(int));
            table.Columns.Add("INBEVCI", typeof(int));
            table.Columns.Add("INBEVCNTT", typeof(int));
            table.Columns.Add("INBEVCO", typeof(int));
            table.Columns.Add("INBEVZA", typeof(int));
            table.Columns.Add("INORU", typeof(int));
            table.Columns.Add("JJSP", typeof(int));
            table.Columns.Add("JNJES", typeof(int));
            table.Columns.Add("JNJUK", typeof(int));
            table.Columns.Add("JRIJP", typeof(int));
            table.Columns.Add("KELLOGSUSPOC", typeof(int));
            table.Columns.Add("KRAFTUS", typeof(int));
            table.Columns.Add("MARS_CHOCO_RU", typeof(int));
            table.Columns.Add("MHUK", typeof(int));
            table.Columns.Add("MILLERCOORS", typeof(int));
            table.Columns.Add("MOLSONONTRADEUK", typeof(int));
            table.Columns.Add("MYCHEMISTAU", typeof(int));
            table.Columns.Add("NESTLEROAMLERUK", typeof(int));
            table.Columns.Add("NRF2018", typeof(int));
            table.Columns.Add("PENAFLORAR", typeof(int));
            table.Columns.Add("PMIUA", typeof(int));
            table.Columns.Add("PNGAMERICA", typeof(int));
            table.Columns.Add("PNGRO", typeof(int));
            table.Columns.Add("RBAU", typeof(int));
            table.Columns.Add("RBCA", typeof(int));
            table.Columns.Add("RBDK", typeof(int));
            table.Columns.Add("RBMANUAL", typeof(int));
            table.Columns.Add("RINIELSENRU_MARS", typeof(int));
            table.Columns.Add("RINIELSENUSQI", typeof(int));
            table.Columns.Add("RIPANELCN", typeof(int));
            table.Columns.Add("RISPARKWINEDE", typeof(int));
            table.Columns.Add("SANOFIAE", typeof(int));
            table.Columns.Add("SANOFIAU", typeof(int));
            table.Columns.Add("SANOFIHK", typeof(int));
            table.Columns.Add("SANOFIKH", typeof(int));
            table.Columns.Add("SANOFINZ", typeof(int));
            table.Columns.Add("SANOFIRU", typeof(int));
            table.Columns.Add("SANOFITR", typeof(int));
            table.Columns.Add("SANOFIUA", typeof(int));
            table.Columns.Add("SHUFERSALIL", typeof(int));
            table.Columns.Add("SUNTORYJP", typeof(int));
            table.Columns.Add("TESCOTH", typeof(int));
            table.Columns.Add("TESCOUK", typeof(int));
            table.Columns.Add("TRAXROBOT", typeof(int));
            table.Columns.Add("XSUITE_SHOWCASE", typeof(int));
            table.Columns.Add("ABIUS", typeof(int));
            table.Columns.Add("BADGERROBOT", typeof(int));
            table.Columns.Add("CUBAU", typeof(int));
            table.Columns.Add("DIAGEORU", typeof(int));
            table.Columns.Add("GFKFR", typeof(int));
            table.Columns.Add("JNJIT", typeof(int));
            table.Columns.Add("LIGHTTRAX", typeof(int));
            table.Columns.Add("LIGHTTRAXOFFLINE", typeof(int));
            table.Columns.Add("RINIELSENFR", typeof(int));
            table.Columns.Add("SANOFIKZ", typeof(int));
            table.Columns.Add("SANOFILB", typeof(int));
            table.Columns.Add("SANOFISA", typeof(int));
            table.Columns.Add("SANOFIZA", typeof(int));
            table.Columns.Add("WATSONSHK", typeof(int));
            table.Columns.Add("KELLOGGUS", typeof(int));
            table.Columns.Add("TSINGTAOBEERCN", typeof(int));

            // note : the order of the field is very important
            // and should be same as the defined in table structure.
            categoryexpert.ForEach(data => table.Rows.Add(
                                                data.ID
                                            , data.QAT
                                            , data.Center
                                            , data.TotalCategoryExpert
                                            , data.AvgsecondsperCategoryExpert
                                            , data.ABICA
                                            , data.ABICA_CategoryExpert
                                            , data.ABITAMSUS_PROD
                                            , data.ABITAMSUS_PROD_CategoryExpert
                                            , data.AMERICAS_DEMO
                                            , data.AMERICAS_DEMO_CategoryExpert
                                            , data.BATRU
                                            , data.BATRU_CategoryExpert
                                            , data.BIKR
                                            , data.BIKR_CategoryExpert
                                            , data.BIMY
                                            , data.BIMY_CategoryExpert
                                            , data.BIPH
                                            , data.BIPH_CategoryExpert
                                            , data.BISEASK
                                            , data.BISEASK_CategoryExpert
                                            , data.BITH
                                            , data.BITH_CategoryExpert
                                            , data.BIVN
                                            , data.BIVN_CategoryExpert
                                            , data.BPAU
                                            , data.BPAU_CategoryExpert
                                            , data.BRODMANN
                                            , data.BRODMANN_CategoryExpert
                                            , data.CARREFOURAR
                                            , data.CARREFOURAR_CategoryExpert
                                            , data.CCAAU
                                            , data.CCAAU_CategoryExpert
                                            , data.CCABIZA
                                            , data.CCABIZA_CategoryExpert
                                            , data.CCANZ
                                            , data.CCANZ_CategoryExpert
                                            , data.CCBOTTLERSUS
                                            , data.CCBOTTLERSUS_CategoryExpert
                                            , data.CCBR_PROD
                                            , data.CCBR_PROD_CategoryExpert
                                            , data.CCJP
                                            , data.CCJP_CategoryExpert
                                            , data.CCKH
                                            , data.CCKH_CategoryExpert
                                            , data.CCKR
                                            , data.CCKR_CategoryExpert
                                            , data.CCMY
                                            , data.CCMY_CategoryExpert
                                            , data.CCPH
                                            , data.CCPH_CategoryExpert
                                            , data.CCRPR_PROD
                                            , data.CCRPR_PROD_CategoryExpert
                                            , data.CCRU
                                            , data.CCRU_CategoryExpert
                                            , data.CCTH
                                            , data.CCTH_CategoryExpert
                                            , data.CCTH_UAT
                                            , data.CCTH_UAT_CategoryExpert
                                            , data.CCTRADMX
                                            , data.CCTRADMX_CategoryExpert
                                            , data.CCUS
                                            , data.CCUS_CategoryExpert
                                            , data.CCZA
                                            , data.CCZA_CategoryExpert
                                            , data.CEREBOSTH
                                            , data.CEREBOSTH_CategoryExpert
                                            , data.CROWDSOURCE
                                            , data.CROWDSOURCE_CategoryExpert
                                            , data.DIAGEOAU
                                            , data.DIAGEOAU_CategoryExpert
                                            , data.DIAGEOBR
                                            , data.DIAGEOBR_CategoryExpert
                                            , data.DIAGEOGR
                                            , data.DIAGEOGR_CategoryExpert
                                            , data.DIAGEOIE
                                            , data.DIAGEOIE_CategoryExpert
                                            , data.DIAGEOKE
                                            , data.DIAGEOKE_CategoryExpert
                                            , data.DIAGEOMX
                                            , data.DIAGEOMX_CategoryExpert
                                            , data.DIAGEOPT
                                            , data.DIAGEOPT_CategoryExpert
                                            , data.DIAGEOTW
                                            , data.DIAGEOTW_CategoryExpert
                                            , data.DIAGEOUK
                                            , data.DIAGEOUK_CategoryExpert
                                            , data.DIAGEOZA
                                            , data.DIAGEOZA_CategoryExpert
                                            , data.EMEA_DEMO
                                            , data.EMEA_DEMO_CategoryExpert
                                            , data.FERREROIT
                                            , data.FERREROIT_CategoryExpert
                                            , data.GILLETTEUS
                                            , data.GILLETTEUS_CategoryExpert
                                            , data.GOOGLEUS
                                            , data.GOOGLEUS_CategoryExpert
                                            , data.HBCDE
                                            , data.HBCDE_CategoryExpert
                                            , data.HEINEKENCN
                                            , data.HEINEKENCN_CategoryExpert
                                            , data.HEINEKENUS_PROD
                                            , data.HEINEKENUS_PROD_CategoryExpert
                                            , data.HEINZCR
                                            , data.HEINZCR_CategoryExpert
                                            , data.INBEVAR
                                            , data.INBEVAR_CategoryExpert
                                            , data.INBEVBE
                                            , data.INBEVBE_CategoryExpert
                                            , data.INBEVBE_SAND
                                            , data.INBEVBE_SAND_CategoryExpert
                                            , data.INBEVBR
                                            , data.INBEVBR_CategoryExpert
                                            , data.INBEVBR_ONTRADE
                                            , data.INBEVBR_ONTRADE_CategoryExpert
                                            , data.INBEVCL
                                            , data.INBEVCL_CategoryExpert
                                            , data.INBEVCN
                                            , data.INBEVCN_CategoryExpert
                                            , data.INBEVCOOLERAR
                                            , data.INBEVCOOLERAR_CategoryExpert
                                            , data.INBEVCOOLERBR
                                            , data.INBEVCOOLERBR_CategoryExpert
                                            , data.INBEVCOOLERUS
                                            , data.INBEVCOOLERUS_CategoryExpert
                                            , data.INBEVFR
                                            , data.INBEVFR_CategoryExpert
                                            , data.INBEVLU
                                            , data.INBEVLU_CategoryExpert
                                            , data.INBEVLU_SAND
                                            , data.INBEVLU_SAND_CategoryExpert
                                            , data.INBEVMX
                                            , data.INBEVMX_CategoryExpert
                                            , data.INBEVNL
                                            , data.INBEVNL_CategoryExpert
                                            , data.INBEVNL_SAND
                                            , data.INBEVNL_SAND_CategoryExpert
                                            , data.INBEVPY
                                            , data.INBEVPY_CategoryExpert
                                            , data.INBEVTRADMX
                                            , data.INBEVTRADMX_CategoryExpert
                                            , data.INBEVUS
                                            , data.INBEVUS_CategoryExpert
                                            , data.JTIUA
                                            , data.JTIUA_CategoryExpert
                                            , data.KCMY
                                            , data.KCMY_CategoryExpert
                                            , data.KCUS
                                            , data.KCUS_CategoryExpert
                                            , data.KEURIGCA
                                            , data.KEURIGCA_CategoryExpert
                                            , data.LABATTPLNOPTCA
                                            , data.LABATTPLNOPTCA_CategoryExpert
                                            , data.LAVAZZAAT
                                            , data.LAVAZZAAT_CategoryExpert
                                            , data.LAVAZZAAU
                                            , data.LAVAZZAAU_CategoryExpert
                                            , data.LAVAZZABE
                                            , data.LAVAZZABE_CategoryExpert
                                            , data.LAVAZZABG
                                            , data.LAVAZZABG_CategoryExpert
                                            , data.LAVAZZACA
                                            , data.LAVAZZACA_CategoryExpert
                                            , data.LAVAZZACH
                                            , data.LAVAZZACH_CategoryExpert
                                            , data.LAVAZZACL
                                            , data.LAVAZZACL_CategoryExpert
                                            , data.LAVAZZACN
                                            , data.LAVAZZACN_CategoryExpert
                                            , data.LAVAZZACZ
                                            , data.LAVAZZACZ_CategoryExpert
                                            , data.LAVAZZADE
                                            , data.LAVAZZADE_CategoryExpert
                                            , data.LAVAZZADK
                                            , data.LAVAZZADK_CategoryExpert
                                            , data.LAVAZZAEE
                                            , data.LAVAZZAEE_CategoryExpert
                                            , data.LAVAZZAES
                                            , data.LAVAZZAES_CategoryExpert
                                            , data.LAVAZZAFR
                                            , data.LAVAZZAFR_CategoryExpert
                                            , data.LAVAZZAGR
                                            , data.LAVAZZAGR_CategoryExpert
                                            , data.LAVAZZAHK
                                            , data.LAVAZZAHK_CategoryExpert
                                            , data.LAVAZZAHR
                                            , data.LAVAZZAHR_CategoryExpert
                                            , data.LAVAZZAIL
                                            , data.LAVAZZAIL_CategoryExpert
                                            , data.LAVAZZAIT
                                            , data.LAVAZZAIT_CategoryExpert
                                            , data.LAVAZZAJP
                                            , data.LAVAZZAJP_CategoryExpert
                                            , data.LAVAZZAKR
                                            , data.LAVAZZAKR_CategoryExpert
                                            , data.LAVAZZALT
                                            , data.LAVAZZALT_CategoryExpert
                                            , data.LAVAZZALU
                                            , data.LAVAZZALU_CategoryExpert
                                            , data.LAVAZZALV
                                            , data.LAVAZZALV_CategoryExpert
                                            , data.LAVAZZAMA
                                            , data.LAVAZZAMA_CategoryExpert
                                            , data.LAVAZZANL
                                            , data.LAVAZZANL_CategoryExpert
                                            , data.LAVAZZAPL
                                            , data.LAVAZZAPL_CategoryExpert
                                            , data.LAVAZZARO
                                            , data.LAVAZZARO_CategoryExpert
                                            , data.LAVAZZARU
                                            , data.LAVAZZARU_CategoryExpert
                                            , data.LAVAZZASA
                                            , data.LAVAZZASA_CategoryExpert
                                            , data.LAVAZZASE
                                            , data.LAVAZZASE_CategoryExpert
                                            , data.LAVAZZASG
                                            , data.LAVAZZASG_CategoryExpert
                                            , data.LAVAZZAUAE
                                            , data.LAVAZZAUAE_CategoryExpert
                                            , data.LAVAZZAUK
                                            , data.LAVAZZAUK_CategoryExpert
                                            , data.LAVAZZAUS
                                            , data.LAVAZZAUS_CategoryExpert
                                            , data.LAVAZZAZA
                                            , data.LAVAZZAZA_CategoryExpert
                                            , data.LRSUK
                                            , data.LRSUK_CategoryExpert
                                            , data.MARSBR
                                            , data.MARSBR_CategoryExpert
                                            , data.MARSIN
                                            , data.MARSIN_CategoryExpert
                                            , data.MARSIN_OLD
                                            , data.MARSIN_OLD_CategoryExpert
                                            , data.MARSRU_PROD
                                            , data.MARSRU_PROD_CategoryExpert
                                            , data.MAYORAID
                                            , data.MAYORAID_CategoryExpert
                                            , data.MJNCN
                                            , data.MJNCN_CategoryExpert
                                            , data.MOLSONCOOLERHN
                                            , data.MOLSONCOOLERHN_CategoryExpert
                                            , data.MOLSONCOOLERHR
                                            , data.MOLSONCOOLERHR_CategoryExpert
                                            , data.MOLSONCOORSUK
                                            , data.MOLSONCOORSUK_CategoryExpert
                                            , data.NESTLEUK
                                            , data.NESTLEUK_CategoryExpert
                                            , data.NIVEAUK
                                            , data.NIVEAUK_CategoryExpert
                                            , data.NRF2017_DEMO
                                            , data.NRF2017_DEMO_CategoryExpert
                                            , data.ONE_AMERICAS_DEMO
                                            , data.ONE_AMERICAS_DEMO_CategoryExpert
                                            , data.ONE_APAC_DEMO
                                            , data.ONE_APAC_DEMO_CategoryExpert
                                            , data.PEPSICOBR
                                            , data.PEPSICOBR_CategoryExpert
                                            , data.PNGAU
                                            , data.PNGAU_CategoryExpert
                                            , data.PNGAU_OLD
                                            , data.PNGAU_OLD_CategoryExpert
                                            , data.PNGCAREUS
                                            , data.PNGCAREUS_CategoryExpert
                                            , data.PNGCN_PROD
                                            , data.PNGCN_PROD_CategoryExpert
                                            , data.PNGJP
                                            , data.PNGJP_CategoryExpert
                                            , data.PNGJP_OLD
                                            , data.PNGJP_OLD_CategoryExpert
                                            , data.PNGUS
                                            , data.PNGUS_CategoryExpert
                                            , data.PNGUSEPISODIC
                                            , data.PNGUSEPISODIC_CategoryExpert
                                            , data.RBUS
                                            , data.RBUS_CategoryExpert
                                            , data.RE_XSUITE_DEMO
                                            , data.RE_XSUITE_DEMO_CategoryExpert
                                            , data.REPNGCN_DEMO
                                            , data.REPNGCN_DEMO_CategoryExpert
                                            , data.RI_DEMO
                                            , data.RI_DEMO_CategoryExpert
                                            , data.RI_DIAGEOAU
                                            , data.RI_DIAGEOAU_CategoryExpert
                                            , data.RIALCBEVUK_PROD
                                            , data.RIALCBEVUK_PROD_CategoryExpert
                                            , data.RICOFFEEUS
                                            , data.RICOFFEEUS_CategoryExpert
                                            , data.RINIELSENUS
                                            , data.RINIELSENUS_CategoryExpert
                                            , data.RIPETCAREUK_PROD
                                            , data.RIPETCAREUK_PROD_CategoryExpert
                                            , data.RIUS
                                            , data.RIUS_CategoryExpert
                                            , data.RIUS_DEV
                                            , data.RIUS_DEV_CategoryExpert
                                            , data.RNBDE
                                            , data.RNBDE_CategoryExpert
                                            , data.SMARTCOOLER_POC2
                                            , data.SMARTCOOLER_POC2_CategoryExpert
                                            , data.SMARTCOOLER_TRN
                                            , data.SMARTCOOLER_TRN_CategoryExpert
                                            , data.SMARTCOOLER2_TRN
                                            , data.SMARTCOOLER2_TRN_CategoryExpert
                                            , data.SOLARBR
                                            , data.SOLARBR_CategoryExpert
                                            , data.STATIC_CAMERA_DEMO
                                            , data.STATIC_CAMERA_DEMO_CategoryExpert
                                            , data.SWIRECN
                                            , data.SWIRECN_CategoryExpert
                                            , data.SWIREREDCN
                                            , data.SWIREREDCN_CategoryExpert
                                            , data.TNUVAIL
                                            , data.TNUVAIL_CategoryExpert
                                            , data.TRAXDEMO_TS_PROD
                                            , data.TRAXDEMO_TS_PROD_CategoryExpert
                                            , data.TWEAU
                                            , data.TWEAU_CategoryExpert
                                            , data.RI_DEMO2
                                            , data.RI_DEMO2_CategoryExpert
                                            , data.COMPASSCCH_SAND
                                            , data.COMPASSCCH_SAND_CategoryExpert
                                            , data.LAVAZZAIT_SAND
                                            , data.LAVAZZAIT_SAND_CategoryExpert
                                            , data.INBEVUS_STG
                                            , data.INBEVUS_STG_CategoryExpert
                                            , data.LAVAZZAFR_SAND
                                            , data.LAVAZZAFR_SAND_CategoryExpert
                                            , data.INBEVBE_SAND2
                                            , data.INBEVBE_SAND2_CategoryExpert
                                            , data.INBEVLU_SAND2
                                            , data.INBEVLU_SAND2_CategoryExpert
                                            , data.INBEVNL_SAND2
                                            , data.INBEVNL_SAND2_CategoryExpert
                                            , data.CreatedDate
                                            , data.CreatedBy

                                            , data.ImportedDate
                                            , data.ImportedYear
                                            , data.B2BRU
                                            , data.BRMUS
                                            , data.CBCIL
                                            , data.CCCOOLERMX
                                            , data.DIAGEOAR
                                            , data.DIAGEOBENELUX
                                            , data.DIAGEOCH
                                            , data.DIAGEOGA
                                            , data.DIAGEOGTR
                                            , data.DIAGEONORDICS
                                            , data.DIAGEOUS
                                            , data.FERREROEXTIT
                                            , data.GOOGLEHK
                                            , data.HEINEKENPILOTCN
                                            , data.IMBO
                                            , data.INBEVCI
                                            , data.INBEVCNTT
                                            , data.INBEVCO
                                            , data.INBEVZA
                                            , data.INORU
                                            , data.JJSP
                                            , data.JNJES
                                            , data.JNJUK
                                            , data.JRIJP
                                            , data.KELLOGSUSPOC
                                            , data.KRAFTUS
                                            , data.MARS_CHOCO_RU
                                            , data.MHUK
                                            , data.MILLERCOORS
                                            , data.MOLSONONTRADEUK
                                            , data.MYCHEMISTAU
                                            , data.NESTLEROAMLERUK
                                            , data.NRF2018
                                            , data.PENAFLORAR
                                            , data.PMIUA
                                            , data.PNGAMERICA
                                            , data.PNGRO
                                            , data.RBAU
                                            , data.RBCA
                                            , data.RBDK
                                            , data.RBMANUAL
                                            , data.RINIELSENRU_MARS
                                            , data.RINIELSENUSQI
                                            , data.RIPANELCN
                                            , data.RISPARKWINEDE
                                            , data.SANOFIAE
                                            , data.SANOFIAU
                                            , data.SANOFIHK
                                            , data.SANOFIKH
                                            , data.SANOFINZ
                                            , data.SANOFIRU
                                            , data.SANOFITR
                                            , data.SANOFIUA
                                            , data.SHUFERSALIL
                                            , data.SUNTORYJP
                                            , data.TESCOTH
                                            , data.TESCOUK
                                            , data.TRAXROBOT
                                            , data.XSUITE_SHOWCASE
                                            , data.ABIUS
                                            , data.BADGERROBOT
                                            , data.CUBAU
                                            , data.DIAGEORU
                                            , data.GFKFR
                                            , data.JNJIT
                                            , data.LIGHTTRAX
                                            , data.LIGHTTRAXOFFLINE
                                            , data.RINIELSENFR
                                            , data.SANOFIKZ
                                            , data.SANOFILB
                                            , data.SANOFISA
                                            , data.SANOFIZA
                                            , data.WATSONSHK
                                            , data.KELLOGGUS
                                             , data.TSINGTAOBEERCN

                                                ));
            return table;
        }


        public int BulkInsertIntoCategoryExpertVoting(List<CategoryExpertVotingEntity> categoryexpertvoting)
        {
            using (var scope = new TransactionScope())
            {
                string connectionString = ConfigurationManager.ConnectionStrings["Client"].ConnectionString;
                var sqlConnection = new SqlConnection(connectionString);
                var sqlBulkCopy = new SqlBulkCopy(sqlConnection)
                {
                    DestinationTableName = "CategoryExpertVoting",
                    //BulkCopyTimeout = 6000
                };
                var dataTable = GetDataTableForCategoryExpertVoting(categoryexpertvoting);
                sqlConnection.Open();

                sqlBulkCopy.WriteToServer(dataTable);

                scope.Complete();
                sqlBulkCopy.Close();
                sqlConnection.Close();
                sqlConnection.Dispose();
            }
            return categoryexpertvoting.Count;
        }


        private DataTable GetDataTableForCategoryExpertVoting(List<CategoryExpertVotingEntity> categoryexpertvoting)
        {
            var table = new DataTable();
            table.Columns.Add("ID", typeof(string));
            table.Columns.Add("QAT", typeof(string));
            table.Columns.Add("Center", typeof(string));
            table.Columns.Add("TotalCategoryExpertVoting", typeof(int));
            table.Columns.Add("AvgsecondsperCategoryExpertVoting", typeof(int));
            table.Columns.Add("ABICA", typeof(int));
            table.Columns.Add("ABICA_CategoryExpertVoting", typeof(int));
            table.Columns.Add("ABITAMSUS_PROD", typeof(int));
            table.Columns.Add("ABITAMSUS_PROD_CategoryExpertVoting", typeof(int));
            table.Columns.Add("AMERICAS_DEMO", typeof(int));
            table.Columns.Add("AMERICAS_DEMO_CategoryExpertVoting", typeof(int));
            table.Columns.Add("BATRU", typeof(int));
            table.Columns.Add("BATRU_CategoryExpertVoting", typeof(int));
            table.Columns.Add("BIKR", typeof(int));
            table.Columns.Add("BIKR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("BIMY", typeof(int));
            table.Columns.Add("BIMY_CategoryExpertVoting", typeof(int));
            table.Columns.Add("BIPH", typeof(int));
            table.Columns.Add("BIPH_CategoryExpertVoting", typeof(int));
            table.Columns.Add("BISEASK", typeof(int));
            table.Columns.Add("BISEASK_CategoryExpertVoting", typeof(int));
            table.Columns.Add("BITH", typeof(int));
            table.Columns.Add("BITH_CategoryExpertVoting", typeof(int));
            table.Columns.Add("BIVN", typeof(int));
            table.Columns.Add("BIVN_CategoryExpertVoting", typeof(int));
            table.Columns.Add("BPAU", typeof(int));
            table.Columns.Add("BPAU_CategoryExpertVoting", typeof(int));
            table.Columns.Add("BRODMANN", typeof(int));
            table.Columns.Add("BRODMANN_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CARREFOURAR", typeof(int));
            table.Columns.Add("CARREFOURAR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCAAU", typeof(int));
            table.Columns.Add("CCAAU_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCABIZA", typeof(int));
            table.Columns.Add("CCABIZA_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCANZ", typeof(int));
            table.Columns.Add("CCANZ_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCBOTTLERSUS", typeof(int));
            table.Columns.Add("CCBOTTLERSUS_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCBR_PROD", typeof(int));
            table.Columns.Add("CCBR_PROD_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCJP", typeof(int));
            table.Columns.Add("CCJP_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCKH", typeof(int));
            table.Columns.Add("CCKH_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCKR", typeof(int));
            table.Columns.Add("CCKR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCMY", typeof(int));
            table.Columns.Add("CCMY_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCPH", typeof(int));
            table.Columns.Add("CCPH_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCRPR_PROD", typeof(int));
            table.Columns.Add("CCRPR_PROD_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCRU", typeof(int));
            table.Columns.Add("CCRU_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCTH", typeof(int));
            table.Columns.Add("CCTH_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCTH_UAT", typeof(int));
            table.Columns.Add("CCTH_UAT_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCTRADMX", typeof(int));
            table.Columns.Add("CCTRADMX_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCUS", typeof(int));
            table.Columns.Add("CCUS_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CCZA", typeof(int));
            table.Columns.Add("CCZA_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CEREBOSTH", typeof(int));
            table.Columns.Add("CEREBOSTH_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CROWDSOURCE", typeof(int));
            table.Columns.Add("CROWDSOURCE_CategoryExpertVoting", typeof(int));
            table.Columns.Add("DIAGEOAU", typeof(int));
            table.Columns.Add("DIAGEOAU_CategoryExpertVoting", typeof(int));
            table.Columns.Add("DIAGEOBR", typeof(int));
            table.Columns.Add("DIAGEOBR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("DIAGEOGR", typeof(int));
            table.Columns.Add("DIAGEOGR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("DIAGEOIE", typeof(int));
            table.Columns.Add("DIAGEOIE_CategoryExpertVoting", typeof(int));
            table.Columns.Add("DIAGEOKE", typeof(int));
            table.Columns.Add("DIAGEOKE_CategoryExpertVoting", typeof(int));
            table.Columns.Add("DIAGEOMX", typeof(int));
            table.Columns.Add("DIAGEOMX_CategoryExpertVoting", typeof(int));
            table.Columns.Add("DIAGEOPT", typeof(int));
            table.Columns.Add("DIAGEOPT_CategoryExpertVoting", typeof(int));
            table.Columns.Add("DIAGEOTW", typeof(int));
            table.Columns.Add("DIAGEOTW_CategoryExpertVoting", typeof(int));
            table.Columns.Add("DIAGEOUK", typeof(int));
            table.Columns.Add("DIAGEOUK_CategoryExpertVoting", typeof(int));
            table.Columns.Add("DIAGEOZA", typeof(int));
            table.Columns.Add("DIAGEOZA_CategoryExpertVoting", typeof(int));
            table.Columns.Add("EMEA_DEMO", typeof(int));
            table.Columns.Add("EMEA_DEMO_CategoryExpertVoting", typeof(int));
            table.Columns.Add("FERREROIT", typeof(int));
            table.Columns.Add("FERREROIT_CategoryExpertVoting", typeof(int));
            table.Columns.Add("GILLETTEUS", typeof(int));
            table.Columns.Add("GILLETTEUS_CategoryExpertVoting", typeof(int));
            table.Columns.Add("GOOGLEUS", typeof(int));
            table.Columns.Add("GOOGLEUS_CategoryExpertVoting", typeof(int));
            table.Columns.Add("HBCDE", typeof(int));
            table.Columns.Add("HBCDE_CategoryExpertVoting", typeof(int));
            table.Columns.Add("HEINEKENCN", typeof(int));
            table.Columns.Add("HEINEKENCN_CategoryExpertVoting", typeof(int));
            table.Columns.Add("HEINEKENUS_PROD", typeof(int));
            table.Columns.Add("HEINEKENUS_PROD_CategoryExpertVoting", typeof(int));
            table.Columns.Add("HEINZCR", typeof(int));
            table.Columns.Add("HEINZCR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVAR", typeof(int));
            table.Columns.Add("INBEVAR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVBE", typeof(int));
            table.Columns.Add("INBEVBE_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVBE_SAND", typeof(int));
            table.Columns.Add("INBEVBE_SAND_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVBR", typeof(int));
            table.Columns.Add("INBEVBR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVBR_ONTRADE", typeof(int));
            table.Columns.Add("INBEVBR_ONTRADE_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVCL", typeof(int));
            table.Columns.Add("INBEVCL_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVCN", typeof(int));
            table.Columns.Add("INBEVCN_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVCOOLERAR", typeof(int));
            table.Columns.Add("INBEVCOOLERAR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVCOOLERBR", typeof(int));
            table.Columns.Add("INBEVCOOLERBR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVCOOLERUS", typeof(int));
            table.Columns.Add("INBEVCOOLERUS_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVFR", typeof(int));
            table.Columns.Add("INBEVFR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVLU", typeof(int));
            table.Columns.Add("INBEVLU_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVLU_SAND", typeof(int));
            table.Columns.Add("INBEVLU_SAND_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVMX", typeof(int));
            table.Columns.Add("INBEVMX_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVNL", typeof(int));
            table.Columns.Add("INBEVNL_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVNL_SAND", typeof(int));
            table.Columns.Add("INBEVNL_SAND_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVPY", typeof(int));
            table.Columns.Add("INBEVPY_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVTRADMX", typeof(int));
            table.Columns.Add("INBEVTRADMX_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVUS", typeof(int));
            table.Columns.Add("INBEVUS_CategoryExpertVoting", typeof(int));
            table.Columns.Add("JTIUA", typeof(int));
            table.Columns.Add("JTIUA_CategoryExpertVoting", typeof(int));
            table.Columns.Add("KCMY", typeof(int));
            table.Columns.Add("KCMY_CategoryExpertVoting", typeof(int));
            table.Columns.Add("KCUS", typeof(int));
            table.Columns.Add("KCUS_CategoryExpertVoting", typeof(int));
            table.Columns.Add("KEURIGCA", typeof(int));
            table.Columns.Add("KEURIGCA_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LABATTPLNOPTCA", typeof(int));
            table.Columns.Add("LABATTPLNOPTCA_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAAT", typeof(int));
            table.Columns.Add("LAVAZZAAT_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAAU", typeof(int));
            table.Columns.Add("LAVAZZAAU_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZABE", typeof(int));
            table.Columns.Add("LAVAZZABE_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZABG", typeof(int));
            table.Columns.Add("LAVAZZABG_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZACA", typeof(int));
            table.Columns.Add("LAVAZZACA_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZACH", typeof(int));
            table.Columns.Add("LAVAZZACH_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZACL", typeof(int));
            table.Columns.Add("LAVAZZACL_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZACN", typeof(int));
            table.Columns.Add("LAVAZZACN_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZACZ", typeof(int));
            table.Columns.Add("LAVAZZACZ_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZADE", typeof(int));
            table.Columns.Add("LAVAZZADE_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZADK", typeof(int));
            table.Columns.Add("LAVAZZADK_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAEE", typeof(int));
            table.Columns.Add("LAVAZZAEE_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAES", typeof(int));
            table.Columns.Add("LAVAZZAES_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAFR", typeof(int));
            table.Columns.Add("LAVAZZAFR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAGR", typeof(int));
            table.Columns.Add("LAVAZZAGR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAHK", typeof(int));
            table.Columns.Add("LAVAZZAHK_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAHR", typeof(int));
            table.Columns.Add("LAVAZZAHR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAIL", typeof(int));
            table.Columns.Add("LAVAZZAIL_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAIT", typeof(int));
            table.Columns.Add("LAVAZZAIT_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAJP", typeof(int));
            table.Columns.Add("LAVAZZAJP_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAKR", typeof(int));
            table.Columns.Add("LAVAZZAKR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZALT", typeof(int));
            table.Columns.Add("LAVAZZALT_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZALU", typeof(int));
            table.Columns.Add("LAVAZZALU_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZALV", typeof(int));
            table.Columns.Add("LAVAZZALV_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAMA", typeof(int));
            table.Columns.Add("LAVAZZAMA_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZANL", typeof(int));
            table.Columns.Add("LAVAZZANL_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAPL", typeof(int));
            table.Columns.Add("LAVAZZAPL_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZARO", typeof(int));
            table.Columns.Add("LAVAZZARO_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZARU", typeof(int));
            table.Columns.Add("LAVAZZARU_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZASA", typeof(int));
            table.Columns.Add("LAVAZZASA_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZASE", typeof(int));
            table.Columns.Add("LAVAZZASE_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZASG", typeof(int));
            table.Columns.Add("LAVAZZASG_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAUAE", typeof(int));
            table.Columns.Add("LAVAZZAUAE_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAUK", typeof(int));
            table.Columns.Add("LAVAZZAUK_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAUS", typeof(int));
            table.Columns.Add("LAVAZZAUS_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAZA", typeof(int));
            table.Columns.Add("LAVAZZAZA_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LRSUK", typeof(int));
            table.Columns.Add("LRSUK_CategoryExpertVoting", typeof(int));
            table.Columns.Add("MARSBR", typeof(int));
            table.Columns.Add("MARSBR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("MARSIN", typeof(int));
            table.Columns.Add("MARSIN_CategoryExpertVoting", typeof(int));
            table.Columns.Add("MARSIN_OLD", typeof(int));
            table.Columns.Add("MARSIN_OLD_CategoryExpertVoting", typeof(int));
            table.Columns.Add("MARSRU_PROD", typeof(int));
            table.Columns.Add("MARSRU_PROD_CategoryExpertVoting", typeof(int));
            table.Columns.Add("MAYORAID", typeof(int));
            table.Columns.Add("MAYORAID_CategoryExpertVoting", typeof(int));
            table.Columns.Add("MJNCN", typeof(int));
            table.Columns.Add("MJNCN_CategoryExpertVoting", typeof(int));
            table.Columns.Add("MOLSONCOOLERHN", typeof(int));
            table.Columns.Add("MOLSONCOOLERHN_CategoryExpertVoting", typeof(int));
            table.Columns.Add("MOLSONCOOLERHR", typeof(int));
            table.Columns.Add("MOLSONCOOLERHR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("MOLSONCOORSUK", typeof(int));
            table.Columns.Add("MOLSONCOORSUK_CategoryExpertVoting", typeof(int));
            table.Columns.Add("NESTLEUK", typeof(int));
            table.Columns.Add("NESTLEUK_CategoryExpertVoting", typeof(int));
            table.Columns.Add("NIVEAUK", typeof(int));
            table.Columns.Add("NIVEAUK_CategoryExpertVoting", typeof(int));
            table.Columns.Add("NRF2017_DEMO", typeof(int));
            table.Columns.Add("NRF2017_DEMO_CategoryExpertVoting", typeof(int));
            table.Columns.Add("ONE_AMERICAS_DEMO", typeof(int));
            table.Columns.Add("ONE_AMERICAS_DEMO_CategoryExpertVoting", typeof(int));
            table.Columns.Add("ONE_APAC_DEMO", typeof(int));
            table.Columns.Add("ONE_APAC_DEMO_CategoryExpertVoting", typeof(int));
            table.Columns.Add("PEPSICOBR", typeof(int));
            table.Columns.Add("PEPSICOBR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("PNGAU", typeof(int));
            table.Columns.Add("PNGAU_CategoryExpertVoting", typeof(int));
            table.Columns.Add("PNGAU_OLD", typeof(int));
            table.Columns.Add("PNGAU_OLD_CategoryExpertVoting", typeof(int));
            table.Columns.Add("PNGCAREUS", typeof(int));
            table.Columns.Add("PNGCAREUS_CategoryExpertVoting", typeof(int));
            table.Columns.Add("PNGCN_PROD", typeof(int));
            table.Columns.Add("PNGCN_PROD_CategoryExpertVoting", typeof(int));
            table.Columns.Add("PNGJP", typeof(int));
            table.Columns.Add("PNGJP_CategoryExpertVoting", typeof(int));
            table.Columns.Add("PNGJP_OLD", typeof(int));
            table.Columns.Add("PNGJP_OLD_CategoryExpertVoting", typeof(int));
            table.Columns.Add("PNGUS", typeof(int));
            table.Columns.Add("PNGUS_CategoryExpertVoting", typeof(int));
            table.Columns.Add("PNGUSEPISODIC", typeof(int));
            table.Columns.Add("PNGUSEPISODIC_CategoryExpertVoting", typeof(int));
            table.Columns.Add("RBUS", typeof(int));
            table.Columns.Add("RBUS_CategoryExpertVoting", typeof(int));
            table.Columns.Add("RE_XSUITE_DEMO", typeof(int));
            table.Columns.Add("RE_XSUITE_DEMO_CategoryExpertVoting", typeof(int));
            table.Columns.Add("REPNGCN_DEMO", typeof(int));
            table.Columns.Add("REPNGCN_DEMO_CategoryExpertVoting", typeof(int));
            table.Columns.Add("RI_DEMO", typeof(int));
            table.Columns.Add("RI_DEMO_CategoryExpertVoting", typeof(int));
            table.Columns.Add("RI_DIAGEOAU", typeof(int));
            table.Columns.Add("RI_DIAGEOAU_CategoryExpertVoting", typeof(int));
            table.Columns.Add("RIALCBEVUK_PROD", typeof(int));
            table.Columns.Add("RIALCBEVUK_PROD_CategoryExpertVoting", typeof(int));
            table.Columns.Add("RICOFFEEUS", typeof(int));
            table.Columns.Add("RICOFFEEUS_CategoryExpertVoting", typeof(int));
            table.Columns.Add("RINIELSENUS", typeof(int));
            table.Columns.Add("RINIELSENUS_CategoryExpertVoting", typeof(int));
            table.Columns.Add("RIPETCAREUK_PROD", typeof(int));
            table.Columns.Add("RIPETCAREUK_PROD_CategoryExpertVoting", typeof(int));
            table.Columns.Add("RIUS", typeof(int));
            table.Columns.Add("RIUS_CategoryExpertVoting", typeof(int));
            table.Columns.Add("RIUS_DEV", typeof(int));
            table.Columns.Add("RIUS_DEV_CategoryExpertVoting", typeof(int));
            table.Columns.Add("RNBDE", typeof(int));
            table.Columns.Add("RNBDE_CategoryExpertVoting", typeof(int));
            table.Columns.Add("SMARTCOOLER_POC2", typeof(int));
            table.Columns.Add("SMARTCOOLER_POC2_CategoryExpertVoting", typeof(int));
            table.Columns.Add("SMARTCOOLER_TRN", typeof(int));
            table.Columns.Add("SMARTCOOLER_TRN_CategoryExpertVoting", typeof(int));
            table.Columns.Add("SMARTCOOLER2_TRN", typeof(int));
            table.Columns.Add("SMARTCOOLER2_TRN_CategoryExpertVoting", typeof(int));
            table.Columns.Add("SOLARBR", typeof(int));
            table.Columns.Add("SOLARBR_CategoryExpertVoting", typeof(int));
            table.Columns.Add("STATIC_CAMERA_DEMO", typeof(int));
            table.Columns.Add("STATIC_CAMERA_DEMO_CategoryExpertVoting", typeof(int));
            table.Columns.Add("SWIRECN", typeof(int));
            table.Columns.Add("SWIRECN_CategoryExpertVoting", typeof(int));
            table.Columns.Add("SWIREREDCN", typeof(int));
            table.Columns.Add("SWIREREDCN_CategoryExpertVoting", typeof(int));
            table.Columns.Add("TNUVAIL", typeof(int));
            table.Columns.Add("TNUVAIL_CategoryExpertVoting", typeof(int));
            table.Columns.Add("TRAXDEMO_TS_PROD", typeof(int));
            table.Columns.Add("TRAXDEMO_TS_PROD_CategoryExpertVoting", typeof(int));
            table.Columns.Add("TWEAU", typeof(int));
            table.Columns.Add("TWEAU_CategoryExpertVoting", typeof(int));
            table.Columns.Add("RI_DEMO2", typeof(int));
            table.Columns.Add("RI_DEMO2_CategoryExpertVoting", typeof(int));
            table.Columns.Add("COMPASSCCH_SAND", typeof(int));
            table.Columns.Add("COMPASSCCH_SAND_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAIT_SAND", typeof(int));
            table.Columns.Add("LAVAZZAIT_SAND_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVUS_STG", typeof(int));
            table.Columns.Add("INBEVUS_STG_CategoryExpertVoting", typeof(int));
            table.Columns.Add("LAVAZZAFR_SAND", typeof(int));
            table.Columns.Add("LAVAZZAFR_SAND_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVBE_SAND2", typeof(int));
            table.Columns.Add("INBEVBE_SAND2_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVLU_SAND2", typeof(int));
            table.Columns.Add("INBEVLU_SAND2_CategoryExpertVoting", typeof(int));
            table.Columns.Add("INBEVNL_SAND2", typeof(int));
            table.Columns.Add("INBEVNL_SAND2_CategoryExpertVoting", typeof(int));
            table.Columns.Add("CreatedDate", typeof(string));
            table.Columns.Add("CreatedBy", typeof(string));

            table.Columns.Add("ImportedDate", typeof(string));
            table.Columns.Add("ImportedYear", typeof(string));
            table.Columns.Add("B2BRU", typeof(int));
            table.Columns.Add("BRMUS", typeof(int));
            table.Columns.Add("CBCIL", typeof(int));
            table.Columns.Add("CCCOOLERMX", typeof(int));
            table.Columns.Add("DIAGEOAR", typeof(int));
            table.Columns.Add("DIAGEOBENELUX", typeof(int));
            table.Columns.Add("DIAGEOCH", typeof(int));
            table.Columns.Add("DIAGEOGA", typeof(int));
            table.Columns.Add("DIAGEOGTR", typeof(int));
            table.Columns.Add("DIAGEONORDICS", typeof(int));
            table.Columns.Add("DIAGEOUS", typeof(int));
            table.Columns.Add("FERREROEXTIT", typeof(int));
            table.Columns.Add("GOOGLEHK", typeof(int));
            table.Columns.Add("HEINEKENPILOTCN", typeof(int));
            table.Columns.Add("IMBO", typeof(int));
            table.Columns.Add("INBEVCI", typeof(int));
            table.Columns.Add("INBEVCNTT", typeof(int));
            table.Columns.Add("INBEVCO", typeof(int));
            table.Columns.Add("INBEVZA", typeof(int));
            table.Columns.Add("INORU", typeof(int));
            table.Columns.Add("JJSP", typeof(int));
            table.Columns.Add("JNJES", typeof(int));
            table.Columns.Add("JNJUK", typeof(int));
            table.Columns.Add("JRIJP", typeof(int));
            table.Columns.Add("KELLOGSUSPOC", typeof(int));
            table.Columns.Add("KRAFTUS", typeof(int));
            table.Columns.Add("MARS_CHOCO_RU", typeof(int));
            table.Columns.Add("MHUK", typeof(int));
            table.Columns.Add("MILLERCOORS", typeof(int));
            table.Columns.Add("MOLSONONTRADEUK", typeof(int));
            table.Columns.Add("MYCHEMISTAU", typeof(int));
            table.Columns.Add("NESTLEROAMLERUK", typeof(int));
            table.Columns.Add("NRF2018", typeof(int));
            table.Columns.Add("PENAFLORAR", typeof(int));
            table.Columns.Add("PMIUA", typeof(int));
            table.Columns.Add("PNGAMERICA", typeof(int));
            table.Columns.Add("PNGRO", typeof(int));
            table.Columns.Add("RBAU", typeof(int));
            table.Columns.Add("RBCA", typeof(int));
            table.Columns.Add("RBDK", typeof(int));
            table.Columns.Add("RBMANUAL", typeof(int));
            table.Columns.Add("RINIELSENRU_MARS", typeof(int));
            table.Columns.Add("RINIELSENUSQI", typeof(int));
            table.Columns.Add("RIPANELCN", typeof(int));
            table.Columns.Add("RISPARKWINEDE", typeof(int));
            table.Columns.Add("SANOFIAE", typeof(int));
            table.Columns.Add("SANOFIAU", typeof(int));
            table.Columns.Add("SANOFIHK", typeof(int));
            table.Columns.Add("SANOFIKH", typeof(int));
            table.Columns.Add("SANOFINZ", typeof(int));
            table.Columns.Add("SANOFIRU", typeof(int));
            table.Columns.Add("SANOFITR", typeof(int));
            table.Columns.Add("SANOFIUA", typeof(int));
            table.Columns.Add("SHUFERSALIL", typeof(int));
            table.Columns.Add("SUNTORYJP", typeof(int));
            table.Columns.Add("TESCOTH", typeof(int));
            table.Columns.Add("TESCOUK", typeof(int));
            table.Columns.Add("TRAXROBOT", typeof(int));
            table.Columns.Add("XSUITE_SHOWCASE", typeof(int));
            table.Columns.Add("ABIUS", typeof(int));
            table.Columns.Add("BADGERROBOT", typeof(int));
            table.Columns.Add("CUBAU", typeof(int));
            table.Columns.Add("DIAGEORU", typeof(int));
            table.Columns.Add("GFKFR", typeof(int));
            table.Columns.Add("JNJIT", typeof(int));
            table.Columns.Add("LIGHTTRAX", typeof(int));
            table.Columns.Add("LIGHTTRAXOFFLINE", typeof(int));
            table.Columns.Add("RINIELSENFR", typeof(int));
            table.Columns.Add("SANOFIKZ", typeof(int));
            table.Columns.Add("SANOFILB", typeof(int));
            table.Columns.Add("SANOFISA", typeof(int));
            table.Columns.Add("SANOFIZA", typeof(int));
            table.Columns.Add("WATSONSHK", typeof(int));
            table.Columns.Add("KELLOGGUS", typeof(int));
            table.Columns.Add("TSINGTAOBEERCN", typeof(int));

            // note : the order of the field is very important
            // and should be same as the defined in table structure.
            categoryexpertvoting.ForEach(data => table.Rows.Add(
                                                data.ID
                                                , data.QAT
                                                , data.Center
                                                , data.TotalCategoryExpertVoting
                                                , data.AvgsecondsperCategoryExpertVoting
                                                , data.ABICA
                                                , data.ABICA_CategoryExpertVoting
                                                , data.ABITAMSUS_PROD
                                                , data.ABITAMSUS_PROD_CategoryExpertVoting
                                                , data.AMERICAS_DEMO
                                                , data.AMERICAS_DEMO_CategoryExpertVoting
                                                , data.BATRU
                                                , data.BATRU_CategoryExpertVoting
                                                , data.BIKR
                                                , data.BIKR_CategoryExpertVoting
                                                , data.BIMY
                                                , data.BIMY_CategoryExpertVoting
                                                , data.BIPH
                                                , data.BIPH_CategoryExpertVoting
                                                , data.BISEASK
                                                , data.BISEASK_CategoryExpertVoting
                                                , data.BITH
                                                , data.BITH_CategoryExpertVoting
                                                , data.BIVN
                                                , data.BIVN_CategoryExpertVoting
                                                , data.BPAU
                                                , data.BPAU_CategoryExpertVoting
                                                , data.BRODMANN
                                                , data.BRODMANN_CategoryExpertVoting
                                                , data.CARREFOURAR
                                                , data.CARREFOURAR_CategoryExpertVoting
                                                , data.CCAAU
                                                , data.CCAAU_CategoryExpertVoting
                                                , data.CCABIZA
                                                , data.CCABIZA_CategoryExpertVoting
                                                , data.CCANZ
                                                , data.CCANZ_CategoryExpertVoting
                                                , data.CCBOTTLERSUS
                                                , data.CCBOTTLERSUS_CategoryExpertVoting
                                                , data.CCBR_PROD
                                                , data.CCBR_PROD_CategoryExpertVoting
                                                , data.CCJP
                                                , data.CCJP_CategoryExpertVoting
                                                , data.CCKH
                                                , data.CCKH_CategoryExpertVoting
                                                , data.CCKR
                                                , data.CCKR_CategoryExpertVoting
                                                , data.CCMY
                                                , data.CCMY_CategoryExpertVoting
                                                , data.CCPH
                                                , data.CCPH_CategoryExpertVoting
                                                , data.CCRPR_PROD
                                                , data.CCRPR_PROD_CategoryExpertVoting
                                                , data.CCRU
                                                , data.CCRU_CategoryExpertVoting
                                                , data.CCTH
                                                , data.CCTH_CategoryExpertVoting
                                                , data.CCTH_UAT
                                                , data.CCTH_UAT_CategoryExpertVoting
                                                , data.CCTRADMX
                                                , data.CCTRADMX_CategoryExpertVoting
                                                , data.CCUS
                                                , data.CCUS_CategoryExpertVoting
                                                , data.CCZA
                                                , data.CCZA_CategoryExpertVoting
                                                , data.CEREBOSTH
                                                , data.CEREBOSTH_CategoryExpertVoting
                                                , data.CROWDSOURCE
                                                , data.CROWDSOURCE_CategoryExpertVoting
                                                , data.DIAGEOAU
                                                , data.DIAGEOAU_CategoryExpertVoting
                                                , data.DIAGEOBR
                                                , data.DIAGEOBR_CategoryExpertVoting
                                                , data.DIAGEOGR
                                                , data.DIAGEOGR_CategoryExpertVoting
                                                , data.DIAGEOIE
                                                , data.DIAGEOIE_CategoryExpertVoting
                                                , data.DIAGEOKE
                                                , data.DIAGEOKE_CategoryExpertVoting
                                                , data.DIAGEOMX
                                                , data.DIAGEOMX_CategoryExpertVoting
                                                , data.DIAGEOPT
                                                , data.DIAGEOPT_CategoryExpertVoting
                                                , data.DIAGEOTW
                                                , data.DIAGEOTW_CategoryExpertVoting
                                                , data.DIAGEOUK
                                                , data.DIAGEOUK_CategoryExpertVoting
                                                , data.DIAGEOZA
                                                , data.DIAGEOZA_CategoryExpertVoting
                                                , data.EMEA_DEMO
                                                , data.EMEA_DEMO_CategoryExpertVoting
                                                , data.FERREROIT
                                                , data.FERREROIT_CategoryExpertVoting
                                                , data.GILLETTEUS
                                                , data.GILLETTEUS_CategoryExpertVoting
                                                , data.GOOGLEUS
                                                , data.GOOGLEUS_CategoryExpertVoting
                                                , data.HBCDE
                                                , data.HBCDE_CategoryExpertVoting
                                                , data.HEINEKENCN
                                                , data.HEINEKENCN_CategoryExpertVoting
                                                , data.HEINEKENUS_PROD
                                                , data.HEINEKENUS_PROD_CategoryExpertVoting
                                                , data.HEINZCR
                                                , data.HEINZCR_CategoryExpertVoting
                                                , data.INBEVAR
                                                , data.INBEVAR_CategoryExpertVoting
                                                , data.INBEVBE
                                                , data.INBEVBE_CategoryExpertVoting
                                                , data.INBEVBE_SAND
                                                , data.INBEVBE_SAND_CategoryExpertVoting
                                                , data.INBEVBR
                                                , data.INBEVBR_CategoryExpertVoting
                                                , data.INBEVBR_ONTRADE
                                                , data.INBEVBR_ONTRADE_CategoryExpertVoting
                                                , data.INBEVCL
                                                , data.INBEVCL_CategoryExpertVoting
                                                , data.INBEVCN
                                                , data.INBEVCN_CategoryExpertVoting
                                                , data.INBEVCOOLERAR
                                                , data.INBEVCOOLERAR_CategoryExpertVoting
                                                , data.INBEVCOOLERBR
                                                , data.INBEVCOOLERBR_CategoryExpertVoting
                                                , data.INBEVCOOLERUS
                                                , data.INBEVCOOLERUS_CategoryExpertVoting
                                                , data.INBEVFR
                                                , data.INBEVFR_CategoryExpertVoting
                                                , data.INBEVLU
                                                , data.INBEVLU_CategoryExpertVoting
                                                , data.INBEVLU_SAND
                                                , data.INBEVLU_SAND_CategoryExpertVoting
                                                , data.INBEVMX
                                                , data.INBEVMX_CategoryExpertVoting
                                                , data.INBEVNL
                                                , data.INBEVNL_CategoryExpertVoting
                                                , data.INBEVNL_SAND
                                                , data.INBEVNL_SAND_CategoryExpertVoting
                                                , data.INBEVPY
                                                , data.INBEVPY_CategoryExpertVoting
                                                , data.INBEVTRADMX
                                                , data.INBEVTRADMX_CategoryExpertVoting
                                                , data.INBEVUS
                                                , data.INBEVUS_CategoryExpertVoting
                                                , data.JTIUA
                                                , data.JTIUA_CategoryExpertVoting
                                                , data.KCMY
                                                , data.KCMY_CategoryExpertVoting
                                                , data.KCUS
                                                , data.KCUS_CategoryExpertVoting
                                                , data.KEURIGCA
                                                , data.KEURIGCA_CategoryExpertVoting
                                                , data.LABATTPLNOPTCA
                                                , data.LABATTPLNOPTCA_CategoryExpertVoting
                                                , data.LAVAZZAAT
                                                , data.LAVAZZAAT_CategoryExpertVoting
                                                , data.LAVAZZAAU
                                                , data.LAVAZZAAU_CategoryExpertVoting
                                                , data.LAVAZZABE
                                                , data.LAVAZZABE_CategoryExpertVoting
                                                , data.LAVAZZABG
                                                , data.LAVAZZABG_CategoryExpertVoting
                                                , data.LAVAZZACA
                                                , data.LAVAZZACA_CategoryExpertVoting
                                                , data.LAVAZZACH
                                                , data.LAVAZZACH_CategoryExpertVoting
                                                , data.LAVAZZACL
                                                , data.LAVAZZACL_CategoryExpertVoting
                                                , data.LAVAZZACN
                                                , data.LAVAZZACN_CategoryExpertVoting
                                                , data.LAVAZZACZ
                                                , data.LAVAZZACZ_CategoryExpertVoting
                                                , data.LAVAZZADE
                                                , data.LAVAZZADE_CategoryExpertVoting
                                                , data.LAVAZZADK
                                                , data.LAVAZZADK_CategoryExpertVoting
                                                , data.LAVAZZAEE
                                                , data.LAVAZZAEE_CategoryExpertVoting
                                                , data.LAVAZZAES
                                                , data.LAVAZZAES_CategoryExpertVoting
                                                , data.LAVAZZAFR
                                                , data.LAVAZZAFR_CategoryExpertVoting
                                                , data.LAVAZZAGR
                                                , data.LAVAZZAGR_CategoryExpertVoting
                                                , data.LAVAZZAHK
                                                , data.LAVAZZAHK_CategoryExpertVoting
                                                , data.LAVAZZAHR
                                                , data.LAVAZZAHR_CategoryExpertVoting
                                                , data.LAVAZZAIL
                                                , data.LAVAZZAIL_CategoryExpertVoting
                                                , data.LAVAZZAIT
                                                , data.LAVAZZAIT_CategoryExpertVoting
                                                , data.LAVAZZAJP
                                                , data.LAVAZZAJP_CategoryExpertVoting
                                                , data.LAVAZZAKR
                                                , data.LAVAZZAKR_CategoryExpertVoting
                                                , data.LAVAZZALT
                                                , data.LAVAZZALT_CategoryExpertVoting
                                                , data.LAVAZZALU
                                                , data.LAVAZZALU_CategoryExpertVoting
                                                , data.LAVAZZALV
                                                , data.LAVAZZALV_CategoryExpertVoting
                                                , data.LAVAZZAMA
                                                , data.LAVAZZAMA_CategoryExpertVoting
                                                , data.LAVAZZANL
                                                , data.LAVAZZANL_CategoryExpertVoting
                                                , data.LAVAZZAPL
                                                , data.LAVAZZAPL_CategoryExpertVoting
                                                , data.LAVAZZARO
                                                , data.LAVAZZARO_CategoryExpertVoting
                                                , data.LAVAZZARU
                                                , data.LAVAZZARU_CategoryExpertVoting
                                                , data.LAVAZZASA
                                                , data.LAVAZZASA_CategoryExpertVoting
                                                , data.LAVAZZASE
                                                , data.LAVAZZASE_CategoryExpertVoting
                                                , data.LAVAZZASG
                                                , data.LAVAZZASG_CategoryExpertVoting
                                                , data.LAVAZZAUAE
                                                , data.LAVAZZAUAE_CategoryExpertVoting
                                                , data.LAVAZZAUK
                                                , data.LAVAZZAUK_CategoryExpertVoting
                                                , data.LAVAZZAUS
                                                , data.LAVAZZAUS_CategoryExpertVoting
                                                , data.LAVAZZAZA
                                                , data.LAVAZZAZA_CategoryExpertVoting
                                                , data.LRSUK
                                                , data.LRSUK_CategoryExpertVoting
                                                , data.MARSBR
                                                , data.MARSBR_CategoryExpertVoting
                                                , data.MARSIN
                                                , data.MARSIN_CategoryExpertVoting
                                                , data.MARSIN_OLD
                                                , data.MARSIN_OLD_CategoryExpertVoting
                                                , data.MARSRU_PROD
                                                , data.MARSRU_PROD_CategoryExpertVoting
                                                , data.MAYORAID
                                                , data.MAYORAID_CategoryExpertVoting
                                                , data.MJNCN
                                                , data.MJNCN_CategoryExpertVoting
                                                , data.MOLSONCOOLERHN
                                                , data.MOLSONCOOLERHN_CategoryExpertVoting
                                                , data.MOLSONCOOLERHR
                                                , data.MOLSONCOOLERHR_CategoryExpertVoting
                                                , data.MOLSONCOORSUK
                                                , data.MOLSONCOORSUK_CategoryExpertVoting
                                                , data.NESTLEUK
                                                , data.NESTLEUK_CategoryExpertVoting
                                                , data.NIVEAUK
                                                , data.NIVEAUK_CategoryExpertVoting
                                                , data.NRF2017_DEMO
                                                , data.NRF2017_DEMO_CategoryExpertVoting
                                                , data.ONE_AMERICAS_DEMO
                                                , data.ONE_AMERICAS_DEMO_CategoryExpertVoting
                                                , data.ONE_APAC_DEMO
                                                , data.ONE_APAC_DEMO_CategoryExpertVoting
                                                , data.PEPSICOBR
                                                , data.PEPSICOBR_CategoryExpertVoting
                                                , data.PNGAU
                                                , data.PNGAU_CategoryExpertVoting
                                                , data.PNGAU_OLD
                                                , data.PNGAU_OLD_CategoryExpertVoting
                                                , data.PNGCAREUS
                                                , data.PNGCAREUS_CategoryExpertVoting
                                                , data.PNGCN_PROD
                                                , data.PNGCN_PROD_CategoryExpertVoting
                                                , data.PNGJP
                                                , data.PNGJP_CategoryExpertVoting
                                                , data.PNGJP_OLD
                                                , data.PNGJP_OLD_CategoryExpertVoting
                                                , data.PNGUS
                                                , data.PNGUS_CategoryExpertVoting
                                                , data.PNGUSEPISODIC
                                                , data.PNGUSEPISODIC_CategoryExpertVoting
                                                , data.RBUS
                                                , data.RBUS_CategoryExpertVoting
                                                , data.RE_XSUITE_DEMO
                                                , data.RE_XSUITE_DEMO_CategoryExpertVoting
                                                , data.REPNGCN_DEMO
                                                , data.REPNGCN_DEMO_CategoryExpertVoting
                                                , data.RI_DEMO
                                                , data.RI_DEMO_CategoryExpertVoting
                                                , data.RI_DIAGEOAU
                                                , data.RI_DIAGEOAU_CategoryExpertVoting
                                                , data.RIALCBEVUK_PROD
                                                , data.RIALCBEVUK_PROD_CategoryExpertVoting
                                                , data.RICOFFEEUS
                                                , data.RICOFFEEUS_CategoryExpertVoting
                                                , data.RINIELSENUS
                                                , data.RINIELSENUS_CategoryExpertVoting
                                                , data.RIPETCAREUK_PROD
                                                , data.RIPETCAREUK_PROD_CategoryExpertVoting
                                                , data.RIUS
                                                , data.RIUS_CategoryExpertVoting
                                                , data.RIUS_DEV
                                                , data.RIUS_DEV_CategoryExpertVoting
                                                , data.RNBDE
                                                , data.RNBDE_CategoryExpertVoting
                                                , data.SMARTCOOLER_POC2
                                                , data.SMARTCOOLER_POC2_CategoryExpertVoting
                                                , data.SMARTCOOLER_TRN
                                                , data.SMARTCOOLER_TRN_CategoryExpertVoting
                                                , data.SMARTCOOLER2_TRN
                                                , data.SMARTCOOLER2_TRN_CategoryExpertVoting
                                                , data.SOLARBR
                                                , data.SOLARBR_CategoryExpertVoting
                                                , data.STATIC_CAMERA_DEMO
                                                , data.STATIC_CAMERA_DEMO_CategoryExpertVoting
                                                , data.SWIRECN
                                                , data.SWIRECN_CategoryExpertVoting
                                                , data.SWIREREDCN
                                                , data.SWIREREDCN_CategoryExpertVoting
                                                , data.TNUVAIL
                                                , data.TNUVAIL_CategoryExpertVoting
                                                , data.TRAXDEMO_TS_PROD
                                                , data.TRAXDEMO_TS_PROD_CategoryExpertVoting
                                                , data.TWEAU
                                                , data.TWEAU_CategoryExpertVoting
                                                , data.RI_DEMO2
                                                , data.RI_DEMO2_CategoryExpertVoting
                                                , data.COMPASSCCH_SAND
                                                , data.COMPASSCCH_SAND_CategoryExpertVoting
                                                , data.LAVAZZAIT_SAND
                                                , data.LAVAZZAIT_SAND_CategoryExpertVoting
                                                , data.INBEVUS_STG
                                                , data.INBEVUS_STG_CategoryExpertVoting
                                                , data.LAVAZZAFR_SAND
                                                , data.LAVAZZAFR_SAND_CategoryExpertVoting
                                                , data.INBEVBE_SAND2
                                                , data.INBEVBE_SAND2_CategoryExpertVoting
                                                , data.INBEVLU_SAND2
                                                , data.INBEVLU_SAND2_CategoryExpertVoting
                                                , data.INBEVNL_SAND2
                                                , data.INBEVNL_SAND2_CategoryExpertVoting
                                                , data.CreatedDate
                                                , data.CreatedBy

                                                , data.ImportedDate
                                                , data.ImportedYear
                                                , data.B2BRU
                                                , data.BRMUS
                                                , data.CBCIL
                                                , data.CCCOOLERMX
                                                , data.DIAGEOAR
                                                , data.DIAGEOBENELUX
                                                , data.DIAGEOCH
                                                , data.DIAGEOGA
                                                , data.DIAGEOGTR
                                                , data.DIAGEONORDICS
                                                , data.DIAGEOUS
                                                , data.FERREROEXTIT
                                                , data.GOOGLEHK
                                                , data.HEINEKENPILOTCN
                                                , data.IMBO
                                                , data.INBEVCI
                                                , data.INBEVCNTT
                                                , data.INBEVCO
                                                , data.INBEVZA
                                                , data.INORU
                                                , data.JJSP
                                                , data.JNJES
                                                , data.JNJUK
                                                , data.JRIJP
                                                , data.KELLOGSUSPOC
                                                , data.KRAFTUS
                                                , data.MARS_CHOCO_RU
                                                , data.MHUK
                                                , data.MILLERCOORS
                                                , data.MOLSONONTRADEUK
                                                , data.MYCHEMISTAU
                                                , data.NESTLEROAMLERUK
                                                , data.NRF2018
                                                , data.PENAFLORAR
                                                , data.PMIUA
                                                , data.PNGAMERICA
                                                , data.PNGRO
                                                , data.RBAU
                                                , data.RBCA
                                                , data.RBDK
                                                , data.RBMANUAL
                                                , data.RINIELSENRU_MARS
                                                , data.RINIELSENUSQI
                                                , data.RIPANELCN
                                                , data.RISPARKWINEDE
                                                , data.SANOFIAE
                                                , data.SANOFIAU
                                                , data.SANOFIHK
                                                , data.SANOFIKH
                                                , data.SANOFINZ
                                                , data.SANOFIRU
                                                , data.SANOFITR
                                                , data.SANOFIUA
                                                , data.SHUFERSALIL
                                                , data.SUNTORYJP
                                                , data.TESCOTH
                                                , data.TESCOUK
                                                , data.TRAXROBOT
                                                , data.XSUITE_SHOWCASE
                                                , data.ABIUS
                                                , data.BADGERROBOT
                                                , data.CUBAU
                                                , data.DIAGEORU
                                                , data.GFKFR
                                                , data.JNJIT
                                                , data.LIGHTTRAX
                                                , data.LIGHTTRAXOFFLINE
                                                , data.RINIELSENFR
                                                , data.SANOFIKZ
                                                , data.SANOFILB
                                                , data.SANOFISA
                                                , data.SANOFIZA
                                                , data.WATSONSHK
                                                , data.KELLOGGUS
                                                 , data.TSINGTAOBEERCN
                                                ));
            return table;
        }



        public int BulkInsertIntoCategoryExpertHunt(List<CategoryExpertHuntEntity> categoryexpertvoting)
        {
            using (var scope = new TransactionScope())
            {
                string connectionString = ConfigurationManager.ConnectionStrings["Client"].ConnectionString;
                var sqlConnection = new SqlConnection(connectionString);
                var sqlBulkCopy = new SqlBulkCopy(sqlConnection)
                {
                    DestinationTableName = "CategoryExpertHunt",
                    //BulkCopyTimeout = 6000
                };
                var dataTable = GetDataTableForCategoryExpertHunt(categoryexpertvoting);
                sqlConnection.Open();

                sqlBulkCopy.WriteToServer(dataTable);

                scope.Complete();
                sqlBulkCopy.Close();
                sqlConnection.Close();
                sqlConnection.Dispose();
            }
            return categoryexpertvoting.Count;
        }


        private DataTable GetDataTableForCategoryExpertHunt(List<CategoryExpertHuntEntity> categoryexperthunt)
        {
            var table = new DataTable();
            table.Columns.Add("ID", typeof(string));
            table.Columns.Add("QAT", typeof(string));
            table.Columns.Add("Center", typeof(string));
            table.Columns.Add("TotalCategoryExpertHunt", typeof(int));
            table.Columns.Add("AvgsecondsperCategoryExpertHunt", typeof(int));
            table.Columns.Add("ABICA", typeof(int));
            table.Columns.Add("ABICA_CategoryExpertHunt", typeof(int));
            table.Columns.Add("ABITAMSUS_PROD", typeof(int));
            table.Columns.Add("ABITAMSUS_PROD_CategoryExpertHunt", typeof(int));
            table.Columns.Add("AMERICAS_DEMO", typeof(int));
            table.Columns.Add("AMERICAS_DEMO_CategoryExpertHunt", typeof(int));
            table.Columns.Add("BATRU", typeof(int));
            table.Columns.Add("BATRU_CategoryExpertHunt", typeof(int));
            table.Columns.Add("BIKR", typeof(int));
            table.Columns.Add("BIKR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("BIMY", typeof(int));
            table.Columns.Add("BIMY_CategoryExpertHunt", typeof(int));
            table.Columns.Add("BIPH", typeof(int));
            table.Columns.Add("BIPH_CategoryExpertHunt", typeof(int));
            table.Columns.Add("BISEASK", typeof(int));
            table.Columns.Add("BISEASK_CategoryExpertHunt", typeof(int));
            table.Columns.Add("BITH", typeof(int));
            table.Columns.Add("BITH_CategoryExpertHunt", typeof(int));
            table.Columns.Add("BIVN", typeof(int));
            table.Columns.Add("BIVN_CategoryExpertHunt", typeof(int));
            table.Columns.Add("BPAU", typeof(int));
            table.Columns.Add("BPAU_CategoryExpertHunt", typeof(int));
            table.Columns.Add("BRODMANN", typeof(int));
            table.Columns.Add("BRODMANN_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CARREFOURAR", typeof(int));
            table.Columns.Add("CARREFOURAR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCAAU", typeof(int));
            table.Columns.Add("CCAAU_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCABIZA", typeof(int));
            table.Columns.Add("CCABIZA_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCANZ", typeof(int));
            table.Columns.Add("CCANZ_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCBOTTLERSUS", typeof(int));
            table.Columns.Add("CCBOTTLERSUS_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCBR_PROD", typeof(int));
            table.Columns.Add("CCBR_PROD_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCJP", typeof(int));
            table.Columns.Add("CCJP_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCKH", typeof(int));
            table.Columns.Add("CCKH_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCKR", typeof(int));
            table.Columns.Add("CCKR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCMY", typeof(int));
            table.Columns.Add("CCMY_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCPH", typeof(int));
            table.Columns.Add("CCPH_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCRPR_PROD", typeof(int));
            table.Columns.Add("CCRPR_PROD_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCRU", typeof(int));
            table.Columns.Add("CCRU_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCTH", typeof(int));
            table.Columns.Add("CCTH_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCTH_UAT", typeof(int));
            table.Columns.Add("CCTH_UAT_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCTRADMX", typeof(int));
            table.Columns.Add("CCTRADMX_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCUS", typeof(int));
            table.Columns.Add("CCUS_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CCZA", typeof(int));
            table.Columns.Add("CCZA_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CEREBOSTH", typeof(int));
            table.Columns.Add("CEREBOSTH_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CROWDSOURCE", typeof(int));
            table.Columns.Add("CROWDSOURCE_CategoryExpertHunt", typeof(int));
            table.Columns.Add("DIAGEOAU", typeof(int));
            table.Columns.Add("DIAGEOAU_CategoryExpertHunt", typeof(int));
            table.Columns.Add("DIAGEOBR", typeof(int));
            table.Columns.Add("DIAGEOBR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("DIAGEOGR", typeof(int));
            table.Columns.Add("DIAGEOGR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("DIAGEOIE", typeof(int));
            table.Columns.Add("DIAGEOIE_CategoryExpertHunt", typeof(int));
            table.Columns.Add("DIAGEOKE", typeof(int));
            table.Columns.Add("DIAGEOKE_CategoryExpertHunt", typeof(int));
            table.Columns.Add("DIAGEOMX", typeof(int));
            table.Columns.Add("DIAGEOMX_CategoryExpertHunt", typeof(int));
            table.Columns.Add("DIAGEOPT", typeof(int));
            table.Columns.Add("DIAGEOPT_CategoryExpertHunt", typeof(int));
            table.Columns.Add("DIAGEOTW", typeof(int));
            table.Columns.Add("DIAGEOTW_CategoryExpertHunt", typeof(int));
            table.Columns.Add("DIAGEOUK", typeof(int));
            table.Columns.Add("DIAGEOUK_CategoryExpertHunt", typeof(int));
            table.Columns.Add("DIAGEOZA", typeof(int));
            table.Columns.Add("DIAGEOZA_CategoryExpertHunt", typeof(int));
            table.Columns.Add("EMEA_DEMO", typeof(int));
            table.Columns.Add("EMEA_DEMO_CategoryExpertHunt", typeof(int));
            table.Columns.Add("FERREROIT", typeof(int));
            table.Columns.Add("FERREROIT_CategoryExpertHunt", typeof(int));
            table.Columns.Add("GILLETTEUS", typeof(int));
            table.Columns.Add("GILLETTEUS_CategoryExpertHunt", typeof(int));
            table.Columns.Add("GOOGLEUS", typeof(int));
            table.Columns.Add("GOOGLEUS_CategoryExpertHunt", typeof(int));
            table.Columns.Add("HBCDE", typeof(int));
            table.Columns.Add("HBCDE_CategoryExpertHunt", typeof(int));
            table.Columns.Add("HEINEKENCN", typeof(int));
            table.Columns.Add("HEINEKENCN_CategoryExpertHunt", typeof(int));
            table.Columns.Add("HEINEKENUS_PROD", typeof(int));
            table.Columns.Add("HEINEKENUS_PROD_CategoryExpertHunt", typeof(int));
            table.Columns.Add("HEINZCR", typeof(int));
            table.Columns.Add("HEINZCR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVAR", typeof(int));
            table.Columns.Add("INBEVAR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVBE", typeof(int));
            table.Columns.Add("INBEVBE_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVBE_SAND", typeof(int));
            table.Columns.Add("INBEVBE_SAND_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVBR", typeof(int));
            table.Columns.Add("INBEVBR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVBR_ONTRADE", typeof(int));
            table.Columns.Add("INBEVBR_ONTRADE_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVCL", typeof(int));
            table.Columns.Add("INBEVCL_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVCN", typeof(int));
            table.Columns.Add("INBEVCN_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVCOOLERAR", typeof(int));
            table.Columns.Add("INBEVCOOLERAR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVCOOLERBR", typeof(int));
            table.Columns.Add("INBEVCOOLERBR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVCOOLERUS", typeof(int));
            table.Columns.Add("INBEVCOOLERUS_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVFR", typeof(int));
            table.Columns.Add("INBEVFR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVLU", typeof(int));
            table.Columns.Add("INBEVLU_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVLU_SAND", typeof(int));
            table.Columns.Add("INBEVLU_SAND_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVMX", typeof(int));
            table.Columns.Add("INBEVMX_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVNL", typeof(int));
            table.Columns.Add("INBEVNL_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVNL_SAND", typeof(int));
            table.Columns.Add("INBEVNL_SAND_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVPY", typeof(int));
            table.Columns.Add("INBEVPY_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVTRADMX", typeof(int));
            table.Columns.Add("INBEVTRADMX_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVUS", typeof(int));
            table.Columns.Add("INBEVUS_CategoryExpertHunt", typeof(int));
            table.Columns.Add("JTIUA", typeof(int));
            table.Columns.Add("JTIUA_CategoryExpertHunt", typeof(int));
            table.Columns.Add("KCMY", typeof(int));
            table.Columns.Add("KCMY_CategoryExpertHunt", typeof(int));
            table.Columns.Add("KCUS", typeof(int));
            table.Columns.Add("KCUS_CategoryExpertHunt", typeof(int));
            table.Columns.Add("KEURIGCA", typeof(int));
            table.Columns.Add("KEURIGCA_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LABATTPLNOPTCA", typeof(int));
            table.Columns.Add("LABATTPLNOPTCA_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAAT", typeof(int));
            table.Columns.Add("LAVAZZAAT_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAAU", typeof(int));
            table.Columns.Add("LAVAZZAAU_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZABE", typeof(int));
            table.Columns.Add("LAVAZZABE_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZABG", typeof(int));
            table.Columns.Add("LAVAZZABG_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZACA", typeof(int));
            table.Columns.Add("LAVAZZACA_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZACH", typeof(int));
            table.Columns.Add("LAVAZZACH_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZACL", typeof(int));
            table.Columns.Add("LAVAZZACL_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZACN", typeof(int));
            table.Columns.Add("LAVAZZACN_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZACZ", typeof(int));
            table.Columns.Add("LAVAZZACZ_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZADE", typeof(int));
            table.Columns.Add("LAVAZZADE_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZADK", typeof(int));
            table.Columns.Add("LAVAZZADK_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAEE", typeof(int));
            table.Columns.Add("LAVAZZAEE_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAES", typeof(int));
            table.Columns.Add("LAVAZZAES_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAFR", typeof(int));
            table.Columns.Add("LAVAZZAFR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAGR", typeof(int));
            table.Columns.Add("LAVAZZAGR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAHK", typeof(int));
            table.Columns.Add("LAVAZZAHK_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAHR", typeof(int));
            table.Columns.Add("LAVAZZAHR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAIL", typeof(int));
            table.Columns.Add("LAVAZZAIL_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAIT", typeof(int));
            table.Columns.Add("LAVAZZAIT_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAJP", typeof(int));
            table.Columns.Add("LAVAZZAJP_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAKR", typeof(int));
            table.Columns.Add("LAVAZZAKR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZALT", typeof(int));
            table.Columns.Add("LAVAZZALT_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZALU", typeof(int));
            table.Columns.Add("LAVAZZALU_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZALV", typeof(int));
            table.Columns.Add("LAVAZZALV_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAMA", typeof(int));
            table.Columns.Add("LAVAZZAMA_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZANL", typeof(int));
            table.Columns.Add("LAVAZZANL_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAPL", typeof(int));
            table.Columns.Add("LAVAZZAPL_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZARO", typeof(int));
            table.Columns.Add("LAVAZZARO_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZARU", typeof(int));
            table.Columns.Add("LAVAZZARU_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZASA", typeof(int));
            table.Columns.Add("LAVAZZASA_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZASE", typeof(int));
            table.Columns.Add("LAVAZZASE_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZASG", typeof(int));
            table.Columns.Add("LAVAZZASG_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAUAE", typeof(int));
            table.Columns.Add("LAVAZZAUAE_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAUK", typeof(int));
            table.Columns.Add("LAVAZZAUK_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAUS", typeof(int));
            table.Columns.Add("LAVAZZAUS_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAZA", typeof(int));
            table.Columns.Add("LAVAZZAZA_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LRSUK", typeof(int));
            table.Columns.Add("LRSUK_CategoryExpertHunt", typeof(int));
            table.Columns.Add("MARSBR", typeof(int));
            table.Columns.Add("MARSBR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("MARSIN", typeof(int));
            table.Columns.Add("MARSIN_CategoryExpertHunt", typeof(int));
            table.Columns.Add("MARSIN_OLD", typeof(int));
            table.Columns.Add("MARSIN_OLD_CategoryExpertHunt", typeof(int));
            table.Columns.Add("MARSRU_PROD", typeof(int));
            table.Columns.Add("MARSRU_PROD_CategoryExpertHunt", typeof(int));
            table.Columns.Add("MAYORAID", typeof(int));
            table.Columns.Add("MAYORAID_CategoryExpertHunt", typeof(int));
            table.Columns.Add("MJNCN", typeof(int));
            table.Columns.Add("MJNCN_CategoryExpertHunt", typeof(int));
            table.Columns.Add("MOLSONCOOLERHN", typeof(int));
            table.Columns.Add("MOLSONCOOLERHN_CategoryExpertHunt", typeof(int));
            table.Columns.Add("MOLSONCOOLERHR", typeof(int));
            table.Columns.Add("MOLSONCOOLERHR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("MOLSONCOORSUK", typeof(int));
            table.Columns.Add("MOLSONCOORSUK_CategoryExpertHunt", typeof(int));
            table.Columns.Add("NESTLEUK", typeof(int));
            table.Columns.Add("NESTLEUK_CategoryExpertHunt", typeof(int));
            table.Columns.Add("NIVEAUK", typeof(int));
            table.Columns.Add("NIVEAUK_CategoryExpertHunt", typeof(int));
            table.Columns.Add("NRF2017_DEMO", typeof(int));
            table.Columns.Add("NRF2017_DEMO_CategoryExpertHunt", typeof(int));
            table.Columns.Add("ONE_AMERICAS_DEMO", typeof(int));
            table.Columns.Add("ONE_AMERICAS_DEMO_CategoryExpertHunt", typeof(int));
            table.Columns.Add("ONE_APAC_DEMO", typeof(int));
            table.Columns.Add("ONE_APAC_DEMO_CategoryExpertHunt", typeof(int));
            table.Columns.Add("PEPSICOBR", typeof(int));
            table.Columns.Add("PEPSICOBR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("PNGAU", typeof(int));
            table.Columns.Add("PNGAU_CategoryExpertHunt", typeof(int));
            table.Columns.Add("PNGAU_OLD", typeof(int));
            table.Columns.Add("PNGAU_OLD_CategoryExpertHunt", typeof(int));
            table.Columns.Add("PNGCAREUS", typeof(int));
            table.Columns.Add("PNGCAREUS_CategoryExpertHunt", typeof(int));
            table.Columns.Add("PNGCN_PROD", typeof(int));
            table.Columns.Add("PNGCN_PROD_CategoryExpertHunt", typeof(int));
            table.Columns.Add("PNGJP", typeof(int));
            table.Columns.Add("PNGJP_CategoryExpertHunt", typeof(int));
            table.Columns.Add("PNGJP_OLD", typeof(int));
            table.Columns.Add("PNGJP_OLD_CategoryExpertHunt", typeof(int));
            table.Columns.Add("PNGUS", typeof(int));
            table.Columns.Add("PNGUS_CategoryExpertHunt", typeof(int));
            table.Columns.Add("PNGUSEPISODIC", typeof(int));
            table.Columns.Add("PNGUSEPISODIC_CategoryExpertHunt", typeof(int));
            table.Columns.Add("RBUS", typeof(int));
            table.Columns.Add("RBUS_CategoryExpertHunt", typeof(int));
            table.Columns.Add("RE_XSUITE_DEMO", typeof(int));
            table.Columns.Add("RE_XSUITE_DEMO_CategoryExpertHunt", typeof(int));
            table.Columns.Add("REPNGCN_DEMO", typeof(int));
            table.Columns.Add("REPNGCN_DEMO_CategoryExpertHunt", typeof(int));
            table.Columns.Add("RI_DEMO", typeof(int));
            table.Columns.Add("RI_DEMO_CategoryExpertHunt", typeof(int));
            table.Columns.Add("RI_DIAGEOAU", typeof(int));
            table.Columns.Add("RI_DIAGEOAU_CategoryExpertHunt", typeof(int));
            table.Columns.Add("RIALCBEVUK_PROD", typeof(int));
            table.Columns.Add("RIALCBEVUK_PROD_CategoryExpertHunt", typeof(int));
            table.Columns.Add("RICOFFEEUS", typeof(int));
            table.Columns.Add("RICOFFEEUS_CategoryExpertHunt", typeof(int));
            table.Columns.Add("RINIELSENUS", typeof(int));
            table.Columns.Add("RINIELSENUS_CategoryExpertHunt", typeof(int));
            table.Columns.Add("RIPETCAREUK_PROD", typeof(int));
            table.Columns.Add("RIPETCAREUK_PROD_CategoryExpertHunt", typeof(int));
            table.Columns.Add("RIUS", typeof(int));
            table.Columns.Add("RIUS_CategoryExpertHunt", typeof(int));
            table.Columns.Add("RIUS_DEV", typeof(int));
            table.Columns.Add("RIUS_DEV_CategoryExpertHunt", typeof(int));
            table.Columns.Add("RNBDE", typeof(int));
            table.Columns.Add("RNBDE_CategoryExpertHunt", typeof(int));
            table.Columns.Add("SMARTCOOLER_POC2", typeof(int));
            table.Columns.Add("SMARTCOOLER_POC2_CategoryExpertHunt", typeof(int));
            table.Columns.Add("SMARTCOOLER_TRN", typeof(int));
            table.Columns.Add("SMARTCOOLER_TRN_CategoryExpertHunt", typeof(int));
            table.Columns.Add("SMARTCOOLER2_TRN", typeof(int));
            table.Columns.Add("SMARTCOOLER2_TRN_CategoryExpertHunt", typeof(int));
            table.Columns.Add("SOLARBR", typeof(int));
            table.Columns.Add("SOLARBR_CategoryExpertHunt", typeof(int));
            table.Columns.Add("STATIC_CAMERA_DEMO", typeof(int));
            table.Columns.Add("STATIC_CAMERA_DEMO_CategoryExpertHunt", typeof(int));
            table.Columns.Add("SWIRECN", typeof(int));
            table.Columns.Add("SWIRECN_CategoryExpertHunt", typeof(int));
            table.Columns.Add("SWIREREDCN", typeof(int));
            table.Columns.Add("SWIREREDCN_CategoryExpertHunt", typeof(int));
            table.Columns.Add("TNUVAIL", typeof(int));
            table.Columns.Add("TNUVAIL_CategoryExpertHunt", typeof(int));
            table.Columns.Add("TRAXDEMO_TS_PROD", typeof(int));
            table.Columns.Add("TRAXDEMO_TS_PROD_CategoryExpertHunt", typeof(int));
            table.Columns.Add("TWEAU", typeof(int));
            table.Columns.Add("TWEAU_CategoryExpertHunt", typeof(int));
            table.Columns.Add("RI_DEMO2", typeof(int));
            table.Columns.Add("RI_DEMO2_CategoryExpertHunt", typeof(int));
            table.Columns.Add("COMPASSCCH_SAND", typeof(int));
            table.Columns.Add("COMPASSCCH_SAND_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAIT_SAND", typeof(int));
            table.Columns.Add("LAVAZZAIT_SAND_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVUS_STG", typeof(int));
            table.Columns.Add("INBEVUS_STG_CategoryExpertHunt", typeof(int));
            table.Columns.Add("LAVAZZAFR_SAND", typeof(int));
            table.Columns.Add("LAVAZZAFR_SAND_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVBE_SAND2", typeof(int));
            table.Columns.Add("INBEVBE_SAND2_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVLU_SAND2", typeof(int));
            table.Columns.Add("INBEVLU_SAND2_CategoryExpertHunt", typeof(int));
            table.Columns.Add("INBEVNL_SAND2", typeof(int));
            table.Columns.Add("INBEVNL_SAND2_CategoryExpertHunt", typeof(int));
            table.Columns.Add("CreatedDate", typeof(string));
            table.Columns.Add("CreatedBy", typeof(string));

            table.Columns.Add("ImportedDate", typeof(string));
            table.Columns.Add("ImportedYear", typeof(string));
            table.Columns.Add("B2BRU", typeof(int));
            table.Columns.Add("BRMUS", typeof(int));
            table.Columns.Add("CBCIL", typeof(int));
            table.Columns.Add("CCCOOLERMX", typeof(int));
            table.Columns.Add("DIAGEOAR", typeof(int));
            table.Columns.Add("DIAGEOBENELUX", typeof(int));
            table.Columns.Add("DIAGEOCH", typeof(int));
            table.Columns.Add("DIAGEOGA", typeof(int));
            table.Columns.Add("DIAGEOGTR", typeof(int));
            table.Columns.Add("DIAGEONORDICS", typeof(int));
            table.Columns.Add("DIAGEOUS", typeof(int));
            table.Columns.Add("FERREROEXTIT", typeof(int));
            table.Columns.Add("GOOGLEHK", typeof(int));
            table.Columns.Add("HEINEKENPILOTCN", typeof(int));
            table.Columns.Add("IMBO", typeof(int));
            table.Columns.Add("INBEVCI", typeof(int));
            table.Columns.Add("INBEVCNTT", typeof(int));
            table.Columns.Add("INBEVCO", typeof(int));
            table.Columns.Add("INBEVZA", typeof(int));
            table.Columns.Add("INORU", typeof(int));
            table.Columns.Add("JJSP", typeof(int));
            table.Columns.Add("JNJES", typeof(int));
            table.Columns.Add("JNJUK", typeof(int));
            table.Columns.Add("JRIJP", typeof(int));
            table.Columns.Add("KELLOGSUSPOC", typeof(int));
            table.Columns.Add("KRAFTUS", typeof(int));
            table.Columns.Add("MARS_CHOCO_RU", typeof(int));
            table.Columns.Add("MHUK", typeof(int));
            table.Columns.Add("MILLERCOORS", typeof(int));
            table.Columns.Add("MOLSONONTRADEUK", typeof(int));
            table.Columns.Add("MYCHEMISTAU", typeof(int));
            table.Columns.Add("NESTLEROAMLERUK", typeof(int));
            table.Columns.Add("NRF2018", typeof(int));
            table.Columns.Add("PENAFLORAR", typeof(int));
            table.Columns.Add("PMIUA", typeof(int));
            table.Columns.Add("PNGAMERICA", typeof(int));
            table.Columns.Add("PNGRO", typeof(int));
            table.Columns.Add("RBAU", typeof(int));
            table.Columns.Add("RBCA", typeof(int));
            table.Columns.Add("RBDK", typeof(int));
            table.Columns.Add("RBMANUAL", typeof(int));
            table.Columns.Add("RINIELSENRU_MARS", typeof(int));
            table.Columns.Add("RINIELSENUSQI", typeof(int));
            table.Columns.Add("RIPANELCN", typeof(int));
            table.Columns.Add("RISPARKWINEDE", typeof(int));
            table.Columns.Add("SANOFIAE", typeof(int));
            table.Columns.Add("SANOFIAU", typeof(int));
            table.Columns.Add("SANOFIHK", typeof(int));
            table.Columns.Add("SANOFIKH", typeof(int));
            table.Columns.Add("SANOFINZ", typeof(int));
            table.Columns.Add("SANOFIRU", typeof(int));
            table.Columns.Add("SANOFITR", typeof(int));
            table.Columns.Add("SANOFIUA", typeof(int));
            table.Columns.Add("SHUFERSALIL", typeof(int));
            table.Columns.Add("SUNTORYJP", typeof(int));
            table.Columns.Add("TESCOTH", typeof(int));
            table.Columns.Add("TESCOUK", typeof(int));
            table.Columns.Add("TRAXROBOT", typeof(int));
            table.Columns.Add("XSUITE_SHOWCASE", typeof(int));
            table.Columns.Add("ABIUS", typeof(int));
            table.Columns.Add("BADGERROBOT", typeof(int));
            table.Columns.Add("CUBAU", typeof(int));
            table.Columns.Add("DIAGEORU", typeof(int));
            table.Columns.Add("GFKFR", typeof(int));
            table.Columns.Add("JNJIT", typeof(int));
            table.Columns.Add("LIGHTTRAX", typeof(int));
            table.Columns.Add("LIGHTTRAXOFFLINE", typeof(int));
            table.Columns.Add("RINIELSENFR", typeof(int));
            table.Columns.Add("SANOFIKZ", typeof(int));
            table.Columns.Add("SANOFILB", typeof(int));
            table.Columns.Add("SANOFISA", typeof(int));
            table.Columns.Add("SANOFIZA", typeof(int));
            table.Columns.Add("WATSONSHK", typeof(int));
            table.Columns.Add("KELLOGGUS", typeof(int));
            table.Columns.Add("TSINGTAOBEERCN", typeof(int));

            // note : the order of the field is very important
            // and should be same as the defined in table structure.
            categoryexperthunt.ForEach(data => table.Rows.Add(
                                                data.ID
                                                , data.QAT
                                                , data.Center
                                                , data.TotalCategoryExpertHunt
                                                , data.AvgsecondsperCategoryExpertHunt
                                                , data.ABICA
                                                , data.ABICA_CategoryExpertHunt
                                                , data.ABITAMSUS_PROD
                                                , data.ABITAMSUS_PROD_CategoryExpertHunt
                                                , data.AMERICAS_DEMO
                                                , data.AMERICAS_DEMO_CategoryExpertHunt
                                                , data.BATRU
                                                , data.BATRU_CategoryExpertHunt
                                                , data.BIKR
                                                , data.BIKR_CategoryExpertHunt
                                                , data.BIMY
                                                , data.BIMY_CategoryExpertHunt
                                                , data.BIPH
                                                , data.BIPH_CategoryExpertHunt
                                                , data.BISEASK
                                                , data.BISEASK_CategoryExpertHunt
                                                , data.BITH
                                                , data.BITH_CategoryExpertHunt
                                                , data.BIVN
                                                , data.BIVN_CategoryExpertHunt
                                                , data.BPAU
                                                , data.BPAU_CategoryExpertHunt
                                                , data.BRODMANN
                                                , data.BRODMANN_CategoryExpertHunt
                                                , data.CARREFOURAR
                                                , data.CARREFOURAR_CategoryExpertHunt
                                                , data.CCAAU
                                                , data.CCAAU_CategoryExpertHunt
                                                , data.CCABIZA
                                                , data.CCABIZA_CategoryExpertHunt
                                                , data.CCANZ
                                                , data.CCANZ_CategoryExpertHunt
                                                , data.CCBOTTLERSUS
                                                , data.CCBOTTLERSUS_CategoryExpertHunt
                                                , data.CCBR_PROD
                                                , data.CCBR_PROD_CategoryExpertHunt
                                                , data.CCJP
                                                , data.CCJP_CategoryExpertHunt
                                                , data.CCKH
                                                , data.CCKH_CategoryExpertHunt
                                                , data.CCKR
                                                , data.CCKR_CategoryExpertHunt
                                                , data.CCMY
                                                , data.CCMY_CategoryExpertHunt
                                                , data.CCPH
                                                , data.CCPH_CategoryExpertHunt
                                                , data.CCRPR_PROD
                                                , data.CCRPR_PROD_CategoryExpertHunt
                                                , data.CCRU
                                                , data.CCRU_CategoryExpertHunt
                                                , data.CCTH
                                                , data.CCTH_CategoryExpertHunt
                                                , data.CCTH_UAT
                                                , data.CCTH_UAT_CategoryExpertHunt
                                                , data.CCTRADMX
                                                , data.CCTRADMX_CategoryExpertHunt
                                                , data.CCUS
                                                , data.CCUS_CategoryExpertHunt
                                                , data.CCZA
                                                , data.CCZA_CategoryExpertHunt
                                                , data.CEREBOSTH
                                                , data.CEREBOSTH_CategoryExpertHunt
                                                , data.CROWDSOURCE
                                                , data.CROWDSOURCE_CategoryExpertHunt
                                                , data.DIAGEOAU
                                                , data.DIAGEOAU_CategoryExpertHunt
                                                , data.DIAGEOBR
                                                , data.DIAGEOBR_CategoryExpertHunt
                                                , data.DIAGEOGR
                                                , data.DIAGEOGR_CategoryExpertHunt
                                                , data.DIAGEOIE
                                                , data.DIAGEOIE_CategoryExpertHunt
                                                , data.DIAGEOKE
                                                , data.DIAGEOKE_CategoryExpertHunt
                                                , data.DIAGEOMX
                                                , data.DIAGEOMX_CategoryExpertHunt
                                                , data.DIAGEOPT
                                                , data.DIAGEOPT_CategoryExpertHunt
                                                , data.DIAGEOTW
                                                , data.DIAGEOTW_CategoryExpertHunt
                                                , data.DIAGEOUK
                                                , data.DIAGEOUK_CategoryExpertHunt
                                                , data.DIAGEOZA
                                                , data.DIAGEOZA_CategoryExpertHunt
                                                , data.EMEA_DEMO
                                                , data.EMEA_DEMO_CategoryExpertHunt
                                                , data.FERREROIT
                                                , data.FERREROIT_CategoryExpertHunt
                                                , data.GILLETTEUS
                                                , data.GILLETTEUS_CategoryExpertHunt
                                                , data.GOOGLEUS
                                                , data.GOOGLEUS_CategoryExpertHunt
                                                , data.HBCDE
                                                , data.HBCDE_CategoryExpertHunt
                                                , data.HEINEKENCN
                                                , data.HEINEKENCN_CategoryExpertHunt
                                                , data.HEINEKENUS_PROD
                                                , data.HEINEKENUS_PROD_CategoryExpertHunt
                                                , data.HEINZCR
                                                , data.HEINZCR_CategoryExpertHunt
                                                , data.INBEVAR
                                                , data.INBEVAR_CategoryExpertHunt
                                                , data.INBEVBE
                                                , data.INBEVBE_CategoryExpertHunt
                                                , data.INBEVBE_SAND
                                                , data.INBEVBE_SAND_CategoryExpertHunt
                                                , data.INBEVBR
                                                , data.INBEVBR_CategoryExpertHunt
                                                , data.INBEVBR_ONTRADE
                                                , data.INBEVBR_ONTRADE_CategoryExpertHunt
                                                , data.INBEVCL
                                                , data.INBEVCL_CategoryExpertHunt
                                                , data.INBEVCN
                                                , data.INBEVCN_CategoryExpertHunt
                                                , data.INBEVCOOLERAR
                                                , data.INBEVCOOLERAR_CategoryExpertHunt
                                                , data.INBEVCOOLERBR
                                                , data.INBEVCOOLERBR_CategoryExpertHunt
                                                , data.INBEVCOOLERUS
                                                , data.INBEVCOOLERUS_CategoryExpertHunt
                                                , data.INBEVFR
                                                , data.INBEVFR_CategoryExpertHunt
                                                , data.INBEVLU
                                                , data.INBEVLU_CategoryExpertHunt
                                                , data.INBEVLU_SAND
                                                , data.INBEVLU_SAND_CategoryExpertHunt
                                                , data.INBEVMX
                                                , data.INBEVMX_CategoryExpertHunt
                                                , data.INBEVNL
                                                , data.INBEVNL_CategoryExpertHunt
                                                , data.INBEVNL_SAND
                                                , data.INBEVNL_SAND_CategoryExpertHunt
                                                , data.INBEVPY
                                                , data.INBEVPY_CategoryExpertHunt
                                                , data.INBEVTRADMX
                                                , data.INBEVTRADMX_CategoryExpertHunt
                                                , data.INBEVUS
                                                , data.INBEVUS_CategoryExpertHunt
                                                , data.JTIUA
                                                , data.JTIUA_CategoryExpertHunt
                                                , data.KCMY
                                                , data.KCMY_CategoryExpertHunt
                                                , data.KCUS
                                                , data.KCUS_CategoryExpertHunt
                                                , data.KEURIGCA
                                                , data.KEURIGCA_CategoryExpertHunt
                                                , data.LABATTPLNOPTCA
                                                , data.LABATTPLNOPTCA_CategoryExpertHunt
                                                , data.LAVAZZAAT
                                                , data.LAVAZZAAT_CategoryExpertHunt
                                                , data.LAVAZZAAU
                                                , data.LAVAZZAAU_CategoryExpertHunt
                                                , data.LAVAZZABE
                                                , data.LAVAZZABE_CategoryExpertHunt
                                                , data.LAVAZZABG
                                                , data.LAVAZZABG_CategoryExpertHunt
                                                , data.LAVAZZACA
                                                , data.LAVAZZACA_CategoryExpertHunt
                                                , data.LAVAZZACH
                                                , data.LAVAZZACH_CategoryExpertHunt
                                                , data.LAVAZZACL
                                                , data.LAVAZZACL_CategoryExpertHunt
                                                , data.LAVAZZACN
                                                , data.LAVAZZACN_CategoryExpertHunt
                                                , data.LAVAZZACZ
                                                , data.LAVAZZACZ_CategoryExpertHunt
                                                , data.LAVAZZADE
                                                , data.LAVAZZADE_CategoryExpertHunt
                                                , data.LAVAZZADK
                                                , data.LAVAZZADK_CategoryExpertHunt
                                                , data.LAVAZZAEE
                                                , data.LAVAZZAEE_CategoryExpertHunt
                                                , data.LAVAZZAES
                                                , data.LAVAZZAES_CategoryExpertHunt
                                                , data.LAVAZZAFR
                                                , data.LAVAZZAFR_CategoryExpertHunt
                                                , data.LAVAZZAGR
                                                , data.LAVAZZAGR_CategoryExpertHunt
                                                , data.LAVAZZAHK
                                                , data.LAVAZZAHK_CategoryExpertHunt
                                                , data.LAVAZZAHR
                                                , data.LAVAZZAHR_CategoryExpertHunt
                                                , data.LAVAZZAIL
                                                , data.LAVAZZAIL_CategoryExpertHunt
                                                , data.LAVAZZAIT
                                                , data.LAVAZZAIT_CategoryExpertHunt
                                                , data.LAVAZZAJP
                                                , data.LAVAZZAJP_CategoryExpertHunt
                                                , data.LAVAZZAKR
                                                , data.LAVAZZAKR_CategoryExpertHunt
                                                , data.LAVAZZALT
                                                , data.LAVAZZALT_CategoryExpertHunt
                                                , data.LAVAZZALU
                                                , data.LAVAZZALU_CategoryExpertHunt
                                                , data.LAVAZZALV
                                                , data.LAVAZZALV_CategoryExpertHunt
                                                , data.LAVAZZAMA
                                                , data.LAVAZZAMA_CategoryExpertHunt
                                                , data.LAVAZZANL
                                                , data.LAVAZZANL_CategoryExpertHunt
                                                , data.LAVAZZAPL
                                                , data.LAVAZZAPL_CategoryExpertHunt
                                                , data.LAVAZZARO
                                                , data.LAVAZZARO_CategoryExpertHunt
                                                , data.LAVAZZARU
                                                , data.LAVAZZARU_CategoryExpertHunt
                                                , data.LAVAZZASA
                                                , data.LAVAZZASA_CategoryExpertHunt
                                                , data.LAVAZZASE
                                                , data.LAVAZZASE_CategoryExpertHunt
                                                , data.LAVAZZASG
                                                , data.LAVAZZASG_CategoryExpertHunt
                                                , data.LAVAZZAUAE
                                                , data.LAVAZZAUAE_CategoryExpertHunt
                                                , data.LAVAZZAUK
                                                , data.LAVAZZAUK_CategoryExpertHunt
                                                , data.LAVAZZAUS
                                                , data.LAVAZZAUS_CategoryExpertHunt
                                                , data.LAVAZZAZA
                                                , data.LAVAZZAZA_CategoryExpertHunt
                                                , data.LRSUK
                                                , data.LRSUK_CategoryExpertHunt
                                                , data.MARSBR
                                                , data.MARSBR_CategoryExpertHunt
                                                , data.MARSIN
                                                , data.MARSIN_CategoryExpertHunt
                                                , data.MARSIN_OLD
                                                , data.MARSIN_OLD_CategoryExpertHunt
                                                , data.MARSRU_PROD
                                                , data.MARSRU_PROD_CategoryExpertHunt
                                                , data.MAYORAID
                                                , data.MAYORAID_CategoryExpertHunt
                                                , data.MJNCN
                                                , data.MJNCN_CategoryExpertHunt
                                                , data.MOLSONCOOLERHN
                                                , data.MOLSONCOOLERHN_CategoryExpertHunt
                                                , data.MOLSONCOOLERHR
                                                , data.MOLSONCOOLERHR_CategoryExpertHunt
                                                , data.MOLSONCOORSUK
                                                , data.MOLSONCOORSUK_CategoryExpertHunt
                                                , data.NESTLEUK
                                                , data.NESTLEUK_CategoryExpertHunt
                                                , data.NIVEAUK
                                                , data.NIVEAUK_CategoryExpertHunt
                                                , data.NRF2017_DEMO
                                                , data.NRF2017_DEMO_CategoryExpertHunt
                                                , data.ONE_AMERICAS_DEMO
                                                , data.ONE_AMERICAS_DEMO_CategoryExpertHunt
                                                , data.ONE_APAC_DEMO
                                                , data.ONE_APAC_DEMO_CategoryExpertHunt
                                                , data.PEPSICOBR
                                                , data.PEPSICOBR_CategoryExpertHunt
                                                , data.PNGAU
                                                , data.PNGAU_CategoryExpertHunt
                                                , data.PNGAU_OLD
                                                , data.PNGAU_OLD_CategoryExpertHunt
                                                , data.PNGCAREUS
                                                , data.PNGCAREUS_CategoryExpertHunt
                                                , data.PNGCN_PROD
                                                , data.PNGCN_PROD_CategoryExpertHunt
                                                , data.PNGJP
                                                , data.PNGJP_CategoryExpertHunt
                                                , data.PNGJP_OLD
                                                , data.PNGJP_OLD_CategoryExpertHunt
                                                , data.PNGUS
                                                , data.PNGUS_CategoryExpertHunt
                                                , data.PNGUSEPISODIC
                                                , data.PNGUSEPISODIC_CategoryExpertHunt
                                                , data.RBUS
                                                , data.RBUS_CategoryExpertHunt
                                                , data.RE_XSUITE_DEMO
                                                , data.RE_XSUITE_DEMO_CategoryExpertHunt
                                                , data.REPNGCN_DEMO
                                                , data.REPNGCN_DEMO_CategoryExpertHunt
                                                , data.RI_DEMO
                                                , data.RI_DEMO_CategoryExpertHunt
                                                , data.RI_DIAGEOAU
                                                , data.RI_DIAGEOAU_CategoryExpertHunt
                                                , data.RIALCBEVUK_PROD
                                                , data.RIALCBEVUK_PROD_CategoryExpertHunt
                                                , data.RICOFFEEUS
                                                , data.RICOFFEEUS_CategoryExpertHunt
                                                , data.RINIELSENUS
                                                , data.RINIELSENUS_CategoryExpertHunt
                                                , data.RIPETCAREUK_PROD
                                                , data.RIPETCAREUK_PROD_CategoryExpertHunt
                                                , data.RIUS
                                                , data.RIUS_CategoryExpertHunt
                                                , data.RIUS_DEV
                                                , data.RIUS_DEV_CategoryExpertHunt
                                                , data.RNBDE
                                                , data.RNBDE_CategoryExpertHunt
                                                , data.SMARTCOOLER_POC2
                                                , data.SMARTCOOLER_POC2_CategoryExpertHunt
                                                , data.SMARTCOOLER_TRN
                                                , data.SMARTCOOLER_TRN_CategoryExpertHunt
                                                , data.SMARTCOOLER2_TRN
                                                , data.SMARTCOOLER2_TRN_CategoryExpertHunt
                                                , data.SOLARBR
                                                , data.SOLARBR_CategoryExpertHunt
                                                , data.STATIC_CAMERA_DEMO
                                                , data.STATIC_CAMERA_DEMO_CategoryExpertHunt
                                                , data.SWIRECN
                                                , data.SWIRECN_CategoryExpertHunt
                                                , data.SWIREREDCN
                                                , data.SWIREREDCN_CategoryExpertHunt
                                                , data.TNUVAIL
                                                , data.TNUVAIL_CategoryExpertHunt
                                                , data.TRAXDEMO_TS_PROD
                                                , data.TRAXDEMO_TS_PROD_CategoryExpertHunt
                                                , data.TWEAU
                                                , data.TWEAU_CategoryExpertHunt
                                                , data.RI_DEMO2
                                                , data.RI_DEMO2_CategoryExpertHunt
                                                , data.COMPASSCCH_SAND
                                                , data.COMPASSCCH_SAND_CategoryExpertHunt
                                                , data.LAVAZZAIT_SAND
                                                , data.LAVAZZAIT_SAND_CategoryExpertHunt
                                                , data.INBEVUS_STG
                                                , data.INBEVUS_STG_CategoryExpertHunt
                                                , data.LAVAZZAFR_SAND
                                                , data.LAVAZZAFR_SAND_CategoryExpertHunt
                                                , data.INBEVBE_SAND2
                                                , data.INBEVBE_SAND2_CategoryExpertHunt
                                                , data.INBEVLU_SAND2
                                                , data.INBEVLU_SAND2_CategoryExpertHunt
                                                , data.INBEVNL_SAND2
                                                , data.INBEVNL_SAND2_CategoryExpertHunt
                                                , data.CreatedDate
                                                , data.CreatedBy

                                                , data.ImportedDate
                                                , data.ImportedYear
                                                , data.B2BRU
                                                , data.BRMUS
                                                , data.CBCIL
                                                , data.CCCOOLERMX
                                                , data.DIAGEOAR
                                                , data.DIAGEOBENELUX
                                                , data.DIAGEOCH
                                                , data.DIAGEOGA
                                                , data.DIAGEOGTR
                                                , data.DIAGEONORDICS
                                                , data.DIAGEOUS
                                                , data.FERREROEXTIT
                                                , data.GOOGLEHK
                                                , data.HEINEKENPILOTCN
                                                , data.IMBO
                                                , data.INBEVCI
                                                , data.INBEVCNTT
                                                , data.INBEVCO
                                                , data.INBEVZA
                                                , data.INORU
                                                , data.JJSP
                                                , data.JNJES
                                                , data.JNJUK
                                                , data.JRIJP
                                                , data.KELLOGSUSPOC
                                                , data.KRAFTUS
                                                , data.MARS_CHOCO_RU
                                                , data.MHUK
                                                , data.MILLERCOORS
                                                , data.MOLSONONTRADEUK
                                                , data.MYCHEMISTAU
                                                , data.NESTLEROAMLERUK
                                                , data.NRF2018
                                                , data.PENAFLORAR
                                                , data.PMIUA
                                                , data.PNGAMERICA
                                                , data.PNGRO
                                                , data.RBAU
                                                , data.RBCA
                                                , data.RBDK
                                                , data.RBMANUAL
                                                , data.RINIELSENRU_MARS
                                                , data.RINIELSENUSQI
                                                , data.RIPANELCN
                                                , data.RISPARKWINEDE
                                                , data.SANOFIAE
                                                , data.SANOFIAU
                                                , data.SANOFIHK
                                                , data.SANOFIKH
                                                , data.SANOFINZ
                                                , data.SANOFIRU
                                                , data.SANOFITR
                                                , data.SANOFIUA
                                                , data.SHUFERSALIL
                                                , data.SUNTORYJP
                                                , data.TESCOTH
                                                , data.TESCOUK
                                                , data.TRAXROBOT
                                                , data.XSUITE_SHOWCASE
                                                , data.ABIUS
                                                , data.BADGERROBOT
                                                , data.CUBAU
                                                , data.DIAGEORU
                                                , data.GFKFR
                                                , data.JNJIT
                                                , data.LIGHTTRAX
                                                , data.LIGHTTRAXOFFLINE
                                                , data.RINIELSENFR
                                                , data.SANOFIKZ
                                                , data.SANOFILB
                                                , data.SANOFISA
                                                , data.SANOFIZA
                                                , data.WATSONSHK
                                                , data.KELLOGGUS
                                                 , data.TSINGTAOBEERCN
                                                ));
            return table;
        }
    }
}